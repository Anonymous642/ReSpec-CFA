
ReSpec-CFA_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b28  080401f8  080401f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08040d20  08040d20  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08040d20  08040d20  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08040d20  08040d20  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08040d20  08040d20  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040d20  08040d20  00001d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040d24  08040d24  00001d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20018000  08040d28  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2001800c  08040d34  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001803c  08040d34  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY
 13 .debug_line   00004a09  00000000  00000000  000020de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000078  00000000  00000000  00006ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000031db  00000000  00000000  00006b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000d7a  00000000  00000000  00009d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000410  00000000  00000000  0000aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5296  00000000  00000000  0000aec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000002de  00000000  00000000  0010015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000266de  00000000  00000000  0010043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d3c  00000000  00000000  00126b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	@ (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	@ (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	@ (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	f3af 8000 	nop.w
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	2001800c 	.word	0x2001800c
 8040214:	00000000 	.word	0x00000000
 8040218:	08040cd4 	.word	0x08040cd4

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	@ (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	@ (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	@ (8040234 <frame_dummy+0x18>)
 8040226:	f3af 8000 	nop.w
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018010 	.word	0x20018010
 8040234:	08040cd4 	.word	0x08040cd4

08040238 <delay>:
	.fpu fpv5-sp-d16
	.type	delay, %function
delay:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 8040238:	b580      	push	{r7, lr}
	sub	sp, sp, #16
 804023a:	b084      	sub	sp, #16
	add	r7, sp, #0
 804023c:	af00      	add	r7, sp, #0
	str	r0, [r7, #4]
 804023e:	6078      	str	r0, [r7, #4]
	movs	r3, #0
 8040240:	2300      	movs	r3, #0
	str	r3, [r7, #12]
 8040242:	60fb      	str	r3, [r7, #12]
	b	.L2
 8040244:	e004      	b.n	8040250 <delay+0x18>
.L3:
	bl	SECURE_log_cond_br
 8040246:	f000 fd53 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, [r7, #12]
 804024a:	68fb      	ldr	r3, [r7, #12]
	adds	r3, r3, #1
 804024c:	3301      	adds	r3, #1
	str	r3, [r7, #12]
 804024e:	60fb      	str	r3, [r7, #12]
.L2:
	ldr	r3, [r7, #12]
 8040250:	68fb      	ldr	r3, [r7, #12]
	ldr	r2, [r7, #4]
 8040252:	687a      	ldr	r2, [r7, #4]
	cmp	r2, r3
 8040254:	429a      	cmp	r2, r3
	bhi	.L3
 8040256:	d8f6      	bhi.n	8040246 <delay+0xe>
	bl	SECURE_log_cond_br
 8040258:	f000 fd4a 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	adds	r7, r7, #16
 804025c:	3710      	adds	r7, #16
	mov	sp, r7
 804025e:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040264:	f000 bd58 	b.w	8040d18 <__SECURE_log_ret_veneer>

08040268 <read_data>:
	.fpu fpv5-sp-d16
	.type	read_data, %function
read_data:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 8040268:	b580      	push	{r7, lr}
	sub	sp, sp, #8
 804026a:	b082      	sub	sp, #8
	add	r7, sp, #0
 804026c:	af00      	add	r7, sp, #0
	ldr	r3, .L11
 804026e:	4b46      	ldr	r3, [pc, #280]	@ (8040388 <read_data+0x120>)
	mov	r2, #256
 8040270:	f44f 7280 	mov.w	r2, #256	@ 0x100
	str	r2, [r3, #40]
 8040274:	629a      	str	r2, [r3, #40]	@ 0x28
	movs	r0, #250
 8040276:	20fa      	movs	r0, #250	@ 0xfa
	ldr	r10, =delay
 8040278:	f8df a11c 	ldr.w	sl, [pc, #284]	@ 8040398 <read_data+0x130>
	bl	SECURE_log_call
 804027c:	f000 fd40 	bl	8040d00 <__SECURE_log_call_veneer>
	ldr	r3, .L11
 8040280:	4b41      	ldr	r3, [pc, #260]	@ (8040388 <read_data+0x120>)
	mov	r2, #256
 8040282:	f44f 7280 	mov.w	r2, #256	@ 0x100
	str	r2, [r3, #24]
 8040286:	619a      	str	r2, [r3, #24]
	movs	r0, #20
 8040288:	2014      	movs	r0, #20
	ldr	r10, =delay
 804028a:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8040398 <read_data+0x130>
	bl	SECURE_log_call
 804028e:	f000 fd37 	bl	8040d00 <__SECURE_log_call_veneer>
	ldr	r3, .L11
 8040292:	4b3d      	ldr	r3, [pc, #244]	@ (8040388 <read_data+0x120>)
	mov	r2, #256
 8040294:	f44f 7280 	mov.w	r2, #256	@ 0x100
	str	r2, [r3, #40]
 8040298:	629a      	str	r2, [r3, #40]	@ 0x28
	movs	r0, #40
 804029a:	2028      	movs	r0, #40	@ 0x28
	ldr	r10, =delay
 804029c:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 8040398 <read_data+0x130>
	bl	SECURE_log_call
 80402a0:	f000 fd2e 	bl	8040d00 <__SECURE_log_call_veneer>
	movs	r3, #0
 80402a4:	2300      	movs	r3, #0
	str	r3, [r7, #4]
 80402a6:	607b      	str	r3, [r7, #4]
	movs	r3, #0
 80402a8:	2300      	movs	r3, #0
	str	r3, [r7]
 80402aa:	603b      	str	r3, [r7, #0]
	b	.L5
 80402ac:	e03e      	b.n	804032c <read_data+0xc4>
.L8:
	bl	SECURE_log_cond_br
 80402ae:	f000 fd1f 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, .L11
 80402b2:	4b35      	ldr	r3, [pc, #212]	@ (8040388 <read_data+0x120>)
	ldr	r3, [r3, #16]
 80402b4:	691b      	ldr	r3, [r3, #16]
	lsrs	r3, r3, #8
 80402b6:	0a1b      	lsrs	r3, r3, #8
	and	r3, r3, #1
 80402b8:	f003 0301 	and.w	r3, r3, #1
	uxtb	r2, r3
 80402bc:	b2da      	uxtb	r2, r3
	ldr	r3, .L11+4
 80402be:	4b33      	ldr	r3, [pc, #204]	@ (804038c <read_data+0x124>)
	ldrb	r3, [r3]	@ zero_extendqisi2
 80402c0:	781b      	ldrb	r3, [r3, #0]
	add	r3, r3, r2
 80402c2:	4413      	add	r3, r2
	uxtb	r2, r3
 80402c4:	b2da      	uxtb	r2, r3
	ldr	r3, .L11+4
 80402c6:	4b31      	ldr	r3, [pc, #196]	@ (804038c <read_data+0x124>)
	strb	r2, [r3]
 80402c8:	701a      	strb	r2, [r3, #0]
	ldr	r3, [r7]
 80402ca:	683b      	ldr	r3, [r7, #0]
	cmp	r3, #3
 80402cc:	2b03      	cmp	r3, #3
	ble	.L6
 80402ce:	dd28      	ble.n	8040322 <read_data+0xba>
	bl	SECURE_log_cond_br
 80402d0:	f000 fd0e 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, [r7]
 80402d4:	683b      	ldr	r3, [r7, #0]
	and	r3, r3, #1
 80402d6:	f003 0301 	and.w	r3, r3, #1
	cmp	r3, #0
 80402da:	2b00      	cmp	r3, #0
	bne	.L6
 80402dc:	d121      	bne.n	8040322 <read_data+0xba>
	bl	SECURE_log_cond_br
 80402de:	f000 fd07 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, [r7, #4]
 80402e2:	687b      	ldr	r3, [r7, #4]
	asrs	r3, r3, #3
 80402e4:	10db      	asrs	r3, r3, #3
	ldr	r2, .L11+8
 80402e6:	4a2a      	ldr	r2, [pc, #168]	@ (8040390 <read_data+0x128>)
	ldrb	r2, [r2, r3]	@ zero_extendqisi2
 80402e8:	5cd2      	ldrb	r2, [r2, r3]
	ldr	r3, [r7, #4]
 80402ea:	687b      	ldr	r3, [r7, #4]
	asrs	r3, r3, #3
 80402ec:	10db      	asrs	r3, r3, #3
	lsls	r2, r2, #1
 80402ee:	0052      	lsls	r2, r2, #1
	uxtb	r1, r2
 80402f0:	b2d1      	uxtb	r1, r2
	ldr	r2, .L11+8
 80402f2:	4a27      	ldr	r2, [pc, #156]	@ (8040390 <read_data+0x128>)
	strb	r1, [r2, r3]
 80402f4:	54d1      	strb	r1, [r2, r3]
	ldr	r3, .L11+4
 80402f6:	4b25      	ldr	r3, [pc, #148]	@ (804038c <read_data+0x124>)
	ldrb	r3, [r3]	@ zero_extendqisi2
 80402f8:	781b      	ldrb	r3, [r3, #0]
	cmp	r3, #6
 80402fa:	2b06      	cmp	r3, #6
	bls	.L7
 80402fc:	d90c      	bls.n	8040318 <read_data+0xb0>
	bl	SECURE_log_cond_br
 80402fe:	f000 fcf7 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, [r7, #4]
 8040302:	687b      	ldr	r3, [r7, #4]
	asrs	r3, r3, #3
 8040304:	10db      	asrs	r3, r3, #3
	ldr	r2, .L11+8
 8040306:	4a22      	ldr	r2, [pc, #136]	@ (8040390 <read_data+0x128>)
	ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8040308:	5cd2      	ldrb	r2, [r2, r3]
	ldr	r3, [r7, #4]
 804030a:	687b      	ldr	r3, [r7, #4]
	asrs	r3, r3, #3
 804030c:	10db      	asrs	r3, r3, #3
	orr	r2, r2, #1
 804030e:	f042 0201 	orr.w	r2, r2, #1
	uxtb	r1, r2
 8040312:	b2d1      	uxtb	r1, r2
	ldr	r2, .L11+8
 8040314:	4a1e      	ldr	r2, [pc, #120]	@ (8040390 <read_data+0x128>)
	strb	r1, [r2, r3]
 8040316:	54d1      	strb	r1, [r2, r3]
.L7:
	bl	SECURE_log_cond_br
 8040318:	f000 fcea 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, [r7, #4]
 804031c:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 804031e:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040320:	607b      	str	r3, [r7, #4]
.L6:
	bl	SECURE_log_cond_br
 8040322:	f000 fce5 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, [r7]
 8040326:	683b      	ldr	r3, [r7, #0]
	adds	r3, r3, #1
 8040328:	3301      	adds	r3, #1
	str	r3, [r7]
 804032a:	603b      	str	r3, [r7, #0]
.L5:
	ldr	r3, [r7]
 804032c:	683b      	ldr	r3, [r7, #0]
	cmp	r3, #82
 804032e:	2b52      	cmp	r3, #82	@ 0x52
	ble	.L8
 8040330:	ddbd      	ble.n	80402ae <read_data+0x46>
	bl	SECURE_log_cond_br
 8040332:	f000 fcdd 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, [r7, #4]
 8040336:	687b      	ldr	r3, [r7, #4]
	cmp	r3, #39
 8040338:	2b27      	cmp	r3, #39	@ 0x27
	ble	.L9
 804033a:	dd19      	ble.n	8040370 <read_data+0x108>
	bl	SECURE_log_cond_br
 804033c:	f000 fcd8 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, .L11+8
 8040340:	4b13      	ldr	r3, [pc, #76]	@ (8040390 <read_data+0x128>)
	ldrb	r3, [r3, #4]	@ zero_extendqisi2
 8040342:	791b      	ldrb	r3, [r3, #4]
	mov	r1, r3
 8040344:	4619      	mov	r1, r3
	ldr	r3, .L11+8
 8040346:	4b12      	ldr	r3, [pc, #72]	@ (8040390 <read_data+0x128>)
	ldrb	r3, [r3]	@ zero_extendqisi2
 8040348:	781b      	ldrb	r3, [r3, #0]
	mov	r2, r3
 804034a:	461a      	mov	r2, r3
	ldr	r3, .L11+8
 804034c:	4b10      	ldr	r3, [pc, #64]	@ (8040390 <read_data+0x128>)
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
 804034e:	785b      	ldrb	r3, [r3, #1]
	add	r3, r3, r2
 8040350:	4413      	add	r3, r2
	ldr	r2, .L11+8
 8040352:	4a0f      	ldr	r2, [pc, #60]	@ (8040390 <read_data+0x128>)
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
 8040354:	7892      	ldrb	r2, [r2, #2]
	add	r3, r3, r2
 8040356:	4413      	add	r3, r2
	ldr	r2, .L11+8
 8040358:	4a0d      	ldr	r2, [pc, #52]	@ (8040390 <read_data+0x128>)
	ldrb	r2, [r2, #3]	@ zero_extendqisi2
 804035a:	78d2      	ldrb	r2, [r2, #3]
	add	r3, r3, r2
 804035c:	4413      	add	r3, r2
	uxtb	r3, r3
 804035e:	b2db      	uxtb	r3, r3
	cmp	r1, r3
 8040360:	4299      	cmp	r1, r3
	bne	.L9
 8040362:	d105      	bne.n	8040370 <read_data+0x108>
	bl	SECURE_log_cond_br
 8040364:	f000 fcc4 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, .L11+12
 8040368:	4b0a      	ldr	r3, [pc, #40]	@ (8040394 <read_data+0x12c>)
	movs	r2, #1
 804036a:	2201      	movs	r2, #1
	strb	r2, [r3]
 804036c:	701a      	strb	r2, [r3, #0]
	b	.L10
 804036e:	e004      	b.n	804037a <read_data+0x112>
.L9:
	bl	SECURE_log_cond_br
 8040370:	f000 fcbe 	bl	8040cf0 <__SECURE_log_cond_br_veneer>
	ldr	r3, .L11+12
 8040374:	4b07      	ldr	r3, [pc, #28]	@ (8040394 <read_data+0x12c>)
	movs	r2, #0
 8040376:	2200      	movs	r2, #0
	strb	r2, [r3]
 8040378:	701a      	strb	r2, [r3, #0]
.L10:
	adds	r7, r7, #8
 804037a:	3708      	adds	r7, #8
	mov	sp, r7
 804037c:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 804037e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040382:	f000 bcc9 	b.w	8040d18 <__SECURE_log_ret_veneer>
 8040386:	bf00      	nop
 8040388:	42020000 	.word	0x42020000
 804038c:	2001802e 	.word	0x2001802e
 8040390:	20018028 	.word	0x20018028
 8040394:	2001802d 	.word	0x2001802d
	ldr	r10, =delay
 8040398:	08040239 	.word	0x08040239

0804039c <get_temperature>:
	.fpu fpv5-sp-d16
	.type	get_temperature, %function
get_temperature:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 804039c:	b580      	push	{r7, lr}
	sub	sp, sp, #8
 804039e:	b082      	sub	sp, #8
	add	r7, sp, #0
 80403a0:	af00      	add	r7, sp, #0
	ldr	r10, =read_data
 80403a2:	f8df a034 	ldr.w	sl, [pc, #52]	@ 80403d8 <get_temperature+0x3c>
	bl	SECURE_log_call
 80403a6:	f000 fcab 	bl	8040d00 <__SECURE_log_call_veneer>
	ldr	r3, .L15
 80403aa:	4b0a      	ldr	r3, [pc, #40]	@ (80403d4 <get_temperature+0x38>)
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
 80403ac:	789b      	ldrb	r3, [r3, #2]
	strh	r3, [r7, #6]	@ movhi
 80403ae:	80fb      	strh	r3, [r7, #6]
	ldr	r3, .L15
 80403b0:	4b08      	ldr	r3, [pc, #32]	@ (80403d4 <get_temperature+0x38>)
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
 80403b2:	78db      	ldrb	r3, [r3, #3]
	lsls	r3, r3, #8
 80403b4:	021b      	lsls	r3, r3, #8
	sxth	r2, r3
 80403b6:	b21a      	sxth	r2, r3
	ldrsh	r3, [r7, #6]
 80403b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
	orrs	r3, r3, r2
 80403bc:	4313      	orrs	r3, r2
	sxth	r3, r3
 80403be:	b21b      	sxth	r3, r3
	strh	r3, [r7, #6]	@ movhi
 80403c0:	80fb      	strh	r3, [r7, #6]
	ldrh	r3, [r7, #6]
 80403c2:	88fb      	ldrh	r3, [r7, #6]
	mov	r0, r3
 80403c4:	4618      	mov	r0, r3
	adds	r7, r7, #8
 80403c6:	3708      	adds	r7, #8
	mov	sp, r7
 80403c8:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 80403ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 80403ce:	f000 bca3 	b.w	8040d18 <__SECURE_log_ret_veneer>
 80403d2:	bf00      	nop
 80403d4:	20018028 	.word	0x20018028
	ldr	r10, =read_data
 80403d8:	08040269 	.word	0x08040269

080403dc <application>:
	.fpu fpv5-sp-d16
	.type	application, %function
application:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 80403dc:	b580      	push	{r7, lr}
	add	r7, sp, #0
 80403de:	af00      	add	r7, sp, #0
	ldr	r10, =get_temperature
 80403e0:	f8df a018 	ldr.w	sl, [pc, #24]	@ 80403fc <application+0x20>
	bl	SECURE_log_call
 80403e4:	f000 fc8c 	bl	8040d00 <__SECURE_log_call_veneer>
	mov	r3, r0
 80403e8:	4603      	mov	r3, r0
	mov	r2, r3
 80403ea:	461a      	mov	r2, r3
	ldr	r3, .L22
 80403ec:	4b02      	ldr	r3, [pc, #8]	@ (80403f8 <application+0x1c>)
	str	r2, [r3]
 80403ee:	601a      	str	r2, [r3, #0]
	pop	{r7, lr}
 80403f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 80403f4:	f000 bc90 	b.w	8040d18 <__SECURE_log_ret_veneer>
 80403f8:	20018034 	.word	0x20018034
	ldr	r10, =get_temperature
 80403fc:	0804039d 	.word	0x0804039d

08040400 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8040400:	b580      	push	{r7, lr}
 8040402:	b088      	sub	sp, #32
 8040404:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040406:	f107 030c 	add.w	r3, r7, #12
 804040a:	2200      	movs	r2, #0
 804040c:	601a      	str	r2, [r3, #0]
 804040e:	605a      	str	r2, [r3, #4]
 8040410:	609a      	str	r2, [r3, #8]
 8040412:	60da      	str	r2, [r3, #12]
 8040414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040416:	4b31      	ldr	r3, [pc, #196]	@ (80404dc <MX_GPIO_Init+0xdc>)
 8040418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 804041a:	4a30      	ldr	r2, [pc, #192]	@ (80404dc <MX_GPIO_Init+0xdc>)
 804041c:	f043 0304 	orr.w	r3, r3, #4
 8040420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8040422:	4b2e      	ldr	r3, [pc, #184]	@ (80404dc <MX_GPIO_Init+0xdc>)
 8040424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8040426:	f003 0304 	and.w	r3, r3, #4
 804042a:	60bb      	str	r3, [r7, #8]
 804042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804042e:	4b2b      	ldr	r3, [pc, #172]	@ (80404dc <MX_GPIO_Init+0xdc>)
 8040430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8040432:	4a2a      	ldr	r2, [pc, #168]	@ (80404dc <MX_GPIO_Init+0xdc>)
 8040434:	f043 0301 	orr.w	r3, r3, #1
 8040438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 804043a:	4b28      	ldr	r3, [pc, #160]	@ (80404dc <MX_GPIO_Init+0xdc>)
 804043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 804043e:	f003 0301 	and.w	r3, r3, #1
 8040442:	607b      	str	r3, [r7, #4]
 8040444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8040446:	2200      	movs	r2, #0
 8040448:	2180      	movs	r1, #128	@ 0x80
 804044a:	4825      	ldr	r0, [pc, #148]	@ (80404e0 <MX_GPIO_Init+0xe0>)
 804044c:	f000 fc06 	bl	8040c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8040450:	2200      	movs	r2, #0
 8040452:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8040456:	4823      	ldr	r0, [pc, #140]	@ (80404e4 <MX_GPIO_Init+0xe4>)
 8040458:	f000 fc00 	bl	8040c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_BLUE_Pin;
 804045c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8040460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040462:	2300      	movs	r3, #0
 8040464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040466:	2300      	movs	r3, #0
 8040468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_BLUE_GPIO_Port, &GPIO_InitStruct);
 804046a:	f107 030c 	add.w	r3, r7, #12
 804046e:	4619      	mov	r1, r3
 8040470:	481b      	ldr	r0, [pc, #108]	@ (80404e0 <MX_GPIO_Init+0xe0>)
 8040472:	f000 fa73 	bl	804095c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8040476:	2380      	movs	r3, #128	@ 0x80
 8040478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804047a:	2301      	movs	r3, #1
 804047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804047e:	2300      	movs	r3, #0
 8040480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040482:	2300      	movs	r3, #0
 8040484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8040486:	f107 030c 	add.w	r3, r7, #12
 804048a:	4619      	mov	r1, r3
 804048c:	4814      	ldr	r0, [pc, #80]	@ (80404e0 <MX_GPIO_Init+0xe0>)
 804048e:	f000 fa65 	bl	804095c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8040492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8040496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040498:	2301      	movs	r3, #1
 804049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804049c:	2300      	movs	r3, #0
 804049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80404a0:	2300      	movs	r3, #0
 80404a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80404a4:	f107 030c 	add.w	r3, r7, #12
 80404a8:	4619      	mov	r1, r3
 80404aa:	480e      	ldr	r0, [pc, #56]	@ (80404e4 <MX_GPIO_Init+0xe4>)
 80404ac:	f000 fa56 	bl	804095c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80404b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80404b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80404b6:	2301      	movs	r3, #1
 80404b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80404ba:	2300      	movs	r3, #0
 80404bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80404be:	2300      	movs	r3, #0
 80404c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80404c2:	f107 030c 	add.w	r3, r7, #12
 80404c6:	4619      	mov	r1, r3
 80404c8:	4806      	ldr	r0, [pc, #24]	@ (80404e4 <MX_GPIO_Init+0xe4>)
 80404ca:	f000 fa47 	bl	804095c <HAL_GPIO_Init>

  HAL_Delay(100);
 80404ce:	2064      	movs	r0, #100	@ 0x64
 80404d0:	f000 f93c 	bl	804074c <HAL_Delay>
}
 80404d4:	bf00      	nop
 80404d6:	3720      	adds	r7, #32
 80404d8:	46bd      	mov	sp, r7
 80404da:	bd80      	pop	{r7, pc}
 80404dc:	40021000 	.word	0x40021000
 80404e0:	42020800 	.word	0x42020800
 80404e4:	42020000 	.word	0x42020000

080404e8 <SecureFault_Callback>:
  *(volatile uint32_t *)0x30000000UL = 0;
}

//secure fault generated by IDAU/SAU check */
void SecureFault_Callback(void)
{
 80404e8:	b580      	push	{r7, lr}
 80404ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80404ec:	2201      	movs	r2, #1
 80404ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80404f2:	4803      	ldr	r0, [pc, #12]	@ (8040500 <SecureFault_Callback+0x18>)
 80404f4:	f000 fbb2 	bl	8040c5c <HAL_GPIO_WritePin>
  Error_Handler();
 80404f8:	f000 f82e 	bl	8040558 <Error_Handler>
}
 80404fc:	bf00      	nop
 80404fe:	bd80      	pop	{r7, pc}
 8040500:	42020000 	.word	0x42020000

08040504 <SecureError_Callback>:

//secure error generated by GTZC check
void SecureError_Callback(void)
{
 8040504:	b580      	push	{r7, lr}
 8040506:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8040508:	2201      	movs	r2, #1
 804050a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 804050e:	4803      	ldr	r0, [pc, #12]	@ (804051c <SecureError_Callback+0x18>)
 8040510:	f000 fba4 	bl	8040c5c <HAL_GPIO_WritePin>
  Error_Handler();
 8040514:	f000 f820 	bl	8040558 <Error_Handler>
}
 8040518:	bf00      	nop
 804051a:	bd80      	pop	{r7, pc}
 804051c:	42020000 	.word	0x42020000

08040520 <main>:
//}

long t = 1234;
float f;
int main(void)
{
 8040520:	b580      	push	{r7, lr}
 8040522:	af00      	add	r7, sp, #0

//  f = t / 1000000.0;
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040524:	f000 f89b 	bl	804065e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8040528:	f7ff ff6a 	bl	8040400 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  //register error callbacks
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 804052c:	4907      	ldr	r1, [pc, #28]	@ (804054c <main+0x2c>)
 804052e:	2000      	movs	r0, #0
 8040530:	f000 fbee 	bl	8040d10 <__SECURE_RegisterCallback_veneer>
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8040534:	4906      	ldr	r1, [pc, #24]	@ (8040550 <main+0x30>)
 8040536:	2001      	movs	r0, #1
 8040538:	f000 fbea 	bl	8040d10 <__SECURE_RegisterCallback_veneer>
  SECURE_RegisterCallback(ATTESTATION_APP_ID,(void*)&application);
 804053c:	4905      	ldr	r1, [pc, #20]	@ (8040554 <main+0x34>)
 804053e:	2002      	movs	r0, #2
 8040540:	f000 fbe6 	bl	8040d10 <__SECURE_RegisterCallback_veneer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SECURE_run_attestation_wait_mode();
 8040544:	f000 fbd8 	bl	8040cf8 <__SECURE_run_attestation_wait_mode_veneer>
 8040548:	e7fc      	b.n	8040544 <main+0x24>
 804054a:	bf00      	nop
 804054c:	080404e9 	.word	0x080404e9
 8040550:	08040505 	.word	0x08040505
 8040554:	080403dd 	.word	0x080403dd

08040558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040558:	b480      	push	{r7}
 804055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 804055c:	b672      	cpsid	i
}
 804055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040560:	bf00      	nop
 8040562:	e7fd      	b.n	8040560 <Error_Handler+0x8>

08040564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040564:	b480      	push	{r7}
 8040566:	b083      	sub	sp, #12
 8040568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804056a:	4b0f      	ldr	r3, [pc, #60]	@ (80405a8 <HAL_MspInit+0x44>)
 804056c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 804056e:	4a0e      	ldr	r2, [pc, #56]	@ (80405a8 <HAL_MspInit+0x44>)
 8040570:	f043 0301 	orr.w	r3, r3, #1
 8040574:	6613      	str	r3, [r2, #96]	@ 0x60
 8040576:	4b0c      	ldr	r3, [pc, #48]	@ (80405a8 <HAL_MspInit+0x44>)
 8040578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 804057a:	f003 0301 	and.w	r3, r3, #1
 804057e:	607b      	str	r3, [r7, #4]
 8040580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040582:	4b09      	ldr	r3, [pc, #36]	@ (80405a8 <HAL_MspInit+0x44>)
 8040584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8040586:	4a08      	ldr	r2, [pc, #32]	@ (80405a8 <HAL_MspInit+0x44>)
 8040588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804058c:	6593      	str	r3, [r2, #88]	@ 0x58
 804058e:	4b06      	ldr	r3, [pc, #24]	@ (80405a8 <HAL_MspInit+0x44>)
 8040590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8040592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8040596:	603b      	str	r3, [r7, #0]
 8040598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804059a:	bf00      	nop
 804059c:	370c      	adds	r7, #12
 804059e:	46bd      	mov	sp, r7
 80405a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405a4:	4770      	bx	lr
 80405a6:	bf00      	nop
 80405a8:	40021000 	.word	0x40021000

080405ac <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80405ac:	b480      	push	{r7}
 80405ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80405b0:	bf00      	nop
 80405b2:	e7fd      	b.n	80405b0 <MemManage_Handler+0x4>

080405b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80405b4:	b480      	push	{r7}
 80405b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80405b8:	bf00      	nop
 80405ba:	e7fd      	b.n	80405b8 <UsageFault_Handler+0x4>

080405bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80405bc:	b480      	push	{r7}
 80405be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80405c0:	bf00      	nop
 80405c2:	46bd      	mov	sp, r7
 80405c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405c8:	4770      	bx	lr

080405ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80405ca:	b480      	push	{r7}
 80405cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80405ce:	bf00      	nop
 80405d0:	46bd      	mov	sp, r7
 80405d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405d6:	4770      	bx	lr

080405d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80405d8:	b580      	push	{r7, lr}
 80405da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80405dc:	f000 f896 	bl	804070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80405e0:	bf00      	nop
 80405e2:	bd80      	pop	{r7, pc}

080405e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80405e4:	b480      	push	{r7}
 80405e6:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 80405e8:	bf00      	nop
 80405ea:	46bd      	mov	sp, r7
 80405ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405f0:	4770      	bx	lr
	...

080405f4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80405f4:	b580      	push	{r7, lr}
 80405f6:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 80405f8:	f000 fb86 	bl	8040d08 <__SECURE_SystemCoreClockUpdate_veneer>
 80405fc:	4603      	mov	r3, r0
 80405fe:	4a02      	ldr	r2, [pc, #8]	@ (8040608 <SystemCoreClockUpdate+0x14>)
 8040600:	6013      	str	r3, [r2, #0]
}
 8040602:	bf00      	nop
 8040604:	bd80      	pop	{r7, pc}
 8040606:	bf00      	nop
 8040608:	20018000 	.word	0x20018000

0804060c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 804060c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8040644 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040610:	f7ff ffe8 	bl	80405e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040614:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040616:	e003      	b.n	8040620 <LoopCopyDataInit>

08040618 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040618:	4b0b      	ldr	r3, [pc, #44]	@ (8040648 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 804061a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 804061c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 804061e:	3104      	adds	r1, #4

08040620 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8040620:	480a      	ldr	r0, [pc, #40]	@ (804064c <LoopForever+0xa>)
	ldr	r3, =_edata
 8040622:	4b0b      	ldr	r3, [pc, #44]	@ (8040650 <LoopForever+0xe>)
	adds	r2, r0, r1
 8040624:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040626:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040628:	d3f6      	bcc.n	8040618 <CopyDataInit>
	ldr	r2, =_sbss
 804062a:	4a0a      	ldr	r2, [pc, #40]	@ (8040654 <LoopForever+0x12>)
	b	LoopFillZerobss
 804062c:	e002      	b.n	8040634 <LoopFillZerobss>

0804062e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 804062e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8040630:	f842 3b04 	str.w	r3, [r2], #4

08040634 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040634:	4b08      	ldr	r3, [pc, #32]	@ (8040658 <LoopForever+0x16>)
	cmp	r2, r3
 8040636:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040638:	d3f9      	bcc.n	804062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 804063a:	f000 fb27 	bl	8040c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 804063e:	f7ff ff6f 	bl	8040520 <main>

08040642 <LoopForever>:

LoopForever:
    b LoopForever
 8040642:	e7fe      	b.n	8040642 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040644:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8040648:	08040d28 	.word	0x08040d28
	ldr	r0, =_sdata
 804064c:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 8040650:	2001800c 	.word	0x2001800c
	ldr	r2, =_sbss
 8040654:	2001800c 	.word	0x2001800c
	ldr	r3, = _ebss
 8040658:	2001803c 	.word	0x2001803c

0804065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 804065c:	e7fe      	b.n	804065c <ADC1_2_IRQHandler>

0804065e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804065e:	b580      	push	{r7, lr}
 8040660:	b082      	sub	sp, #8
 8040662:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040664:	2300      	movs	r3, #0
 8040666:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040668:	2004      	movs	r0, #4
 804066a:	f000 f945 	bl	80408f8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 804066e:	f7ff ffc1 	bl	80405f4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040672:	2007      	movs	r0, #7
 8040674:	f000 f80e 	bl	8040694 <HAL_InitTick>
 8040678:	4603      	mov	r3, r0
 804067a:	2b00      	cmp	r3, #0
 804067c:	d002      	beq.n	8040684 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 804067e:	2301      	movs	r3, #1
 8040680:	71fb      	strb	r3, [r7, #7]
 8040682:	e001      	b.n	8040688 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040684:	f7ff ff6e 	bl	8040564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040688:	79fb      	ldrb	r3, [r7, #7]
}
 804068a:	4618      	mov	r0, r3
 804068c:	3708      	adds	r7, #8
 804068e:	46bd      	mov	sp, r7
 8040690:	bd80      	pop	{r7, pc}
	...

08040694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040694:	b580      	push	{r7, lr}
 8040696:	b084      	sub	sp, #16
 8040698:	af00      	add	r7, sp, #0
 804069a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 804069c:	2300      	movs	r3, #0
 804069e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80406a0:	4b17      	ldr	r3, [pc, #92]	@ (8040700 <HAL_InitTick+0x6c>)
 80406a2:	781b      	ldrb	r3, [r3, #0]
 80406a4:	2b00      	cmp	r3, #0
 80406a6:	d023      	beq.n	80406f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80406a8:	4b16      	ldr	r3, [pc, #88]	@ (8040704 <HAL_InitTick+0x70>)
 80406aa:	681a      	ldr	r2, [r3, #0]
 80406ac:	4b14      	ldr	r3, [pc, #80]	@ (8040700 <HAL_InitTick+0x6c>)
 80406ae:	781b      	ldrb	r3, [r3, #0]
 80406b0:	4619      	mov	r1, r3
 80406b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80406b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80406ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80406be:	4618      	mov	r0, r3
 80406c0:	f000 f93f 	bl	8040942 <HAL_SYSTICK_Config>
 80406c4:	4603      	mov	r3, r0
 80406c6:	2b00      	cmp	r3, #0
 80406c8:	d10f      	bne.n	80406ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80406ca:	687b      	ldr	r3, [r7, #4]
 80406cc:	2b07      	cmp	r3, #7
 80406ce:	d809      	bhi.n	80406e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80406d0:	2200      	movs	r2, #0
 80406d2:	6879      	ldr	r1, [r7, #4]
 80406d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80406d8:	f000 f919 	bl	804090e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80406dc:	4a0a      	ldr	r2, [pc, #40]	@ (8040708 <HAL_InitTick+0x74>)
 80406de:	687b      	ldr	r3, [r7, #4]
 80406e0:	6013      	str	r3, [r2, #0]
 80406e2:	e007      	b.n	80406f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80406e4:	2301      	movs	r3, #1
 80406e6:	73fb      	strb	r3, [r7, #15]
 80406e8:	e004      	b.n	80406f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80406ea:	2301      	movs	r3, #1
 80406ec:	73fb      	strb	r3, [r7, #15]
 80406ee:	e001      	b.n	80406f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80406f0:	2301      	movs	r3, #1
 80406f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80406f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80406f6:	4618      	mov	r0, r3
 80406f8:	3710      	adds	r7, #16
 80406fa:	46bd      	mov	sp, r7
 80406fc:	bd80      	pop	{r7, pc}
 80406fe:	bf00      	nop
 8040700:	20018008 	.word	0x20018008
 8040704:	20018000 	.word	0x20018000
 8040708:	20018004 	.word	0x20018004

0804070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 804070c:	b480      	push	{r7}
 804070e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040710:	4b06      	ldr	r3, [pc, #24]	@ (804072c <HAL_IncTick+0x20>)
 8040712:	781b      	ldrb	r3, [r3, #0]
 8040714:	461a      	mov	r2, r3
 8040716:	4b06      	ldr	r3, [pc, #24]	@ (8040730 <HAL_IncTick+0x24>)
 8040718:	681b      	ldr	r3, [r3, #0]
 804071a:	4413      	add	r3, r2
 804071c:	4a04      	ldr	r2, [pc, #16]	@ (8040730 <HAL_IncTick+0x24>)
 804071e:	6013      	str	r3, [r2, #0]
}
 8040720:	bf00      	nop
 8040722:	46bd      	mov	sp, r7
 8040724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040728:	4770      	bx	lr
 804072a:	bf00      	nop
 804072c:	20018008 	.word	0x20018008
 8040730:	20018030 	.word	0x20018030

08040734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040734:	b480      	push	{r7}
 8040736:	af00      	add	r7, sp, #0
  return uwTick;
 8040738:	4b03      	ldr	r3, [pc, #12]	@ (8040748 <HAL_GetTick+0x14>)
 804073a:	681b      	ldr	r3, [r3, #0]
}
 804073c:	4618      	mov	r0, r3
 804073e:	46bd      	mov	sp, r7
 8040740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040744:	4770      	bx	lr
 8040746:	bf00      	nop
 8040748:	20018030 	.word	0x20018030

0804074c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 804074c:	b580      	push	{r7, lr}
 804074e:	b084      	sub	sp, #16
 8040750:	af00      	add	r7, sp, #0
 8040752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040754:	f7ff ffee 	bl	8040734 <HAL_GetTick>
 8040758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 804075a:	687b      	ldr	r3, [r7, #4]
 804075c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 804075e:	68fb      	ldr	r3, [r7, #12]
 8040760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8040764:	d005      	beq.n	8040772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8040766:	4b0a      	ldr	r3, [pc, #40]	@ (8040790 <HAL_Delay+0x44>)
 8040768:	781b      	ldrb	r3, [r3, #0]
 804076a:	461a      	mov	r2, r3
 804076c:	68fb      	ldr	r3, [r7, #12]
 804076e:	4413      	add	r3, r2
 8040770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040772:	bf00      	nop
 8040774:	f7ff ffde 	bl	8040734 <HAL_GetTick>
 8040778:	4602      	mov	r2, r0
 804077a:	68bb      	ldr	r3, [r7, #8]
 804077c:	1ad3      	subs	r3, r2, r3
 804077e:	68fa      	ldr	r2, [r7, #12]
 8040780:	429a      	cmp	r2, r3
 8040782:	d8f7      	bhi.n	8040774 <HAL_Delay+0x28>
  {
  }
}
 8040784:	bf00      	nop
 8040786:	bf00      	nop
 8040788:	3710      	adds	r7, #16
 804078a:	46bd      	mov	sp, r7
 804078c:	bd80      	pop	{r7, pc}
 804078e:	bf00      	nop
 8040790:	20018008 	.word	0x20018008

08040794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040794:	b480      	push	{r7}
 8040796:	b085      	sub	sp, #20
 8040798:	af00      	add	r7, sp, #0
 804079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 804079c:	687b      	ldr	r3, [r7, #4]
 804079e:	f003 0307 	and.w	r3, r3, #7
 80407a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80407a4:	4b0c      	ldr	r3, [pc, #48]	@ (80407d8 <__NVIC_SetPriorityGrouping+0x44>)
 80407a6:	68db      	ldr	r3, [r3, #12]
 80407a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80407aa:	68ba      	ldr	r2, [r7, #8]
 80407ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80407b0:	4013      	ands	r3, r2
 80407b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80407b4:	68fb      	ldr	r3, [r7, #12]
 80407b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80407b8:	68bb      	ldr	r3, [r7, #8]
 80407ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80407bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80407c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80407c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80407c6:	4a04      	ldr	r2, [pc, #16]	@ (80407d8 <__NVIC_SetPriorityGrouping+0x44>)
 80407c8:	68bb      	ldr	r3, [r7, #8]
 80407ca:	60d3      	str	r3, [r2, #12]
}
 80407cc:	bf00      	nop
 80407ce:	3714      	adds	r7, #20
 80407d0:	46bd      	mov	sp, r7
 80407d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407d6:	4770      	bx	lr
 80407d8:	e000ed00 	.word	0xe000ed00

080407dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80407dc:	b480      	push	{r7}
 80407de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80407e0:	4b04      	ldr	r3, [pc, #16]	@ (80407f4 <__NVIC_GetPriorityGrouping+0x18>)
 80407e2:	68db      	ldr	r3, [r3, #12]
 80407e4:	0a1b      	lsrs	r3, r3, #8
 80407e6:	f003 0307 	and.w	r3, r3, #7
}
 80407ea:	4618      	mov	r0, r3
 80407ec:	46bd      	mov	sp, r7
 80407ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407f2:	4770      	bx	lr
 80407f4:	e000ed00 	.word	0xe000ed00

080407f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80407f8:	b480      	push	{r7}
 80407fa:	b083      	sub	sp, #12
 80407fc:	af00      	add	r7, sp, #0
 80407fe:	4603      	mov	r3, r0
 8040800:	6039      	str	r1, [r7, #0]
 8040802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040808:	2b00      	cmp	r3, #0
 804080a:	db0a      	blt.n	8040822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804080c:	683b      	ldr	r3, [r7, #0]
 804080e:	b2da      	uxtb	r2, r3
 8040810:	490c      	ldr	r1, [pc, #48]	@ (8040844 <__NVIC_SetPriority+0x4c>)
 8040812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040816:	0152      	lsls	r2, r2, #5
 8040818:	b2d2      	uxtb	r2, r2
 804081a:	440b      	add	r3, r1
 804081c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040820:	e00a      	b.n	8040838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040822:	683b      	ldr	r3, [r7, #0]
 8040824:	b2da      	uxtb	r2, r3
 8040826:	4908      	ldr	r1, [pc, #32]	@ (8040848 <__NVIC_SetPriority+0x50>)
 8040828:	79fb      	ldrb	r3, [r7, #7]
 804082a:	f003 030f 	and.w	r3, r3, #15
 804082e:	3b04      	subs	r3, #4
 8040830:	0152      	lsls	r2, r2, #5
 8040832:	b2d2      	uxtb	r2, r2
 8040834:	440b      	add	r3, r1
 8040836:	761a      	strb	r2, [r3, #24]
}
 8040838:	bf00      	nop
 804083a:	370c      	adds	r7, #12
 804083c:	46bd      	mov	sp, r7
 804083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040842:	4770      	bx	lr
 8040844:	e000e100 	.word	0xe000e100
 8040848:	e000ed00 	.word	0xe000ed00

0804084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804084c:	b480      	push	{r7}
 804084e:	b089      	sub	sp, #36	@ 0x24
 8040850:	af00      	add	r7, sp, #0
 8040852:	60f8      	str	r0, [r7, #12]
 8040854:	60b9      	str	r1, [r7, #8]
 8040856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040858:	68fb      	ldr	r3, [r7, #12]
 804085a:	f003 0307 	and.w	r3, r3, #7
 804085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040860:	69fb      	ldr	r3, [r7, #28]
 8040862:	f1c3 0307 	rsb	r3, r3, #7
 8040866:	2b03      	cmp	r3, #3
 8040868:	bf28      	it	cs
 804086a:	2303      	movcs	r3, #3
 804086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804086e:	69fb      	ldr	r3, [r7, #28]
 8040870:	3303      	adds	r3, #3
 8040872:	2b06      	cmp	r3, #6
 8040874:	d902      	bls.n	804087c <NVIC_EncodePriority+0x30>
 8040876:	69fb      	ldr	r3, [r7, #28]
 8040878:	3b04      	subs	r3, #4
 804087a:	e000      	b.n	804087e <NVIC_EncodePriority+0x32>
 804087c:	2300      	movs	r3, #0
 804087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8040884:	69bb      	ldr	r3, [r7, #24]
 8040886:	fa02 f303 	lsl.w	r3, r2, r3
 804088a:	43da      	mvns	r2, r3
 804088c:	68bb      	ldr	r3, [r7, #8]
 804088e:	401a      	ands	r2, r3
 8040890:	697b      	ldr	r3, [r7, #20]
 8040892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040894:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8040898:	697b      	ldr	r3, [r7, #20]
 804089a:	fa01 f303 	lsl.w	r3, r1, r3
 804089e:	43d9      	mvns	r1, r3
 80408a0:	687b      	ldr	r3, [r7, #4]
 80408a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80408a4:	4313      	orrs	r3, r2
         );
}
 80408a6:	4618      	mov	r0, r3
 80408a8:	3724      	adds	r7, #36	@ 0x24
 80408aa:	46bd      	mov	sp, r7
 80408ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408b0:	4770      	bx	lr
	...

080408b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80408b4:	b580      	push	{r7, lr}
 80408b6:	b082      	sub	sp, #8
 80408b8:	af00      	add	r7, sp, #0
 80408ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80408bc:	687b      	ldr	r3, [r7, #4]
 80408be:	3b01      	subs	r3, #1
 80408c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80408c4:	d301      	bcc.n	80408ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80408c6:	2301      	movs	r3, #1
 80408c8:	e00f      	b.n	80408ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80408ca:	4a0a      	ldr	r2, [pc, #40]	@ (80408f4 <SysTick_Config+0x40>)
 80408cc:	687b      	ldr	r3, [r7, #4]
 80408ce:	3b01      	subs	r3, #1
 80408d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80408d2:	2107      	movs	r1, #7
 80408d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80408d8:	f7ff ff8e 	bl	80407f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80408dc:	4b05      	ldr	r3, [pc, #20]	@ (80408f4 <SysTick_Config+0x40>)
 80408de:	2200      	movs	r2, #0
 80408e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80408e2:	4b04      	ldr	r3, [pc, #16]	@ (80408f4 <SysTick_Config+0x40>)
 80408e4:	2207      	movs	r2, #7
 80408e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80408e8:	2300      	movs	r3, #0
}
 80408ea:	4618      	mov	r0, r3
 80408ec:	3708      	adds	r7, #8
 80408ee:	46bd      	mov	sp, r7
 80408f0:	bd80      	pop	{r7, pc}
 80408f2:	bf00      	nop
 80408f4:	e000e010 	.word	0xe000e010

080408f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80408f8:	b580      	push	{r7, lr}
 80408fa:	b082      	sub	sp, #8
 80408fc:	af00      	add	r7, sp, #0
 80408fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040900:	6878      	ldr	r0, [r7, #4]
 8040902:	f7ff ff47 	bl	8040794 <__NVIC_SetPriorityGrouping>
}
 8040906:	bf00      	nop
 8040908:	3708      	adds	r7, #8
 804090a:	46bd      	mov	sp, r7
 804090c:	bd80      	pop	{r7, pc}

0804090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804090e:	b580      	push	{r7, lr}
 8040910:	b086      	sub	sp, #24
 8040912:	af00      	add	r7, sp, #0
 8040914:	4603      	mov	r3, r0
 8040916:	60b9      	str	r1, [r7, #8]
 8040918:	607a      	str	r2, [r7, #4]
 804091a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 804091c:	f7ff ff5e 	bl	80407dc <__NVIC_GetPriorityGrouping>
 8040920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040922:	687a      	ldr	r2, [r7, #4]
 8040924:	68b9      	ldr	r1, [r7, #8]
 8040926:	6978      	ldr	r0, [r7, #20]
 8040928:	f7ff ff90 	bl	804084c <NVIC_EncodePriority>
 804092c:	4602      	mov	r2, r0
 804092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040932:	4611      	mov	r1, r2
 8040934:	4618      	mov	r0, r3
 8040936:	f7ff ff5f 	bl	80407f8 <__NVIC_SetPriority>
}
 804093a:	bf00      	nop
 804093c:	3718      	adds	r7, #24
 804093e:	46bd      	mov	sp, r7
 8040940:	bd80      	pop	{r7, pc}

08040942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040942:	b580      	push	{r7, lr}
 8040944:	b082      	sub	sp, #8
 8040946:	af00      	add	r7, sp, #0
 8040948:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 804094a:	6878      	ldr	r0, [r7, #4]
 804094c:	f7ff ffb2 	bl	80408b4 <SysTick_Config>
 8040950:	4603      	mov	r3, r0
}
 8040952:	4618      	mov	r0, r3
 8040954:	3708      	adds	r7, #8
 8040956:	46bd      	mov	sp, r7
 8040958:	bd80      	pop	{r7, pc}
	...

0804095c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 804095c:	b480      	push	{r7}
 804095e:	b087      	sub	sp, #28
 8040960:	af00      	add	r7, sp, #0
 8040962:	6078      	str	r0, [r7, #4]
 8040964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8040966:	2300      	movs	r3, #0
 8040968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 804096a:	e158      	b.n	8040c1e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 804096c:	683b      	ldr	r3, [r7, #0]
 804096e:	681a      	ldr	r2, [r3, #0]
 8040970:	2101      	movs	r1, #1
 8040972:	697b      	ldr	r3, [r7, #20]
 8040974:	fa01 f303 	lsl.w	r3, r1, r3
 8040978:	4013      	ands	r3, r2
 804097a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 804097c:	68fb      	ldr	r3, [r7, #12]
 804097e:	2b00      	cmp	r3, #0
 8040980:	f000 814a 	beq.w	8040c18 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040984:	683b      	ldr	r3, [r7, #0]
 8040986:	685b      	ldr	r3, [r3, #4]
 8040988:	2b01      	cmp	r3, #1
 804098a:	d00b      	beq.n	80409a4 <HAL_GPIO_Init+0x48>
 804098c:	683b      	ldr	r3, [r7, #0]
 804098e:	685b      	ldr	r3, [r3, #4]
 8040990:	2b02      	cmp	r3, #2
 8040992:	d007      	beq.n	80409a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040994:	683b      	ldr	r3, [r7, #0]
 8040996:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040998:	2b11      	cmp	r3, #17
 804099a:	d003      	beq.n	80409a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804099c:	683b      	ldr	r3, [r7, #0]
 804099e:	685b      	ldr	r3, [r3, #4]
 80409a0:	2b12      	cmp	r3, #18
 80409a2:	d130      	bne.n	8040a06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80409a4:	687b      	ldr	r3, [r7, #4]
 80409a6:	689b      	ldr	r3, [r3, #8]
 80409a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80409aa:	697b      	ldr	r3, [r7, #20]
 80409ac:	005b      	lsls	r3, r3, #1
 80409ae:	2203      	movs	r2, #3
 80409b0:	fa02 f303 	lsl.w	r3, r2, r3
 80409b4:	43db      	mvns	r3, r3
 80409b6:	693a      	ldr	r2, [r7, #16]
 80409b8:	4013      	ands	r3, r2
 80409ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80409bc:	683b      	ldr	r3, [r7, #0]
 80409be:	68da      	ldr	r2, [r3, #12]
 80409c0:	697b      	ldr	r3, [r7, #20]
 80409c2:	005b      	lsls	r3, r3, #1
 80409c4:	fa02 f303 	lsl.w	r3, r2, r3
 80409c8:	693a      	ldr	r2, [r7, #16]
 80409ca:	4313      	orrs	r3, r2
 80409cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80409ce:	687b      	ldr	r3, [r7, #4]
 80409d0:	693a      	ldr	r2, [r7, #16]
 80409d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80409d4:	687b      	ldr	r3, [r7, #4]
 80409d6:	685b      	ldr	r3, [r3, #4]
 80409d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80409da:	2201      	movs	r2, #1
 80409dc:	697b      	ldr	r3, [r7, #20]
 80409de:	fa02 f303 	lsl.w	r3, r2, r3
 80409e2:	43db      	mvns	r3, r3
 80409e4:	693a      	ldr	r2, [r7, #16]
 80409e6:	4013      	ands	r3, r2
 80409e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80409ea:	683b      	ldr	r3, [r7, #0]
 80409ec:	685b      	ldr	r3, [r3, #4]
 80409ee:	091b      	lsrs	r3, r3, #4
 80409f0:	f003 0201 	and.w	r2, r3, #1
 80409f4:	697b      	ldr	r3, [r7, #20]
 80409f6:	fa02 f303 	lsl.w	r3, r2, r3
 80409fa:	693a      	ldr	r2, [r7, #16]
 80409fc:	4313      	orrs	r3, r2
 80409fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040a00:	687b      	ldr	r3, [r7, #4]
 8040a02:	693a      	ldr	r2, [r7, #16]
 8040a04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8040a06:	687b      	ldr	r3, [r7, #4]
 8040a08:	68db      	ldr	r3, [r3, #12]
 8040a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8040a0c:	697b      	ldr	r3, [r7, #20]
 8040a0e:	005b      	lsls	r3, r3, #1
 8040a10:	2203      	movs	r2, #3
 8040a12:	fa02 f303 	lsl.w	r3, r2, r3
 8040a16:	43db      	mvns	r3, r3
 8040a18:	693a      	ldr	r2, [r7, #16]
 8040a1a:	4013      	ands	r3, r2
 8040a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040a1e:	683b      	ldr	r3, [r7, #0]
 8040a20:	689a      	ldr	r2, [r3, #8]
 8040a22:	697b      	ldr	r3, [r7, #20]
 8040a24:	005b      	lsls	r3, r3, #1
 8040a26:	fa02 f303 	lsl.w	r3, r2, r3
 8040a2a:	693a      	ldr	r2, [r7, #16]
 8040a2c:	4313      	orrs	r3, r2
 8040a2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8040a30:	687b      	ldr	r3, [r7, #4]
 8040a32:	693a      	ldr	r2, [r7, #16]
 8040a34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040a36:	683b      	ldr	r3, [r7, #0]
 8040a38:	685b      	ldr	r3, [r3, #4]
 8040a3a:	2b02      	cmp	r3, #2
 8040a3c:	d003      	beq.n	8040a46 <HAL_GPIO_Init+0xea>
 8040a3e:	683b      	ldr	r3, [r7, #0]
 8040a40:	685b      	ldr	r3, [r3, #4]
 8040a42:	2b12      	cmp	r3, #18
 8040a44:	d123      	bne.n	8040a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040a46:	697b      	ldr	r3, [r7, #20]
 8040a48:	08da      	lsrs	r2, r3, #3
 8040a4a:	687b      	ldr	r3, [r7, #4]
 8040a4c:	3208      	adds	r2, #8
 8040a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8040a54:	697b      	ldr	r3, [r7, #20]
 8040a56:	f003 0307 	and.w	r3, r3, #7
 8040a5a:	009b      	lsls	r3, r3, #2
 8040a5c:	220f      	movs	r2, #15
 8040a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8040a62:	43db      	mvns	r3, r3
 8040a64:	693a      	ldr	r2, [r7, #16]
 8040a66:	4013      	ands	r3, r2
 8040a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8040a6a:	683b      	ldr	r3, [r7, #0]
 8040a6c:	691a      	ldr	r2, [r3, #16]
 8040a6e:	697b      	ldr	r3, [r7, #20]
 8040a70:	f003 0307 	and.w	r3, r3, #7
 8040a74:	009b      	lsls	r3, r3, #2
 8040a76:	fa02 f303 	lsl.w	r3, r2, r3
 8040a7a:	693a      	ldr	r2, [r7, #16]
 8040a7c:	4313      	orrs	r3, r2
 8040a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8040a80:	697b      	ldr	r3, [r7, #20]
 8040a82:	08da      	lsrs	r2, r3, #3
 8040a84:	687b      	ldr	r3, [r7, #4]
 8040a86:	3208      	adds	r2, #8
 8040a88:	6939      	ldr	r1, [r7, #16]
 8040a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040a8e:	687b      	ldr	r3, [r7, #4]
 8040a90:	681b      	ldr	r3, [r3, #0]
 8040a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8040a94:	697b      	ldr	r3, [r7, #20]
 8040a96:	005b      	lsls	r3, r3, #1
 8040a98:	2203      	movs	r2, #3
 8040a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8040a9e:	43db      	mvns	r3, r3
 8040aa0:	693a      	ldr	r2, [r7, #16]
 8040aa2:	4013      	ands	r3, r2
 8040aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040aa6:	683b      	ldr	r3, [r7, #0]
 8040aa8:	685b      	ldr	r3, [r3, #4]
 8040aaa:	f003 0203 	and.w	r2, r3, #3
 8040aae:	697b      	ldr	r3, [r7, #20]
 8040ab0:	005b      	lsls	r3, r3, #1
 8040ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8040ab6:	693a      	ldr	r2, [r7, #16]
 8040ab8:	4313      	orrs	r3, r2
 8040aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040abc:	687b      	ldr	r3, [r7, #4]
 8040abe:	693a      	ldr	r2, [r7, #16]
 8040ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8040ac2:	683b      	ldr	r3, [r7, #0]
 8040ac4:	685b      	ldr	r3, [r3, #4]
 8040ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8040aca:	2b00      	cmp	r3, #0
 8040acc:	f000 80a4 	beq.w	8040c18 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040ad2:	697b      	ldr	r3, [r7, #20]
 8040ad4:	089b      	lsrs	r3, r3, #2
 8040ad6:	3318      	adds	r3, #24
 8040ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040adc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8040ade:	697b      	ldr	r3, [r7, #20]
 8040ae0:	f003 0303 	and.w	r3, r3, #3
 8040ae4:	00db      	lsls	r3, r3, #3
 8040ae6:	220f      	movs	r2, #15
 8040ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8040aec:	43db      	mvns	r3, r3
 8040aee:	693a      	ldr	r2, [r7, #16]
 8040af0:	4013      	ands	r3, r2
 8040af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040af4:	687b      	ldr	r3, [r7, #4]
 8040af6:	4a52      	ldr	r2, [pc, #328]	@ (8040c40 <HAL_GPIO_Init+0x2e4>)
 8040af8:	4293      	cmp	r3, r2
 8040afa:	d025      	beq.n	8040b48 <HAL_GPIO_Init+0x1ec>
 8040afc:	687b      	ldr	r3, [r7, #4]
 8040afe:	4a51      	ldr	r2, [pc, #324]	@ (8040c44 <HAL_GPIO_Init+0x2e8>)
 8040b00:	4293      	cmp	r3, r2
 8040b02:	d01f      	beq.n	8040b44 <HAL_GPIO_Init+0x1e8>
 8040b04:	687b      	ldr	r3, [r7, #4]
 8040b06:	4a50      	ldr	r2, [pc, #320]	@ (8040c48 <HAL_GPIO_Init+0x2ec>)
 8040b08:	4293      	cmp	r3, r2
 8040b0a:	d019      	beq.n	8040b40 <HAL_GPIO_Init+0x1e4>
 8040b0c:	687b      	ldr	r3, [r7, #4]
 8040b0e:	4a4f      	ldr	r2, [pc, #316]	@ (8040c4c <HAL_GPIO_Init+0x2f0>)
 8040b10:	4293      	cmp	r3, r2
 8040b12:	d013      	beq.n	8040b3c <HAL_GPIO_Init+0x1e0>
 8040b14:	687b      	ldr	r3, [r7, #4]
 8040b16:	4a4e      	ldr	r2, [pc, #312]	@ (8040c50 <HAL_GPIO_Init+0x2f4>)
 8040b18:	4293      	cmp	r3, r2
 8040b1a:	d00d      	beq.n	8040b38 <HAL_GPIO_Init+0x1dc>
 8040b1c:	687b      	ldr	r3, [r7, #4]
 8040b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8040c54 <HAL_GPIO_Init+0x2f8>)
 8040b20:	4293      	cmp	r3, r2
 8040b22:	d007      	beq.n	8040b34 <HAL_GPIO_Init+0x1d8>
 8040b24:	687b      	ldr	r3, [r7, #4]
 8040b26:	4a4c      	ldr	r2, [pc, #304]	@ (8040c58 <HAL_GPIO_Init+0x2fc>)
 8040b28:	4293      	cmp	r3, r2
 8040b2a:	d101      	bne.n	8040b30 <HAL_GPIO_Init+0x1d4>
 8040b2c:	2306      	movs	r3, #6
 8040b2e:	e00c      	b.n	8040b4a <HAL_GPIO_Init+0x1ee>
 8040b30:	2307      	movs	r3, #7
 8040b32:	e00a      	b.n	8040b4a <HAL_GPIO_Init+0x1ee>
 8040b34:	2305      	movs	r3, #5
 8040b36:	e008      	b.n	8040b4a <HAL_GPIO_Init+0x1ee>
 8040b38:	2304      	movs	r3, #4
 8040b3a:	e006      	b.n	8040b4a <HAL_GPIO_Init+0x1ee>
 8040b3c:	2303      	movs	r3, #3
 8040b3e:	e004      	b.n	8040b4a <HAL_GPIO_Init+0x1ee>
 8040b40:	2302      	movs	r3, #2
 8040b42:	e002      	b.n	8040b4a <HAL_GPIO_Init+0x1ee>
 8040b44:	2301      	movs	r3, #1
 8040b46:	e000      	b.n	8040b4a <HAL_GPIO_Init+0x1ee>
 8040b48:	2300      	movs	r3, #0
 8040b4a:	697a      	ldr	r2, [r7, #20]
 8040b4c:	f002 0203 	and.w	r2, r2, #3
 8040b50:	00d2      	lsls	r2, r2, #3
 8040b52:	4093      	lsls	r3, r2
 8040b54:	693a      	ldr	r2, [r7, #16]
 8040b56:	4313      	orrs	r3, r2
 8040b58:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8040b5a:	4938      	ldr	r1, [pc, #224]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040b5c:	697b      	ldr	r3, [r7, #20]
 8040b5e:	089b      	lsrs	r3, r3, #2
 8040b60:	3318      	adds	r3, #24
 8040b62:	693a      	ldr	r2, [r7, #16]
 8040b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8040b68:	4b34      	ldr	r3, [pc, #208]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8040b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b70:	68fb      	ldr	r3, [r7, #12]
 8040b72:	43db      	mvns	r3, r3
 8040b74:	693a      	ldr	r2, [r7, #16]
 8040b76:	4013      	ands	r3, r2
 8040b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8040b7a:	683b      	ldr	r3, [r7, #0]
 8040b7c:	685b      	ldr	r3, [r3, #4]
 8040b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8040b82:	2b00      	cmp	r3, #0
 8040b84:	d003      	beq.n	8040b8e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8040b86:	693a      	ldr	r2, [r7, #16]
 8040b88:	68fb      	ldr	r3, [r7, #12]
 8040b8a:	4313      	orrs	r3, r2
 8040b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8040b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040b90:	693b      	ldr	r3, [r7, #16]
 8040b92:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8040b96:	4b29      	ldr	r3, [pc, #164]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8040b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b9e:	68fb      	ldr	r3, [r7, #12]
 8040ba0:	43db      	mvns	r3, r3
 8040ba2:	693a      	ldr	r2, [r7, #16]
 8040ba4:	4013      	ands	r3, r2
 8040ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8040ba8:	683b      	ldr	r3, [r7, #0]
 8040baa:	685b      	ldr	r3, [r3, #4]
 8040bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8040bb0:	2b00      	cmp	r3, #0
 8040bb2:	d003      	beq.n	8040bbc <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8040bb4:	693a      	ldr	r2, [r7, #16]
 8040bb6:	68fb      	ldr	r3, [r7, #12]
 8040bb8:	4313      	orrs	r3, r2
 8040bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8040bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040bbe:	693b      	ldr	r3, [r7, #16]
 8040bc0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8040bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040bc6:	681b      	ldr	r3, [r3, #0]
 8040bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040bca:	68fb      	ldr	r3, [r7, #12]
 8040bcc:	43db      	mvns	r3, r3
 8040bce:	693a      	ldr	r2, [r7, #16]
 8040bd0:	4013      	ands	r3, r2
 8040bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8040bd4:	683b      	ldr	r3, [r7, #0]
 8040bd6:	685b      	ldr	r3, [r3, #4]
 8040bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8040bdc:	2b00      	cmp	r3, #0
 8040bde:	d003      	beq.n	8040be8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8040be0:	693a      	ldr	r2, [r7, #16]
 8040be2:	68fb      	ldr	r3, [r7, #12]
 8040be4:	4313      	orrs	r3, r2
 8040be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8040be8:	4a14      	ldr	r2, [pc, #80]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040bea:	693b      	ldr	r3, [r7, #16]
 8040bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8040bee:	4b13      	ldr	r3, [pc, #76]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040bf0:	685b      	ldr	r3, [r3, #4]
 8040bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040bf4:	68fb      	ldr	r3, [r7, #12]
 8040bf6:	43db      	mvns	r3, r3
 8040bf8:	693a      	ldr	r2, [r7, #16]
 8040bfa:	4013      	ands	r3, r2
 8040bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8040bfe:	683b      	ldr	r3, [r7, #0]
 8040c00:	685b      	ldr	r3, [r3, #4]
 8040c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8040c06:	2b00      	cmp	r3, #0
 8040c08:	d003      	beq.n	8040c12 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8040c0a:	693a      	ldr	r2, [r7, #16]
 8040c0c:	68fb      	ldr	r3, [r7, #12]
 8040c0e:	4313      	orrs	r3, r2
 8040c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8040c12:	4a0a      	ldr	r2, [pc, #40]	@ (8040c3c <HAL_GPIO_Init+0x2e0>)
 8040c14:	693b      	ldr	r3, [r7, #16]
 8040c16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8040c18:	697b      	ldr	r3, [r7, #20]
 8040c1a:	3301      	adds	r3, #1
 8040c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040c1e:	683b      	ldr	r3, [r7, #0]
 8040c20:	681a      	ldr	r2, [r3, #0]
 8040c22:	697b      	ldr	r3, [r7, #20]
 8040c24:	fa22 f303 	lsr.w	r3, r2, r3
 8040c28:	2b00      	cmp	r3, #0
 8040c2a:	f47f ae9f 	bne.w	804096c <HAL_GPIO_Init+0x10>
  }
}
 8040c2e:	bf00      	nop
 8040c30:	bf00      	nop
 8040c32:	371c      	adds	r7, #28
 8040c34:	46bd      	mov	sp, r7
 8040c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c3a:	4770      	bx	lr
 8040c3c:	4002f400 	.word	0x4002f400
 8040c40:	42020000 	.word	0x42020000
 8040c44:	42020400 	.word	0x42020400
 8040c48:	42020800 	.word	0x42020800
 8040c4c:	42020c00 	.word	0x42020c00
 8040c50:	42021000 	.word	0x42021000
 8040c54:	42021400 	.word	0x42021400
 8040c58:	42021800 	.word	0x42021800

08040c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040c5c:	b480      	push	{r7}
 8040c5e:	b083      	sub	sp, #12
 8040c60:	af00      	add	r7, sp, #0
 8040c62:	6078      	str	r0, [r7, #4]
 8040c64:	460b      	mov	r3, r1
 8040c66:	807b      	strh	r3, [r7, #2]
 8040c68:	4613      	mov	r3, r2
 8040c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040c6c:	787b      	ldrb	r3, [r7, #1]
 8040c6e:	2b00      	cmp	r3, #0
 8040c70:	d003      	beq.n	8040c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040c72:	887a      	ldrh	r2, [r7, #2]
 8040c74:	687b      	ldr	r3, [r7, #4]
 8040c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040c78:	e002      	b.n	8040c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040c7a:	887a      	ldrh	r2, [r7, #2]
 8040c7c:	687b      	ldr	r3, [r7, #4]
 8040c7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8040c80:	bf00      	nop
 8040c82:	370c      	adds	r7, #12
 8040c84:	46bd      	mov	sp, r7
 8040c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c8a:	4770      	bx	lr

08040c8c <__libc_init_array>:
 8040c8c:	b570      	push	{r4, r5, r6, lr}
 8040c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8040cc4 <__libc_init_array+0x38>)
 8040c90:	2600      	movs	r6, #0
 8040c92:	4c0d      	ldr	r4, [pc, #52]	@ (8040cc8 <__libc_init_array+0x3c>)
 8040c94:	1b64      	subs	r4, r4, r5
 8040c96:	10a4      	asrs	r4, r4, #2
 8040c98:	42a6      	cmp	r6, r4
 8040c9a:	d109      	bne.n	8040cb0 <__libc_init_array+0x24>
 8040c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8040ccc <__libc_init_array+0x40>)
 8040c9e:	2600      	movs	r6, #0
 8040ca0:	4c0b      	ldr	r4, [pc, #44]	@ (8040cd0 <__libc_init_array+0x44>)
 8040ca2:	f000 f817 	bl	8040cd4 <_init>
 8040ca6:	1b64      	subs	r4, r4, r5
 8040ca8:	10a4      	asrs	r4, r4, #2
 8040caa:	42a6      	cmp	r6, r4
 8040cac:	d105      	bne.n	8040cba <__libc_init_array+0x2e>
 8040cae:	bd70      	pop	{r4, r5, r6, pc}
 8040cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8040cb4:	3601      	adds	r6, #1
 8040cb6:	4798      	blx	r3
 8040cb8:	e7ee      	b.n	8040c98 <__libc_init_array+0xc>
 8040cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8040cbe:	3601      	adds	r6, #1
 8040cc0:	4798      	blx	r3
 8040cc2:	e7f2      	b.n	8040caa <__libc_init_array+0x1e>
 8040cc4:	08040d20 	.word	0x08040d20
 8040cc8:	08040d20 	.word	0x08040d20
 8040ccc:	08040d20 	.word	0x08040d20
 8040cd0:	08040d24 	.word	0x08040d24

08040cd4 <_init>:
 8040cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8040cd6:	bf00      	nop
 8040cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8040cda:	bc08      	pop	{r3}
 8040cdc:	469e      	mov	lr, r3
 8040cde:	4770      	bx	lr

08040ce0 <_fini>:
 8040ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8040ce2:	bf00      	nop
 8040ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8040ce6:	bc08      	pop	{r3}
 8040ce8:	469e      	mov	lr, r3
 8040cea:	4770      	bx	lr
 8040cec:	0000      	movs	r0, r0
	...

08040cf0 <__SECURE_log_cond_br_veneer>:
 8040cf0:	f85f f000 	ldr.w	pc, [pc]	@ 8040cf4 <__SECURE_log_cond_br_veneer+0x4>
 8040cf4:	0c03e009 	.word	0x0c03e009

08040cf8 <__SECURE_run_attestation_wait_mode_veneer>:
 8040cf8:	f85f f000 	ldr.w	pc, [pc]	@ 8040cfc <__SECURE_run_attestation_wait_mode_veneer+0x4>
 8040cfc:	0c03e049 	.word	0x0c03e049

08040d00 <__SECURE_log_call_veneer>:
 8040d00:	f85f f000 	ldr.w	pc, [pc]	@ 8040d04 <__SECURE_log_call_veneer+0x4>
 8040d04:	0c03e019 	.word	0x0c03e019

08040d08 <__SECURE_SystemCoreClockUpdate_veneer>:
 8040d08:	f85f f000 	ldr.w	pc, [pc]	@ 8040d0c <__SECURE_SystemCoreClockUpdate_veneer+0x4>
 8040d0c:	0c03e001 	.word	0x0c03e001

08040d10 <__SECURE_RegisterCallback_veneer>:
 8040d10:	f85f f000 	ldr.w	pc, [pc]	@ 8040d14 <__SECURE_RegisterCallback_veneer+0x4>
 8040d14:	0c03e041 	.word	0x0c03e041

08040d18 <__SECURE_log_ret_veneer>:
 8040d18:	f85f f000 	ldr.w	pc, [pc]	@ 8040d1c <__SECURE_log_ret_veneer+0x4>
 8040d1c:	0c03e039 	.word	0x0c03e039
