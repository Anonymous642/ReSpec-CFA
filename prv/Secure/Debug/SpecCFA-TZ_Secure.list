
SpecCFA-TZ_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c10  0c000200  0c000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0c009e10  0c009e10  0000ae10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c00a058  0c00a058  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0c00a058  0c00a058  0000b058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c00a060  0c00a060  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c00a060  0c00a060  0000b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c00a064  0c00a064  0000b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000067c  30000000  0c00a068  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000060  0c03e000  0c03e000  0000d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000005dc  3000067c  3000067c  0000d67c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30000c58  30000c58  0000d67c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed9e  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f56  00000000  00000000  0001be34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  0001ed90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4e  00000000  00000000  0001fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb58  00000000  00000000  000207c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001321d  00000000  00000000  0004c31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e7ed  00000000  00000000  0005f53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016dd28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aac  00000000  00000000  0016dd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00171818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000200 <__do_global_dtors_aux>:
 c000200:	b510      	push	{r4, lr}
 c000202:	4c05      	ldr	r4, [pc, #20]	@ (c000218 <__do_global_dtors_aux+0x18>)
 c000204:	7823      	ldrb	r3, [r4, #0]
 c000206:	b933      	cbnz	r3, c000216 <__do_global_dtors_aux+0x16>
 c000208:	4b04      	ldr	r3, [pc, #16]	@ (c00021c <__do_global_dtors_aux+0x1c>)
 c00020a:	b113      	cbz	r3, c000212 <__do_global_dtors_aux+0x12>
 c00020c:	4804      	ldr	r0, [pc, #16]	@ (c000220 <__do_global_dtors_aux+0x20>)
 c00020e:	f3af 8000 	nop.w
 c000212:	2301      	movs	r3, #1
 c000214:	7023      	strb	r3, [r4, #0]
 c000216:	bd10      	pop	{r4, pc}
 c000218:	3000067c 	.word	0x3000067c
 c00021c:	00000000 	.word	0x00000000
 c000220:	0c009df8 	.word	0x0c009df8

0c000224 <frame_dummy>:
 c000224:	b508      	push	{r3, lr}
 c000226:	4b03      	ldr	r3, [pc, #12]	@ (c000234 <frame_dummy+0x10>)
 c000228:	b11b      	cbz	r3, c000232 <frame_dummy+0xe>
 c00022a:	4903      	ldr	r1, [pc, #12]	@ (c000238 <frame_dummy+0x14>)
 c00022c:	4803      	ldr	r0, [pc, #12]	@ (c00023c <frame_dummy+0x18>)
 c00022e:	f3af 8000 	nop.w
 c000232:	bd08      	pop	{r3, pc}
 c000234:	00000000 	.word	0x00000000
 c000238:	30000680 	.word	0x30000680
 c00023c:	0c009df8 	.word	0x0c009df8

0c000240 <strcmp>:
 c000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 c000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 c000248:	2a01      	cmp	r2, #1
 c00024a:	bf28      	it	cs
 c00024c:	429a      	cmpcs	r2, r3
 c00024e:	d0f7      	beq.n	c000240 <strcmp>
 c000250:	1ad0      	subs	r0, r2, r3
 c000252:	4770      	bx	lr

0c000254 <__gnu_cmse_nonsecure_call>:
 c000254:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000258:	4627      	mov	r7, r4
 c00025a:	46a0      	mov	r8, r4
 c00025c:	46a1      	mov	r9, r4
 c00025e:	46a2      	mov	sl, r4
 c000260:	46a3      	mov	fp, r4
 c000262:	46a4      	mov	ip, r4
 c000264:	ed2d 8b10 	vpush	{d8-d15}
 c000268:	f04f 0500 	mov.w	r5, #0
 c00026c:	ec45 5b18 	vmov	d8, r5, r5
 c000270:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000274:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000278:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00027c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000280:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000284:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000288:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00028c:	eef1 5a10 	vmrs	r5, fpscr
 c000290:	f64f 7660 	movw	r6, #65376	@ 0xff60
 c000294:	f6c0 76ff 	movt	r6, #4095	@ 0xfff
 c000298:	4035      	ands	r5, r6
 c00029a:	eee1 5a10 	vmsr	fpscr, r5
 c00029e:	f384 8800 	msr	CPSR_f, r4
 c0002a2:	4625      	mov	r5, r4
 c0002a4:	4626      	mov	r6, r4
 c0002a6:	47a4      	blxns	r4
 c0002a8:	ecbd 8b10 	vpop	{d8-d15}
 c0002ac:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002b0 <__aeabi_uldivmod>:
 c0002b0:	b953      	cbnz	r3, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b2:	b94a      	cbnz	r2, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b4:	2900      	cmp	r1, #0
 c0002b6:	bf08      	it	eq
 c0002b8:	2800      	cmpeq	r0, #0
 c0002ba:	bf1c      	itt	ne
 c0002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 c0002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 c0002c4:	f000 b97e 	b.w	c0005c4 <__aeabi_idiv0>
 c0002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002d0:	f000 f806 	bl	c0002e0 <__udivmoddi4>
 c0002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002dc:	b004      	add	sp, #16
 c0002de:	4770      	bx	lr

0c0002e0 <__udivmoddi4>:
 c0002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002e4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 c0002e6:	460c      	mov	r4, r1
 c0002e8:	2b00      	cmp	r3, #0
 c0002ea:	d14d      	bne.n	c000388 <__udivmoddi4+0xa8>
 c0002ec:	428a      	cmp	r2, r1
 c0002ee:	460f      	mov	r7, r1
 c0002f0:	4684      	mov	ip, r0
 c0002f2:	4696      	mov	lr, r2
 c0002f4:	fab2 f382 	clz	r3, r2
 c0002f8:	d960      	bls.n	c0003bc <__udivmoddi4+0xdc>
 c0002fa:	b14b      	cbz	r3, c000310 <__udivmoddi4+0x30>
 c0002fc:	fa02 fe03 	lsl.w	lr, r2, r3
 c000300:	f1c3 0220 	rsb	r2, r3, #32
 c000304:	409f      	lsls	r7, r3
 c000306:	fa00 fc03 	lsl.w	ip, r0, r3
 c00030a:	fa20 f202 	lsr.w	r2, r0, r2
 c00030e:	4317      	orrs	r7, r2
 c000310:	ea4f 461e 	mov.w	r6, lr, lsr #16
 c000314:	fa1f f48e 	uxth.w	r4, lr
 c000318:	ea4f 421c 	mov.w	r2, ip, lsr #16
 c00031c:	fbb7 f1f6 	udiv	r1, r7, r6
 c000320:	fb06 7711 	mls	r7, r6, r1, r7
 c000324:	fb01 f004 	mul.w	r0, r1, r4
 c000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c00032c:	4290      	cmp	r0, r2
 c00032e:	d908      	bls.n	c000342 <__udivmoddi4+0x62>
 c000330:	eb1e 0202 	adds.w	r2, lr, r2
 c000334:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 c000338:	d202      	bcs.n	c000340 <__udivmoddi4+0x60>
 c00033a:	4290      	cmp	r0, r2
 c00033c:	f200 812d 	bhi.w	c00059a <__udivmoddi4+0x2ba>
 c000340:	4639      	mov	r1, r7
 c000342:	1a12      	subs	r2, r2, r0
 c000344:	fa1f fc8c 	uxth.w	ip, ip
 c000348:	fbb2 f0f6 	udiv	r0, r2, r6
 c00034c:	fb06 2210 	mls	r2, r6, r0, r2
 c000350:	fb00 f404 	mul.w	r4, r0, r4
 c000354:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 c000358:	4564      	cmp	r4, ip
 c00035a:	d908      	bls.n	c00036e <__udivmoddi4+0x8e>
 c00035c:	eb1e 0c0c 	adds.w	ip, lr, ip
 c000360:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 c000364:	d202      	bcs.n	c00036c <__udivmoddi4+0x8c>
 c000366:	4564      	cmp	r4, ip
 c000368:	f200 811a 	bhi.w	c0005a0 <__udivmoddi4+0x2c0>
 c00036c:	4610      	mov	r0, r2
 c00036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 c000372:	ebac 0c04 	sub.w	ip, ip, r4
 c000376:	2100      	movs	r1, #0
 c000378:	b125      	cbz	r5, c000384 <__udivmoddi4+0xa4>
 c00037a:	fa2c f303 	lsr.w	r3, ip, r3
 c00037e:	2200      	movs	r2, #0
 c000380:	e9c5 3200 	strd	r3, r2, [r5]
 c000384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000388:	428b      	cmp	r3, r1
 c00038a:	d905      	bls.n	c000398 <__udivmoddi4+0xb8>
 c00038c:	b10d      	cbz	r5, c000392 <__udivmoddi4+0xb2>
 c00038e:	e9c5 0100 	strd	r0, r1, [r5]
 c000392:	2100      	movs	r1, #0
 c000394:	4608      	mov	r0, r1
 c000396:	e7f5      	b.n	c000384 <__udivmoddi4+0xa4>
 c000398:	fab3 f183 	clz	r1, r3
 c00039c:	2900      	cmp	r1, #0
 c00039e:	d14d      	bne.n	c00043c <__udivmoddi4+0x15c>
 c0003a0:	42a3      	cmp	r3, r4
 c0003a2:	f0c0 80f2 	bcc.w	c00058a <__udivmoddi4+0x2aa>
 c0003a6:	4290      	cmp	r0, r2
 c0003a8:	f080 80ef 	bcs.w	c00058a <__udivmoddi4+0x2aa>
 c0003ac:	4606      	mov	r6, r0
 c0003ae:	4623      	mov	r3, r4
 c0003b0:	4608      	mov	r0, r1
 c0003b2:	2d00      	cmp	r5, #0
 c0003b4:	d0e6      	beq.n	c000384 <__udivmoddi4+0xa4>
 c0003b6:	e9c5 6300 	strd	r6, r3, [r5]
 c0003ba:	e7e3      	b.n	c000384 <__udivmoddi4+0xa4>
 c0003bc:	2b00      	cmp	r3, #0
 c0003be:	f040 80a2 	bne.w	c000506 <__udivmoddi4+0x226>
 c0003c2:	1a8a      	subs	r2, r1, r2
 c0003c4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 c0003c8:	fa1f f68e 	uxth.w	r6, lr
 c0003cc:	2101      	movs	r1, #1
 c0003ce:	fbb2 f4f7 	udiv	r4, r2, r7
 c0003d2:	fb07 2014 	mls	r0, r7, r4, r2
 c0003d6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 c0003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 c0003de:	fb06 f004 	mul.w	r0, r6, r4
 c0003e2:	4290      	cmp	r0, r2
 c0003e4:	d90f      	bls.n	c000406 <__udivmoddi4+0x126>
 c0003e6:	eb1e 0202 	adds.w	r2, lr, r2
 c0003ea:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 c0003ee:	bf2c      	ite	cs
 c0003f0:	f04f 0901 	movcs.w	r9, #1
 c0003f4:	f04f 0900 	movcc.w	r9, #0
 c0003f8:	4290      	cmp	r0, r2
 c0003fa:	d903      	bls.n	c000404 <__udivmoddi4+0x124>
 c0003fc:	f1b9 0f00 	cmp.w	r9, #0
 c000400:	f000 80c8 	beq.w	c000594 <__udivmoddi4+0x2b4>
 c000404:	4644      	mov	r4, r8
 c000406:	1a12      	subs	r2, r2, r0
 c000408:	fa1f fc8c 	uxth.w	ip, ip
 c00040c:	fbb2 f0f7 	udiv	r0, r2, r7
 c000410:	fb07 2210 	mls	r2, r7, r0, r2
 c000414:	fb00 f606 	mul.w	r6, r0, r6
 c000418:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 c00041c:	4566      	cmp	r6, ip
 c00041e:	d908      	bls.n	c000432 <__udivmoddi4+0x152>
 c000420:	eb1e 0c0c 	adds.w	ip, lr, ip
 c000424:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 c000428:	d202      	bcs.n	c000430 <__udivmoddi4+0x150>
 c00042a:	4566      	cmp	r6, ip
 c00042c:	f200 80bb 	bhi.w	c0005a6 <__udivmoddi4+0x2c6>
 c000430:	4610      	mov	r0, r2
 c000432:	ebac 0c06 	sub.w	ip, ip, r6
 c000436:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 c00043a:	e79d      	b.n	c000378 <__udivmoddi4+0x98>
 c00043c:	f1c1 0620 	rsb	r6, r1, #32
 c000440:	408b      	lsls	r3, r1
 c000442:	fa04 fe01 	lsl.w	lr, r4, r1
 c000446:	fa22 f706 	lsr.w	r7, r2, r6
 c00044a:	fa20 fc06 	lsr.w	ip, r0, r6
 c00044e:	40f4      	lsrs	r4, r6
 c000450:	408a      	lsls	r2, r1
 c000452:	431f      	orrs	r7, r3
 c000454:	ea4e 030c 	orr.w	r3, lr, ip
 c000458:	fa00 fe01 	lsl.w	lr, r0, r1
 c00045c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 c000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 c000464:	fa1f fc87 	uxth.w	ip, r7
 c000468:	fbb4 f0f8 	udiv	r0, r4, r8
 c00046c:	fb08 4410 	mls	r4, r8, r0, r4
 c000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 c000474:	fb00 f90c 	mul.w	r9, r0, ip
 c000478:	45a1      	cmp	r9, r4
 c00047a:	d90e      	bls.n	c00049a <__udivmoddi4+0x1ba>
 c00047c:	193c      	adds	r4, r7, r4
 c00047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 c000482:	bf2c      	ite	cs
 c000484:	f04f 0b01 	movcs.w	fp, #1
 c000488:	f04f 0b00 	movcc.w	fp, #0
 c00048c:	45a1      	cmp	r9, r4
 c00048e:	d903      	bls.n	c000498 <__udivmoddi4+0x1b8>
 c000490:	f1bb 0f00 	cmp.w	fp, #0
 c000494:	f000 8093 	beq.w	c0005be <__udivmoddi4+0x2de>
 c000498:	4650      	mov	r0, sl
 c00049a:	eba4 0409 	sub.w	r4, r4, r9
 c00049e:	fa1f f983 	uxth.w	r9, r3
 c0004a2:	fbb4 f3f8 	udiv	r3, r4, r8
 c0004a6:	fb08 4413 	mls	r4, r8, r3, r4
 c0004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 c0004ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 c0004b2:	45a4      	cmp	ip, r4
 c0004b4:	d906      	bls.n	c0004c4 <__udivmoddi4+0x1e4>
 c0004b6:	193c      	adds	r4, r7, r4
 c0004b8:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 c0004bc:	d201      	bcs.n	c0004c2 <__udivmoddi4+0x1e2>
 c0004be:	45a4      	cmp	ip, r4
 c0004c0:	d87a      	bhi.n	c0005b8 <__udivmoddi4+0x2d8>
 c0004c2:	4643      	mov	r3, r8
 c0004c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 c0004c8:	eba4 040c 	sub.w	r4, r4, ip
 c0004cc:	fba0 9802 	umull	r9, r8, r0, r2
 c0004d0:	4544      	cmp	r4, r8
 c0004d2:	46cc      	mov	ip, r9
 c0004d4:	4643      	mov	r3, r8
 c0004d6:	d302      	bcc.n	c0004de <__udivmoddi4+0x1fe>
 c0004d8:	d106      	bne.n	c0004e8 <__udivmoddi4+0x208>
 c0004da:	45ce      	cmp	lr, r9
 c0004dc:	d204      	bcs.n	c0004e8 <__udivmoddi4+0x208>
 c0004de:	3801      	subs	r0, #1
 c0004e0:	ebb9 0c02 	subs.w	ip, r9, r2
 c0004e4:	eb68 0307 	sbc.w	r3, r8, r7
 c0004e8:	b15d      	cbz	r5, c000502 <__udivmoddi4+0x222>
 c0004ea:	ebbe 020c 	subs.w	r2, lr, ip
 c0004ee:	eb64 0403 	sbc.w	r4, r4, r3
 c0004f2:	fa04 f606 	lsl.w	r6, r4, r6
 c0004f6:	fa22 f301 	lsr.w	r3, r2, r1
 c0004fa:	40cc      	lsrs	r4, r1
 c0004fc:	431e      	orrs	r6, r3
 c0004fe:	e9c5 6400 	strd	r6, r4, [r5]
 c000502:	2100      	movs	r1, #0
 c000504:	e73e      	b.n	c000384 <__udivmoddi4+0xa4>
 c000506:	fa02 fe03 	lsl.w	lr, r2, r3
 c00050a:	f1c3 0120 	rsb	r1, r3, #32
 c00050e:	fa04 f203 	lsl.w	r2, r4, r3
 c000512:	fa00 fc03 	lsl.w	ip, r0, r3
 c000516:	40cc      	lsrs	r4, r1
 c000518:	ea4f 471e 	mov.w	r7, lr, lsr #16
 c00051c:	fa20 f101 	lsr.w	r1, r0, r1
 c000520:	fa1f f68e 	uxth.w	r6, lr
 c000524:	fbb4 f0f7 	udiv	r0, r4, r7
 c000528:	430a      	orrs	r2, r1
 c00052a:	fb07 4410 	mls	r4, r7, r0, r4
 c00052e:	0c11      	lsrs	r1, r2, #16
 c000530:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 c000534:	fb00 f406 	mul.w	r4, r0, r6
 c000538:	428c      	cmp	r4, r1
 c00053a:	d90e      	bls.n	c00055a <__udivmoddi4+0x27a>
 c00053c:	eb1e 0101 	adds.w	r1, lr, r1
 c000540:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 c000544:	bf2c      	ite	cs
 c000546:	f04f 0901 	movcs.w	r9, #1
 c00054a:	f04f 0900 	movcc.w	r9, #0
 c00054e:	428c      	cmp	r4, r1
 c000550:	d902      	bls.n	c000558 <__udivmoddi4+0x278>
 c000552:	f1b9 0f00 	cmp.w	r9, #0
 c000556:	d02c      	beq.n	c0005b2 <__udivmoddi4+0x2d2>
 c000558:	4640      	mov	r0, r8
 c00055a:	1b09      	subs	r1, r1, r4
 c00055c:	b292      	uxth	r2, r2
 c00055e:	fbb1 f4f7 	udiv	r4, r1, r7
 c000562:	fb07 1114 	mls	r1, r7, r4, r1
 c000566:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 c00056a:	fb04 f106 	mul.w	r1, r4, r6
 c00056e:	4291      	cmp	r1, r2
 c000570:	d907      	bls.n	c000582 <__udivmoddi4+0x2a2>
 c000572:	eb1e 0202 	adds.w	r2, lr, r2
 c000576:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 c00057a:	d201      	bcs.n	c000580 <__udivmoddi4+0x2a0>
 c00057c:	4291      	cmp	r1, r2
 c00057e:	d815      	bhi.n	c0005ac <__udivmoddi4+0x2cc>
 c000580:	4644      	mov	r4, r8
 c000582:	1a52      	subs	r2, r2, r1
 c000584:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 c000588:	e721      	b.n	c0003ce <__udivmoddi4+0xee>
 c00058a:	1a86      	subs	r6, r0, r2
 c00058c:	eb64 0303 	sbc.w	r3, r4, r3
 c000590:	2001      	movs	r0, #1
 c000592:	e70e      	b.n	c0003b2 <__udivmoddi4+0xd2>
 c000594:	3c02      	subs	r4, #2
 c000596:	4472      	add	r2, lr
 c000598:	e735      	b.n	c000406 <__udivmoddi4+0x126>
 c00059a:	3902      	subs	r1, #2
 c00059c:	4472      	add	r2, lr
 c00059e:	e6d0      	b.n	c000342 <__udivmoddi4+0x62>
 c0005a0:	44f4      	add	ip, lr
 c0005a2:	3802      	subs	r0, #2
 c0005a4:	e6e3      	b.n	c00036e <__udivmoddi4+0x8e>
 c0005a6:	44f4      	add	ip, lr
 c0005a8:	3802      	subs	r0, #2
 c0005aa:	e742      	b.n	c000432 <__udivmoddi4+0x152>
 c0005ac:	3c02      	subs	r4, #2
 c0005ae:	4472      	add	r2, lr
 c0005b0:	e7e7      	b.n	c000582 <__udivmoddi4+0x2a2>
 c0005b2:	3802      	subs	r0, #2
 c0005b4:	4471      	add	r1, lr
 c0005b6:	e7d0      	b.n	c00055a <__udivmoddi4+0x27a>
 c0005b8:	3b02      	subs	r3, #2
 c0005ba:	443c      	add	r4, r7
 c0005bc:	e782      	b.n	c0004c4 <__udivmoddi4+0x1e4>
 c0005be:	3802      	subs	r0, #2
 c0005c0:	443c      	add	r4, r7
 c0005c2:	e76a      	b.n	c00049a <__udivmoddi4+0x1ba>

0c0005c4 <__aeabi_idiv0>:
 c0005c4:	4770      	bx	lr
 c0005c6:	bf00      	nop

0c0005c8 <load32>:
  uint16_t x;
  memcpy(&x, b, 2);
  return x;
}

inline static uint32_t load32(uint8_t *b) {
 c0005c8:	b480      	push	{r7}
 c0005ca:	b085      	sub	sp, #20
 c0005cc:	af00      	add	r7, sp, #0
 c0005ce:	6078      	str	r0, [r7, #4]
  uint32_t x;
  memcpy(&x, b, 4);
 c0005d0:	687b      	ldr	r3, [r7, #4]
 c0005d2:	681b      	ldr	r3, [r3, #0]
 c0005d4:	60fb      	str	r3, [r7, #12]
  return x;
 c0005d6:	68fb      	ldr	r3, [r7, #12]
}
 c0005d8:	4618      	mov	r0, r3
 c0005da:	3714      	adds	r7, #20
 c0005dc:	46bd      	mov	sp, r7
 c0005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005e2:	4770      	bx	lr

0c0005e4 <store32>:
  return x;
}

inline static void store16(uint8_t *b, uint16_t i) { memcpy(b, &i, 2); }

inline static void store32(uint8_t *b, uint32_t i) { memcpy(b, &i, 4); }
 c0005e4:	b480      	push	{r7}
 c0005e6:	b083      	sub	sp, #12
 c0005e8:	af00      	add	r7, sp, #0
 c0005ea:	6078      	str	r0, [r7, #4]
 c0005ec:	6039      	str	r1, [r7, #0]
 c0005ee:	683a      	ldr	r2, [r7, #0]
 c0005f0:	687b      	ldr	r3, [r7, #4]
 c0005f2:	601a      	str	r2, [r3, #0]
 c0005f4:	bf00      	nop
 c0005f6:	370c      	adds	r7, #12
 c0005f8:	46bd      	mov	sp, r7
 c0005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005fe:	4770      	bx	lr

0c000600 <store64>:

inline static void store64(uint8_t *b, uint64_t i) { memcpy(b, &i, 8); }
 c000600:	b480      	push	{r7}
 c000602:	b085      	sub	sp, #20
 c000604:	af00      	add	r7, sp, #0
 c000606:	60f8      	str	r0, [r7, #12]
 c000608:	e9c7 2300 	strd	r2, r3, [r7]
 c00060c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c000610:	68f9      	ldr	r1, [r7, #12]
 c000612:	600a      	str	r2, [r1, #0]
 c000614:	604b      	str	r3, [r1, #4]
 c000616:	bf00      	nop
 c000618:	3714      	adds	r7, #20
 c00061a:	46bd      	mov	sp, r7
 c00061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000620:	4770      	bx	lr

0c000622 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>:

#include "Hacl_SHA2_256.h"

static void
Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(uint32_t *output, uint8_t *input, uint32_t len)
{
 c000622:	b580      	push	{r7, lr}
 c000624:	b088      	sub	sp, #32
 c000626:	af00      	add	r7, sp, #0
 c000628:	60f8      	str	r0, [r7, #12]
 c00062a:	60b9      	str	r1, [r7, #8]
 c00062c:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00062e:	2300      	movs	r3, #0
 c000630:	61fb      	str	r3, [r7, #28]
 c000632:	e021      	b.n	c000678 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x56>
  {
    uint8_t *x0 = input + (uint32_t)4U * i;
 c000634:	69fb      	ldr	r3, [r7, #28]
 c000636:	009b      	lsls	r3, r3, #2
 c000638:	68ba      	ldr	r2, [r7, #8]
 c00063a:	4413      	add	r3, r2
 c00063c:	61bb      	str	r3, [r7, #24]
    uint32_t inputi = load32_be(x0);
 c00063e:	69b8      	ldr	r0, [r7, #24]
 c000640:	f7ff ffc2 	bl	c0005c8 <load32>
 c000644:	6178      	str	r0, [r7, #20]
 c000646:	697b      	ldr	r3, [r7, #20]
 c000648:	0e1a      	lsrs	r2, r3, #24
 c00064a:	697b      	ldr	r3, [r7, #20]
 c00064c:	0a1b      	lsrs	r3, r3, #8
 c00064e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 c000652:	431a      	orrs	r2, r3
 c000654:	697b      	ldr	r3, [r7, #20]
 c000656:	021b      	lsls	r3, r3, #8
 c000658:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 c00065c:	431a      	orrs	r2, r3
 c00065e:	697b      	ldr	r3, [r7, #20]
 c000660:	061b      	lsls	r3, r3, #24
 c000662:	4313      	orrs	r3, r2
 c000664:	613b      	str	r3, [r7, #16]
    output[i] = inputi;
 c000666:	69fb      	ldr	r3, [r7, #28]
 c000668:	009b      	lsls	r3, r3, #2
 c00066a:	68fa      	ldr	r2, [r7, #12]
 c00066c:	4413      	add	r3, r2
 c00066e:	693a      	ldr	r2, [r7, #16]
 c000670:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000672:	69fb      	ldr	r3, [r7, #28]
 c000674:	3301      	adds	r3, #1
 c000676:	61fb      	str	r3, [r7, #28]
 c000678:	69fa      	ldr	r2, [r7, #28]
 c00067a:	687b      	ldr	r3, [r7, #4]
 c00067c:	429a      	cmp	r2, r3
 c00067e:	d3d9      	bcc.n	c000634 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x12>
  }
}
 c000680:	bf00      	nop
 c000682:	bf00      	nop
 c000684:	3720      	adds	r7, #32
 c000686:	46bd      	mov	sp, r7
 c000688:	bd80      	pop	{r7, pc}

0c00068a <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>:

static void
Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(uint8_t *output, uint32_t *input, uint32_t len)
{
 c00068a:	b580      	push	{r7, lr}
 c00068c:	b088      	sub	sp, #32
 c00068e:	af00      	add	r7, sp, #0
 c000690:	60f8      	str	r0, [r7, #12]
 c000692:	60b9      	str	r1, [r7, #8]
 c000694:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000696:	2300      	movs	r3, #0
 c000698:	61fb      	str	r3, [r7, #28]
 c00069a:	e022      	b.n	c0006e2 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x58>
  {
    uint32_t hd1 = input[i];
 c00069c:	69fb      	ldr	r3, [r7, #28]
 c00069e:	009b      	lsls	r3, r3, #2
 c0006a0:	68ba      	ldr	r2, [r7, #8]
 c0006a2:	4413      	add	r3, r2
 c0006a4:	681b      	ldr	r3, [r3, #0]
 c0006a6:	61bb      	str	r3, [r7, #24]
    uint8_t *x0 = output + (uint32_t)4U * i;
 c0006a8:	69fb      	ldr	r3, [r7, #28]
 c0006aa:	009b      	lsls	r3, r3, #2
 c0006ac:	68fa      	ldr	r2, [r7, #12]
 c0006ae:	4413      	add	r3, r2
 c0006b0:	617b      	str	r3, [r7, #20]
    store32_be(x0, hd1);
 c0006b2:	69bb      	ldr	r3, [r7, #24]
 c0006b4:	613b      	str	r3, [r7, #16]
 c0006b6:	693b      	ldr	r3, [r7, #16]
 c0006b8:	0e1a      	lsrs	r2, r3, #24
 c0006ba:	693b      	ldr	r3, [r7, #16]
 c0006bc:	0a1b      	lsrs	r3, r3, #8
 c0006be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 c0006c2:	431a      	orrs	r2, r3
 c0006c4:	693b      	ldr	r3, [r7, #16]
 c0006c6:	021b      	lsls	r3, r3, #8
 c0006c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 c0006cc:	431a      	orrs	r2, r3
 c0006ce:	693b      	ldr	r3, [r7, #16]
 c0006d0:	061b      	lsls	r3, r3, #24
 c0006d2:	4313      	orrs	r3, r2
 c0006d4:	4619      	mov	r1, r3
 c0006d6:	6978      	ldr	r0, [r7, #20]
 c0006d8:	f7ff ff84 	bl	c0005e4 <store32>
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0006dc:	69fb      	ldr	r3, [r7, #28]
 c0006de:	3301      	adds	r3, #1
 c0006e0:	61fb      	str	r3, [r7, #28]
 c0006e2:	69fa      	ldr	r2, [r7, #28]
 c0006e4:	687b      	ldr	r3, [r7, #4]
 c0006e6:	429a      	cmp	r2, r3
 c0006e8:	d3d8      	bcc.n	c00069c <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x12>
  }
}
 c0006ea:	bf00      	nop
 c0006ec:	bf00      	nop
 c0006ee:	3720      	adds	r7, #32
 c0006f0:	46bd      	mov	sp, r7
 c0006f2:	bd80      	pop	{r7, pc}

0c0006f4 <Hacl_Impl_SHA2_256_init>:

static void Hacl_Impl_SHA2_256_init(uint32_t *state)
{
 c0006f4:	b480      	push	{r7}
 c0006f6:	b0a3      	sub	sp, #140	@ 0x8c
 c0006f8:	af00      	add	r7, sp, #0
 c0006fa:	6078      	str	r0, [r7, #4]
  uint32_t *k1 = state;
 c0006fc:	687b      	ldr	r3, [r7, #4]
 c0006fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t *h_01 = state + (uint32_t)128U;
 c000702:	687b      	ldr	r3, [r7, #4]
 c000704:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 c000708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint32_t *p10 = k1;
 c00070c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 c000710:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t *p20 = k1 + (uint32_t)16U;
 c000712:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 c000716:	3340      	adds	r3, #64	@ 0x40
 c000718:	67bb      	str	r3, [r7, #120]	@ 0x78
  uint32_t *p3 = k1 + (uint32_t)32U;
 c00071a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 c00071e:	3380      	adds	r3, #128	@ 0x80
 c000720:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t *p4 = k1 + (uint32_t)48U;
 c000722:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 c000726:	33c0      	adds	r3, #192	@ 0xc0
 c000728:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t *p11 = p10;
 c00072a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 c00072c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint32_t *p21 = p10 + (uint32_t)8U;
 c00072e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 c000730:	3320      	adds	r3, #32
 c000732:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t *p12 = p11;
 c000734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 c000736:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t *p22 = p11 + (uint32_t)4U;
 c000738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 c00073a:	3310      	adds	r3, #16
 c00073c:	663b      	str	r3, [r7, #96]	@ 0x60
  p12[0U] = (uint32_t)0x428a2f98U;
 c00073e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 c000740:	4a8d      	ldr	r2, [pc, #564]	@ (c000978 <Hacl_Impl_SHA2_256_init+0x284>)
 c000742:	601a      	str	r2, [r3, #0]
  p12[1U] = (uint32_t)0x71374491U;
 c000744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 c000746:	3304      	adds	r3, #4
 c000748:	4a8c      	ldr	r2, [pc, #560]	@ (c00097c <Hacl_Impl_SHA2_256_init+0x288>)
 c00074a:	601a      	str	r2, [r3, #0]
  p12[2U] = (uint32_t)0xb5c0fbcfU;
 c00074c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 c00074e:	3308      	adds	r3, #8
 c000750:	4a8b      	ldr	r2, [pc, #556]	@ (c000980 <Hacl_Impl_SHA2_256_init+0x28c>)
 c000752:	601a      	str	r2, [r3, #0]
  p12[3U] = (uint32_t)0xe9b5dba5U;
 c000754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 c000756:	330c      	adds	r3, #12
 c000758:	4a8a      	ldr	r2, [pc, #552]	@ (c000984 <Hacl_Impl_SHA2_256_init+0x290>)
 c00075a:	601a      	str	r2, [r3, #0]
  p22[0U] = (uint32_t)0x3956c25bU;
 c00075c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 c00075e:	4a8a      	ldr	r2, [pc, #552]	@ (c000988 <Hacl_Impl_SHA2_256_init+0x294>)
 c000760:	601a      	str	r2, [r3, #0]
  p22[1U] = (uint32_t)0x59f111f1U;
 c000762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 c000764:	3304      	adds	r3, #4
 c000766:	4a89      	ldr	r2, [pc, #548]	@ (c00098c <Hacl_Impl_SHA2_256_init+0x298>)
 c000768:	601a      	str	r2, [r3, #0]
  p22[2U] = (uint32_t)0x923f82a4U;
 c00076a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 c00076c:	3308      	adds	r3, #8
 c00076e:	4a88      	ldr	r2, [pc, #544]	@ (c000990 <Hacl_Impl_SHA2_256_init+0x29c>)
 c000770:	601a      	str	r2, [r3, #0]
  p22[3U] = (uint32_t)0xab1c5ed5U;
 c000772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 c000774:	330c      	adds	r3, #12
 c000776:	4a87      	ldr	r2, [pc, #540]	@ (c000994 <Hacl_Impl_SHA2_256_init+0x2a0>)
 c000778:	601a      	str	r2, [r3, #0]
  uint32_t *p13 = p21;
 c00077a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 c00077c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t *p23 = p21 + (uint32_t)4U;
 c00077e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 c000780:	3310      	adds	r3, #16
 c000782:	65bb      	str	r3, [r7, #88]	@ 0x58
  p13[0U] = (uint32_t)0xd807aa98U;
 c000784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 c000786:	4a84      	ldr	r2, [pc, #528]	@ (c000998 <Hacl_Impl_SHA2_256_init+0x2a4>)
 c000788:	601a      	str	r2, [r3, #0]
  p13[1U] = (uint32_t)0x12835b01U;
 c00078a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 c00078c:	3304      	adds	r3, #4
 c00078e:	4a83      	ldr	r2, [pc, #524]	@ (c00099c <Hacl_Impl_SHA2_256_init+0x2a8>)
 c000790:	601a      	str	r2, [r3, #0]
  p13[2U] = (uint32_t)0x243185beU;
 c000792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 c000794:	3308      	adds	r3, #8
 c000796:	4a82      	ldr	r2, [pc, #520]	@ (c0009a0 <Hacl_Impl_SHA2_256_init+0x2ac>)
 c000798:	601a      	str	r2, [r3, #0]
  p13[3U] = (uint32_t)0x550c7dc3U;
 c00079a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 c00079c:	330c      	adds	r3, #12
 c00079e:	4a81      	ldr	r2, [pc, #516]	@ (c0009a4 <Hacl_Impl_SHA2_256_init+0x2b0>)
 c0007a0:	601a      	str	r2, [r3, #0]
  p23[0U] = (uint32_t)0x72be5d74U;
 c0007a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 c0007a4:	4a80      	ldr	r2, [pc, #512]	@ (c0009a8 <Hacl_Impl_SHA2_256_init+0x2b4>)
 c0007a6:	601a      	str	r2, [r3, #0]
  p23[1U] = (uint32_t)0x80deb1feU;
 c0007a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 c0007aa:	3304      	adds	r3, #4
 c0007ac:	4a7f      	ldr	r2, [pc, #508]	@ (c0009ac <Hacl_Impl_SHA2_256_init+0x2b8>)
 c0007ae:	601a      	str	r2, [r3, #0]
  p23[2U] = (uint32_t)0x9bdc06a7U;
 c0007b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 c0007b2:	3308      	adds	r3, #8
 c0007b4:	4a7e      	ldr	r2, [pc, #504]	@ (c0009b0 <Hacl_Impl_SHA2_256_init+0x2bc>)
 c0007b6:	601a      	str	r2, [r3, #0]
  p23[3U] = (uint32_t)0xc19bf174U;
 c0007b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 c0007ba:	330c      	adds	r3, #12
 c0007bc:	4a7d      	ldr	r2, [pc, #500]	@ (c0009b4 <Hacl_Impl_SHA2_256_init+0x2c0>)
 c0007be:	601a      	str	r2, [r3, #0]
  uint32_t *p14 = p20;
 c0007c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 c0007c2:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t *p24 = p20 + (uint32_t)8U;
 c0007c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 c0007c6:	3320      	adds	r3, #32
 c0007c8:	653b      	str	r3, [r7, #80]	@ 0x50
  uint32_t *p15 = p14;
 c0007ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c0007cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t *p25 = p14 + (uint32_t)4U;
 c0007ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c0007d0:	3310      	adds	r3, #16
 c0007d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  p15[0U] = (uint32_t)0xe49b69c1U;
 c0007d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0007d6:	4a78      	ldr	r2, [pc, #480]	@ (c0009b8 <Hacl_Impl_SHA2_256_init+0x2c4>)
 c0007d8:	601a      	str	r2, [r3, #0]
  p15[1U] = (uint32_t)0xefbe4786U;
 c0007da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0007dc:	3304      	adds	r3, #4
 c0007de:	4a77      	ldr	r2, [pc, #476]	@ (c0009bc <Hacl_Impl_SHA2_256_init+0x2c8>)
 c0007e0:	601a      	str	r2, [r3, #0]
  p15[2U] = (uint32_t)0x0fc19dc6U;
 c0007e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0007e4:	3308      	adds	r3, #8
 c0007e6:	4a76      	ldr	r2, [pc, #472]	@ (c0009c0 <Hacl_Impl_SHA2_256_init+0x2cc>)
 c0007e8:	601a      	str	r2, [r3, #0]
  p15[3U] = (uint32_t)0x240ca1ccU;
 c0007ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0007ec:	330c      	adds	r3, #12
 c0007ee:	4a75      	ldr	r2, [pc, #468]	@ (c0009c4 <Hacl_Impl_SHA2_256_init+0x2d0>)
 c0007f0:	601a      	str	r2, [r3, #0]
  p25[0U] = (uint32_t)0x2de92c6fU;
 c0007f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c0007f4:	4a74      	ldr	r2, [pc, #464]	@ (c0009c8 <Hacl_Impl_SHA2_256_init+0x2d4>)
 c0007f6:	601a      	str	r2, [r3, #0]
  p25[1U] = (uint32_t)0x4a7484aaU;
 c0007f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c0007fa:	3304      	adds	r3, #4
 c0007fc:	4a73      	ldr	r2, [pc, #460]	@ (c0009cc <Hacl_Impl_SHA2_256_init+0x2d8>)
 c0007fe:	601a      	str	r2, [r3, #0]
  p25[2U] = (uint32_t)0x5cb0a9dcU;
 c000800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c000802:	3308      	adds	r3, #8
 c000804:	4a72      	ldr	r2, [pc, #456]	@ (c0009d0 <Hacl_Impl_SHA2_256_init+0x2dc>)
 c000806:	601a      	str	r2, [r3, #0]
  p25[3U] = (uint32_t)0x76f988daU;
 c000808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c00080a:	330c      	adds	r3, #12
 c00080c:	4a71      	ldr	r2, [pc, #452]	@ (c0009d4 <Hacl_Impl_SHA2_256_init+0x2e0>)
 c00080e:	601a      	str	r2, [r3, #0]
  uint32_t *p16 = p24;
 c000810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 c000812:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t *p26 = p24 + (uint32_t)4U;
 c000814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 c000816:	3310      	adds	r3, #16
 c000818:	643b      	str	r3, [r7, #64]	@ 0x40
  p16[0U] = (uint32_t)0x983e5152U;
 c00081a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c00081c:	4a6e      	ldr	r2, [pc, #440]	@ (c0009d8 <Hacl_Impl_SHA2_256_init+0x2e4>)
 c00081e:	601a      	str	r2, [r3, #0]
  p16[1U] = (uint32_t)0xa831c66dU;
 c000820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c000822:	3304      	adds	r3, #4
 c000824:	4a6d      	ldr	r2, [pc, #436]	@ (c0009dc <Hacl_Impl_SHA2_256_init+0x2e8>)
 c000826:	601a      	str	r2, [r3, #0]
  p16[2U] = (uint32_t)0xb00327c8U;
 c000828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c00082a:	3308      	adds	r3, #8
 c00082c:	4a6c      	ldr	r2, [pc, #432]	@ (c0009e0 <Hacl_Impl_SHA2_256_init+0x2ec>)
 c00082e:	601a      	str	r2, [r3, #0]
  p16[3U] = (uint32_t)0xbf597fc7U;
 c000830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c000832:	330c      	adds	r3, #12
 c000834:	4a6b      	ldr	r2, [pc, #428]	@ (c0009e4 <Hacl_Impl_SHA2_256_init+0x2f0>)
 c000836:	601a      	str	r2, [r3, #0]
  p26[0U] = (uint32_t)0xc6e00bf3U;
 c000838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00083a:	4a6b      	ldr	r2, [pc, #428]	@ (c0009e8 <Hacl_Impl_SHA2_256_init+0x2f4>)
 c00083c:	601a      	str	r2, [r3, #0]
  p26[1U] = (uint32_t)0xd5a79147U;
 c00083e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c000840:	3304      	adds	r3, #4
 c000842:	4a6a      	ldr	r2, [pc, #424]	@ (c0009ec <Hacl_Impl_SHA2_256_init+0x2f8>)
 c000844:	601a      	str	r2, [r3, #0]
  p26[2U] = (uint32_t)0x06ca6351U;
 c000846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c000848:	3308      	adds	r3, #8
 c00084a:	4a69      	ldr	r2, [pc, #420]	@ (c0009f0 <Hacl_Impl_SHA2_256_init+0x2fc>)
 c00084c:	601a      	str	r2, [r3, #0]
  p26[3U] = (uint32_t)0x14292967U;
 c00084e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c000850:	330c      	adds	r3, #12
 c000852:	4a68      	ldr	r2, [pc, #416]	@ (c0009f4 <Hacl_Impl_SHA2_256_init+0x300>)
 c000854:	601a      	str	r2, [r3, #0]
  uint32_t *p17 = p3;
 c000856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 c000858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t *p27 = p3 + (uint32_t)8U;
 c00085a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 c00085c:	3320      	adds	r3, #32
 c00085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t *p18 = p17;
 c000860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c000862:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t *p28 = p17 + (uint32_t)4U;
 c000864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c000866:	3310      	adds	r3, #16
 c000868:	633b      	str	r3, [r7, #48]	@ 0x30
  p18[0U] = (uint32_t)0x27b70a85U;
 c00086a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c00086c:	4a62      	ldr	r2, [pc, #392]	@ (c0009f8 <Hacl_Impl_SHA2_256_init+0x304>)
 c00086e:	601a      	str	r2, [r3, #0]
  p18[1U] = (uint32_t)0x2e1b2138U;
 c000870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c000872:	3304      	adds	r3, #4
 c000874:	4a61      	ldr	r2, [pc, #388]	@ (c0009fc <Hacl_Impl_SHA2_256_init+0x308>)
 c000876:	601a      	str	r2, [r3, #0]
  p18[2U] = (uint32_t)0x4d2c6dfcU;
 c000878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c00087a:	3308      	adds	r3, #8
 c00087c:	4a60      	ldr	r2, [pc, #384]	@ (c000a00 <Hacl_Impl_SHA2_256_init+0x30c>)
 c00087e:	601a      	str	r2, [r3, #0]
  p18[3U] = (uint32_t)0x53380d13U;
 c000880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c000882:	330c      	adds	r3, #12
 c000884:	4a5f      	ldr	r2, [pc, #380]	@ (c000a04 <Hacl_Impl_SHA2_256_init+0x310>)
 c000886:	601a      	str	r2, [r3, #0]
  p28[0U] = (uint32_t)0x650a7354U;
 c000888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00088a:	4a5f      	ldr	r2, [pc, #380]	@ (c000a08 <Hacl_Impl_SHA2_256_init+0x314>)
 c00088c:	601a      	str	r2, [r3, #0]
  p28[1U] = (uint32_t)0x766a0abbU;
 c00088e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c000890:	3304      	adds	r3, #4
 c000892:	4a5e      	ldr	r2, [pc, #376]	@ (c000a0c <Hacl_Impl_SHA2_256_init+0x318>)
 c000894:	601a      	str	r2, [r3, #0]
  p28[2U] = (uint32_t)0x81c2c92eU;
 c000896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c000898:	3308      	adds	r3, #8
 c00089a:	4a5d      	ldr	r2, [pc, #372]	@ (c000a10 <Hacl_Impl_SHA2_256_init+0x31c>)
 c00089c:	601a      	str	r2, [r3, #0]
  p28[3U] = (uint32_t)0x92722c85U;
 c00089e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0008a0:	330c      	adds	r3, #12
 c0008a2:	4a5c      	ldr	r2, [pc, #368]	@ (c000a14 <Hacl_Impl_SHA2_256_init+0x320>)
 c0008a4:	601a      	str	r2, [r3, #0]
  uint32_t *p19 = p27;
 c0008a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c0008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t *p29 = p27 + (uint32_t)4U;
 c0008aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c0008ac:	3310      	adds	r3, #16
 c0008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  p19[0U] = (uint32_t)0xa2bfe8a1U;
 c0008b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0008b2:	4a59      	ldr	r2, [pc, #356]	@ (c000a18 <Hacl_Impl_SHA2_256_init+0x324>)
 c0008b4:	601a      	str	r2, [r3, #0]
  p19[1U] = (uint32_t)0xa81a664bU;
 c0008b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0008b8:	3304      	adds	r3, #4
 c0008ba:	4a58      	ldr	r2, [pc, #352]	@ (c000a1c <Hacl_Impl_SHA2_256_init+0x328>)
 c0008bc:	601a      	str	r2, [r3, #0]
  p19[2U] = (uint32_t)0xc24b8b70U;
 c0008be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0008c0:	3308      	adds	r3, #8
 c0008c2:	4a57      	ldr	r2, [pc, #348]	@ (c000a20 <Hacl_Impl_SHA2_256_init+0x32c>)
 c0008c4:	601a      	str	r2, [r3, #0]
  p19[3U] = (uint32_t)0xc76c51a3U;
 c0008c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0008c8:	330c      	adds	r3, #12
 c0008ca:	4a56      	ldr	r2, [pc, #344]	@ (c000a24 <Hacl_Impl_SHA2_256_init+0x330>)
 c0008cc:	601a      	str	r2, [r3, #0]
  p29[0U] = (uint32_t)0xd192e819U;
 c0008ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0008d0:	4a55      	ldr	r2, [pc, #340]	@ (c000a28 <Hacl_Impl_SHA2_256_init+0x334>)
 c0008d2:	601a      	str	r2, [r3, #0]
  p29[1U] = (uint32_t)0xd6990624U;
 c0008d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0008d6:	3304      	adds	r3, #4
 c0008d8:	4a54      	ldr	r2, [pc, #336]	@ (c000a2c <Hacl_Impl_SHA2_256_init+0x338>)
 c0008da:	601a      	str	r2, [r3, #0]
  p29[2U] = (uint32_t)0xf40e3585U;
 c0008dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0008de:	3308      	adds	r3, #8
 c0008e0:	4a53      	ldr	r2, [pc, #332]	@ (c000a30 <Hacl_Impl_SHA2_256_init+0x33c>)
 c0008e2:	601a      	str	r2, [r3, #0]
  p29[3U] = (uint32_t)0x106aa070U;
 c0008e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0008e6:	330c      	adds	r3, #12
 c0008e8:	4a52      	ldr	r2, [pc, #328]	@ (c000a34 <Hacl_Impl_SHA2_256_init+0x340>)
 c0008ea:	601a      	str	r2, [r3, #0]
  uint32_t *p110 = p4;
 c0008ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 c0008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *p210 = p4 + (uint32_t)8U;
 c0008f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 c0008f2:	3320      	adds	r3, #32
 c0008f4:	623b      	str	r3, [r7, #32]
  uint32_t *p1 = p110;
 c0008f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0008f8:	61fb      	str	r3, [r7, #28]
  uint32_t *p211 = p110 + (uint32_t)4U;
 c0008fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0008fc:	3310      	adds	r3, #16
 c0008fe:	61bb      	str	r3, [r7, #24]
  p1[0U] = (uint32_t)0x19a4c116U;
 c000900:	69fb      	ldr	r3, [r7, #28]
 c000902:	4a4d      	ldr	r2, [pc, #308]	@ (c000a38 <Hacl_Impl_SHA2_256_init+0x344>)
 c000904:	601a      	str	r2, [r3, #0]
  p1[1U] = (uint32_t)0x1e376c08U;
 c000906:	69fb      	ldr	r3, [r7, #28]
 c000908:	3304      	adds	r3, #4
 c00090a:	4a4c      	ldr	r2, [pc, #304]	@ (c000a3c <Hacl_Impl_SHA2_256_init+0x348>)
 c00090c:	601a      	str	r2, [r3, #0]
  p1[2U] = (uint32_t)0x2748774cU;
 c00090e:	69fb      	ldr	r3, [r7, #28]
 c000910:	3308      	adds	r3, #8
 c000912:	4a4b      	ldr	r2, [pc, #300]	@ (c000a40 <Hacl_Impl_SHA2_256_init+0x34c>)
 c000914:	601a      	str	r2, [r3, #0]
  p1[3U] = (uint32_t)0x34b0bcb5U;
 c000916:	69fb      	ldr	r3, [r7, #28]
 c000918:	330c      	adds	r3, #12
 c00091a:	4a4a      	ldr	r2, [pc, #296]	@ (c000a44 <Hacl_Impl_SHA2_256_init+0x350>)
 c00091c:	601a      	str	r2, [r3, #0]
  p211[0U] = (uint32_t)0x391c0cb3U;
 c00091e:	69bb      	ldr	r3, [r7, #24]
 c000920:	4a49      	ldr	r2, [pc, #292]	@ (c000a48 <Hacl_Impl_SHA2_256_init+0x354>)
 c000922:	601a      	str	r2, [r3, #0]
  p211[1U] = (uint32_t)0x4ed8aa4aU;
 c000924:	69bb      	ldr	r3, [r7, #24]
 c000926:	3304      	adds	r3, #4
 c000928:	4a48      	ldr	r2, [pc, #288]	@ (c000a4c <Hacl_Impl_SHA2_256_init+0x358>)
 c00092a:	601a      	str	r2, [r3, #0]
  p211[2U] = (uint32_t)0x5b9cca4fU;
 c00092c:	69bb      	ldr	r3, [r7, #24]
 c00092e:	3308      	adds	r3, #8
 c000930:	4a47      	ldr	r2, [pc, #284]	@ (c000a50 <Hacl_Impl_SHA2_256_init+0x35c>)
 c000932:	601a      	str	r2, [r3, #0]
  p211[3U] = (uint32_t)0x682e6ff3U;
 c000934:	69bb      	ldr	r3, [r7, #24]
 c000936:	330c      	adds	r3, #12
 c000938:	4a46      	ldr	r2, [pc, #280]	@ (c000a54 <Hacl_Impl_SHA2_256_init+0x360>)
 c00093a:	601a      	str	r2, [r3, #0]
  uint32_t *p111 = p210;
 c00093c:	6a3b      	ldr	r3, [r7, #32]
 c00093e:	617b      	str	r3, [r7, #20]
  uint32_t *p212 = p210 + (uint32_t)4U;
 c000940:	6a3b      	ldr	r3, [r7, #32]
 c000942:	3310      	adds	r3, #16
 c000944:	613b      	str	r3, [r7, #16]
  p111[0U] = (uint32_t)0x748f82eeU;
 c000946:	697b      	ldr	r3, [r7, #20]
 c000948:	4a43      	ldr	r2, [pc, #268]	@ (c000a58 <Hacl_Impl_SHA2_256_init+0x364>)
 c00094a:	601a      	str	r2, [r3, #0]
  p111[1U] = (uint32_t)0x78a5636fU;
 c00094c:	697b      	ldr	r3, [r7, #20]
 c00094e:	3304      	adds	r3, #4
 c000950:	4a42      	ldr	r2, [pc, #264]	@ (c000a5c <Hacl_Impl_SHA2_256_init+0x368>)
 c000952:	601a      	str	r2, [r3, #0]
  p111[2U] = (uint32_t)0x84c87814U;
 c000954:	697b      	ldr	r3, [r7, #20]
 c000956:	3308      	adds	r3, #8
 c000958:	4a41      	ldr	r2, [pc, #260]	@ (c000a60 <Hacl_Impl_SHA2_256_init+0x36c>)
 c00095a:	601a      	str	r2, [r3, #0]
  p111[3U] = (uint32_t)0x8cc70208U;
 c00095c:	697b      	ldr	r3, [r7, #20]
 c00095e:	330c      	adds	r3, #12
 c000960:	4a40      	ldr	r2, [pc, #256]	@ (c000a64 <Hacl_Impl_SHA2_256_init+0x370>)
 c000962:	601a      	str	r2, [r3, #0]
  p212[0U] = (uint32_t)0x90befffaU;
 c000964:	693b      	ldr	r3, [r7, #16]
 c000966:	4a40      	ldr	r2, [pc, #256]	@ (c000a68 <Hacl_Impl_SHA2_256_init+0x374>)
 c000968:	601a      	str	r2, [r3, #0]
  p212[1U] = (uint32_t)0xa4506cebU;
 c00096a:	693b      	ldr	r3, [r7, #16]
 c00096c:	3304      	adds	r3, #4
 c00096e:	4a3f      	ldr	r2, [pc, #252]	@ (c000a6c <Hacl_Impl_SHA2_256_init+0x378>)
 c000970:	601a      	str	r2, [r3, #0]
  p212[2U] = (uint32_t)0xbef9a3f7U;
 c000972:	693b      	ldr	r3, [r7, #16]
 c000974:	e07c      	b.n	c000a70 <Hacl_Impl_SHA2_256_init+0x37c>
 c000976:	bf00      	nop
 c000978:	428a2f98 	.word	0x428a2f98
 c00097c:	71374491 	.word	0x71374491
 c000980:	b5c0fbcf 	.word	0xb5c0fbcf
 c000984:	e9b5dba5 	.word	0xe9b5dba5
 c000988:	3956c25b 	.word	0x3956c25b
 c00098c:	59f111f1 	.word	0x59f111f1
 c000990:	923f82a4 	.word	0x923f82a4
 c000994:	ab1c5ed5 	.word	0xab1c5ed5
 c000998:	d807aa98 	.word	0xd807aa98
 c00099c:	12835b01 	.word	0x12835b01
 c0009a0:	243185be 	.word	0x243185be
 c0009a4:	550c7dc3 	.word	0x550c7dc3
 c0009a8:	72be5d74 	.word	0x72be5d74
 c0009ac:	80deb1fe 	.word	0x80deb1fe
 c0009b0:	9bdc06a7 	.word	0x9bdc06a7
 c0009b4:	c19bf174 	.word	0xc19bf174
 c0009b8:	e49b69c1 	.word	0xe49b69c1
 c0009bc:	efbe4786 	.word	0xefbe4786
 c0009c0:	0fc19dc6 	.word	0x0fc19dc6
 c0009c4:	240ca1cc 	.word	0x240ca1cc
 c0009c8:	2de92c6f 	.word	0x2de92c6f
 c0009cc:	4a7484aa 	.word	0x4a7484aa
 c0009d0:	5cb0a9dc 	.word	0x5cb0a9dc
 c0009d4:	76f988da 	.word	0x76f988da
 c0009d8:	983e5152 	.word	0x983e5152
 c0009dc:	a831c66d 	.word	0xa831c66d
 c0009e0:	b00327c8 	.word	0xb00327c8
 c0009e4:	bf597fc7 	.word	0xbf597fc7
 c0009e8:	c6e00bf3 	.word	0xc6e00bf3
 c0009ec:	d5a79147 	.word	0xd5a79147
 c0009f0:	06ca6351 	.word	0x06ca6351
 c0009f4:	14292967 	.word	0x14292967
 c0009f8:	27b70a85 	.word	0x27b70a85
 c0009fc:	2e1b2138 	.word	0x2e1b2138
 c000a00:	4d2c6dfc 	.word	0x4d2c6dfc
 c000a04:	53380d13 	.word	0x53380d13
 c000a08:	650a7354 	.word	0x650a7354
 c000a0c:	766a0abb 	.word	0x766a0abb
 c000a10:	81c2c92e 	.word	0x81c2c92e
 c000a14:	92722c85 	.word	0x92722c85
 c000a18:	a2bfe8a1 	.word	0xa2bfe8a1
 c000a1c:	a81a664b 	.word	0xa81a664b
 c000a20:	c24b8b70 	.word	0xc24b8b70
 c000a24:	c76c51a3 	.word	0xc76c51a3
 c000a28:	d192e819 	.word	0xd192e819
 c000a2c:	d6990624 	.word	0xd6990624
 c000a30:	f40e3585 	.word	0xf40e3585
 c000a34:	106aa070 	.word	0x106aa070
 c000a38:	19a4c116 	.word	0x19a4c116
 c000a3c:	1e376c08 	.word	0x1e376c08
 c000a40:	2748774c 	.word	0x2748774c
 c000a44:	34b0bcb5 	.word	0x34b0bcb5
 c000a48:	391c0cb3 	.word	0x391c0cb3
 c000a4c:	4ed8aa4a 	.word	0x4ed8aa4a
 c000a50:	5b9cca4f 	.word	0x5b9cca4f
 c000a54:	682e6ff3 	.word	0x682e6ff3
 c000a58:	748f82ee 	.word	0x748f82ee
 c000a5c:	78a5636f 	.word	0x78a5636f
 c000a60:	84c87814 	.word	0x84c87814
 c000a64:	8cc70208 	.word	0x8cc70208
 c000a68:	90befffa 	.word	0x90befffa
 c000a6c:	a4506ceb 	.word	0xa4506ceb
 c000a70:	3308      	adds	r3, #8
 c000a72:	4a18      	ldr	r2, [pc, #96]	@ (c000ad4 <Hacl_Impl_SHA2_256_init+0x3e0>)
 c000a74:	601a      	str	r2, [r3, #0]
  p212[3U] = (uint32_t)0xc67178f2U;
 c000a76:	693b      	ldr	r3, [r7, #16]
 c000a78:	330c      	adds	r3, #12
 c000a7a:	4a17      	ldr	r2, [pc, #92]	@ (c000ad8 <Hacl_Impl_SHA2_256_init+0x3e4>)
 c000a7c:	601a      	str	r2, [r3, #0]
  uint32_t *p112 = h_01;
 c000a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 c000a82:	60fb      	str	r3, [r7, #12]
  uint32_t *p2 = h_01 + (uint32_t)4U;
 c000a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 c000a88:	3310      	adds	r3, #16
 c000a8a:	60bb      	str	r3, [r7, #8]
  p112[0U] = (uint32_t)0x6a09e667U;
 c000a8c:	68fb      	ldr	r3, [r7, #12]
 c000a8e:	4a13      	ldr	r2, [pc, #76]	@ (c000adc <Hacl_Impl_SHA2_256_init+0x3e8>)
 c000a90:	601a      	str	r2, [r3, #0]
  p112[1U] = (uint32_t)0xbb67ae85U;
 c000a92:	68fb      	ldr	r3, [r7, #12]
 c000a94:	3304      	adds	r3, #4
 c000a96:	4a12      	ldr	r2, [pc, #72]	@ (c000ae0 <Hacl_Impl_SHA2_256_init+0x3ec>)
 c000a98:	601a      	str	r2, [r3, #0]
  p112[2U] = (uint32_t)0x3c6ef372U;
 c000a9a:	68fb      	ldr	r3, [r7, #12]
 c000a9c:	3308      	adds	r3, #8
 c000a9e:	4a11      	ldr	r2, [pc, #68]	@ (c000ae4 <Hacl_Impl_SHA2_256_init+0x3f0>)
 c000aa0:	601a      	str	r2, [r3, #0]
  p112[3U] = (uint32_t)0xa54ff53aU;
 c000aa2:	68fb      	ldr	r3, [r7, #12]
 c000aa4:	330c      	adds	r3, #12
 c000aa6:	4a10      	ldr	r2, [pc, #64]	@ (c000ae8 <Hacl_Impl_SHA2_256_init+0x3f4>)
 c000aa8:	601a      	str	r2, [r3, #0]
  p2[0U] = (uint32_t)0x510e527fU;
 c000aaa:	68bb      	ldr	r3, [r7, #8]
 c000aac:	4a0f      	ldr	r2, [pc, #60]	@ (c000aec <Hacl_Impl_SHA2_256_init+0x3f8>)
 c000aae:	601a      	str	r2, [r3, #0]
  p2[1U] = (uint32_t)0x9b05688cU;
 c000ab0:	68bb      	ldr	r3, [r7, #8]
 c000ab2:	3304      	adds	r3, #4
 c000ab4:	4a0e      	ldr	r2, [pc, #56]	@ (c000af0 <Hacl_Impl_SHA2_256_init+0x3fc>)
 c000ab6:	601a      	str	r2, [r3, #0]
  p2[2U] = (uint32_t)0x1f83d9abU;
 c000ab8:	68bb      	ldr	r3, [r7, #8]
 c000aba:	3308      	adds	r3, #8
 c000abc:	4a0d      	ldr	r2, [pc, #52]	@ (c000af4 <Hacl_Impl_SHA2_256_init+0x400>)
 c000abe:	601a      	str	r2, [r3, #0]
  p2[3U] = (uint32_t)0x5be0cd19U;
 c000ac0:	68bb      	ldr	r3, [r7, #8]
 c000ac2:	330c      	adds	r3, #12
 c000ac4:	4a0c      	ldr	r2, [pc, #48]	@ (c000af8 <Hacl_Impl_SHA2_256_init+0x404>)
 c000ac6:	601a      	str	r2, [r3, #0]
}
 c000ac8:	bf00      	nop
 c000aca:	378c      	adds	r7, #140	@ 0x8c
 c000acc:	46bd      	mov	sp, r7
 c000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ad2:	4770      	bx	lr
 c000ad4:	bef9a3f7 	.word	0xbef9a3f7
 c000ad8:	c67178f2 	.word	0xc67178f2
 c000adc:	6a09e667 	.word	0x6a09e667
 c000ae0:	bb67ae85 	.word	0xbb67ae85
 c000ae4:	3c6ef372 	.word	0x3c6ef372
 c000ae8:	a54ff53a 	.word	0xa54ff53a
 c000aec:	510e527f 	.word	0x510e527f
 c000af0:	9b05688c 	.word	0x9b05688c
 c000af4:	1f83d9ab 	.word	0x1f83d9ab
 c000af8:	5be0cd19 	.word	0x5be0cd19

0c000afc <Hacl_Impl_SHA2_256_update>:

static void Hacl_Impl_SHA2_256_update(uint32_t *state, uint8_t *data)
{
 c000afc:	b580      	push	{r7, lr}
 c000afe:	b0bc      	sub	sp, #240	@ 0xf0
 c000b00:	af00      	add	r7, sp, #0
 c000b02:	6078      	str	r0, [r7, #4]
 c000b04:	6039      	str	r1, [r7, #0]
  uint32_t data_w[16U] = { 0U };
 c000b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 c000b0a:	2240      	movs	r2, #64	@ 0x40
 c000b0c:	2100      	movs	r1, #0
 c000b0e:	4618      	mov	r0, r3
 c000b10:	f008 fab9 	bl	c009086 <memset>
  Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(data_w, data, (uint32_t)16U);
 c000b14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 c000b18:	2210      	movs	r2, #16
 c000b1a:	6839      	ldr	r1, [r7, #0]
 c000b1c:	4618      	mov	r0, r3
 c000b1e:	f7ff fd80 	bl	c000622 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>
  uint32_t *hash_w = state + (uint32_t)128U;
 c000b22:	687b      	ldr	r3, [r7, #4]
 c000b24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 c000b28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t *ws_w = state + (uint32_t)64U;
 c000b2c:	687b      	ldr	r3, [r7, #4]
 c000b2e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 c000b32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t *k_w = state;
 c000b36:	687b      	ldr	r3, [r7, #4]
 c000b38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  uint32_t *counter_w = state + (uint32_t)136U;
 c000b3c:	687b      	ldr	r3, [r7, #4]
 c000b3e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 c000b42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b46:	2300      	movs	r3, #0
 c000b48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 c000b4c:	e014      	b.n	c000b78 <Hacl_Impl_SHA2_256_update+0x7c>
  {
    uint32_t b = data_w[i];
 c000b4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 c000b52:	009b      	lsls	r3, r3, #2
 c000b54:	33f0      	adds	r3, #240	@ 0xf0
 c000b56:	443b      	add	r3, r7
 c000b58:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 c000b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    ws_w[i] = b;
 c000b5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 c000b62:	009b      	lsls	r3, r3, #2
 c000b64:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 c000b68:	4413      	add	r3, r2
 c000b6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 c000b6c:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 c000b72:	3301      	adds	r3, #1
 c000b74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 c000b78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 c000b7c:	2b0f      	cmp	r3, #15
 c000b7e:	d9e6      	bls.n	c000b4e <Hacl_Impl_SHA2_256_update+0x52>
  }
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000b80:	2310      	movs	r3, #16
 c000b82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 c000b86:	e050      	b.n	c000c2a <Hacl_Impl_SHA2_256_update+0x12e>
  {
    uint32_t t16 = ws_w[i - (uint32_t)16U];
 c000b88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 c000b8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c000b90:	3b10      	subs	r3, #16
 c000b92:	009b      	lsls	r3, r3, #2
 c000b94:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 c000b98:	4413      	add	r3, r2
 c000b9a:	681b      	ldr	r3, [r3, #0]
 c000b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t t15 = ws_w[i - (uint32_t)15U];
 c000b9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 c000ba2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c000ba6:	3b0f      	subs	r3, #15
 c000ba8:	009b      	lsls	r3, r3, #2
 c000baa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 c000bae:	4413      	add	r3, r2
 c000bb0:	681b      	ldr	r3, [r3, #0]
 c000bb2:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t t7 = ws_w[i - (uint32_t)7U];
 c000bb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 c000bb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c000bbc:	3b07      	subs	r3, #7
 c000bbe:	009b      	lsls	r3, r3, #2
 c000bc0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 c000bc4:	4413      	add	r3, r2
 c000bc6:	681b      	ldr	r3, [r3, #0]
 c000bc8:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t t2 = ws_w[i - (uint32_t)2U];
 c000bca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 c000bce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c000bd2:	3b02      	subs	r3, #2
 c000bd4:	009b      	lsls	r3, r3, #2
 c000bd6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 c000bda:	4413      	add	r3, r2
 c000bdc:	681b      	ldr	r3, [r3, #0]
 c000bde:	673b      	str	r3, [r7, #112]	@ 0x70
    ws_w[i] =
      ((t2 >> (uint32_t)17U | t2 << ((uint32_t)32U - (uint32_t)17U))
 c000be0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 c000be2:	ea4f 4273 	mov.w	r2, r3, ror #17
      ^ ((t2 >> (uint32_t)19U | t2 << ((uint32_t)32U - (uint32_t)19U)) ^ t2 >> (uint32_t)10U))
 c000be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 c000be8:	ea4f 41f3 	mov.w	r1, r3, ror #19
 c000bec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 c000bee:	0a9b      	lsrs	r3, r3, #10
 c000bf0:	404b      	eors	r3, r1
 c000bf2:	405a      	eors	r2, r3
      +
 c000bf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 c000bf6:	441a      	add	r2, r3
        t7
        +
          ((t15 >> (uint32_t)7U | t15 << ((uint32_t)32U - (uint32_t)7U))
 c000bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 c000bfa:	ea4f 11f3 	mov.w	r1, r3, ror #7
          ^ ((t15 >> (uint32_t)18U | t15 << ((uint32_t)32U - (uint32_t)18U)) ^ t15 >> (uint32_t)3U))
 c000bfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 c000c00:	ea4f 40b3 	mov.w	r0, r3, ror #18
 c000c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 c000c06:	08db      	lsrs	r3, r3, #3
 c000c08:	4043      	eors	r3, r0
 c000c0a:	404b      	eors	r3, r1
        +
 c000c0c:	18d1      	adds	r1, r2, r3
    ws_w[i] =
 c000c0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 c000c12:	009b      	lsls	r3, r3, #2
 c000c14:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 c000c18:	4413      	add	r3, r2
          + t16;
 c000c1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 c000c1c:	440a      	add	r2, r1
    ws_w[i] =
 c000c1e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 c000c24:	3301      	adds	r3, #1
 c000c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 c000c2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 c000c2e:	2b3f      	cmp	r3, #63	@ 0x3f
 c000c30:	d9aa      	bls.n	c000b88 <Hacl_Impl_SHA2_256_update+0x8c>
  }
  uint32_t hash_0[8U] = { 0U };
 c000c32:	f107 030c 	add.w	r3, r7, #12
 c000c36:	2220      	movs	r2, #32
 c000c38:	2100      	movs	r1, #0
 c000c3a:	4618      	mov	r0, r3
 c000c3c:	f008 fa23 	bl	c009086 <memset>
  memcpy(hash_0, hash_w, (uint32_t)8U * sizeof hash_w[0U]);
 c000c40:	f107 030c 	add.w	r3, r7, #12
 c000c44:	2220      	movs	r2, #32
 c000c46:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 c000c4a:	4618      	mov	r0, r3
 c000c4c:	f008 fa97 	bl	c00917e <memcpy>
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c50:	2300      	movs	r3, #0
 c000c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 c000c56:	e0b8      	b.n	c000dca <Hacl_Impl_SHA2_256_update+0x2ce>
  {
    uint32_t a = hash_0[0U];
 c000c58:	68fb      	ldr	r3, [r7, #12]
 c000c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    uint32_t b = hash_0[1U];
 c000c5e:	693b      	ldr	r3, [r7, #16]
 c000c60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    uint32_t c = hash_0[2U];
 c000c64:	697b      	ldr	r3, [r7, #20]
 c000c66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint32_t d = hash_0[3U];
 c000c6a:	69bb      	ldr	r3, [r7, #24]
 c000c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint32_t e = hash_0[4U];
 c000c70:	69fb      	ldr	r3, [r7, #28]
 c000c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint32_t f1 = hash_0[5U];
 c000c76:	6a3b      	ldr	r3, [r7, #32]
 c000c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    uint32_t g = hash_0[6U];
 c000c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c000c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    uint32_t h = hash_0[7U];
 c000c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c000c84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    uint32_t kt = k_w[i];
 c000c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c000c8c:	009b      	lsls	r3, r3, #2
 c000c8e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 c000c92:	4413      	add	r3, r2
 c000c94:	681b      	ldr	r3, [r3, #0]
 c000c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint32_t wst = ws_w[i];
 c000c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c000c9e:	009b      	lsls	r3, r3, #2
 c000ca0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 c000ca4:	4413      	add	r3, r2
 c000ca6:	681b      	ldr	r3, [r3, #0]
 c000ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    uint32_t
    t1 =
      h
      +
        ((e >> (uint32_t)6U | e << ((uint32_t)32U - (uint32_t)6U))
 c000cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c000cb0:	ea4f 12b3 	mov.w	r2, r3, ror #6
        ^
          ((e >> (uint32_t)11U | e << ((uint32_t)32U - (uint32_t)11U))
 c000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c000cb8:	ea4f 21f3 	mov.w	r1, r3, ror #11
          ^ (e >> (uint32_t)25U | e << ((uint32_t)32U - (uint32_t)25U))))
 c000cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c000cc0:	ea4f 6373 	mov.w	r3, r3, ror #25
 c000cc4:	404b      	eors	r3, r1
        ^
 c000cc6:	405a      	eors	r2, r3
      +
 c000cc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 c000ccc:	441a      	add	r2, r3
      + ((e & f1) ^ (~e & g))
 c000cce:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 c000cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 c000cd6:	4019      	ands	r1, r3
 c000cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c000cdc:	43d8      	mvns	r0, r3
 c000cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 c000ce2:	4003      	ands	r3, r0
 c000ce4:	404b      	eors	r3, r1
 c000ce6:	441a      	add	r2, r3
      + kt
 c000ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 c000cec:	4413      	add	r3, r2
    t1 =
 c000cee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 c000cf2:	4413      	add	r3, r2
 c000cf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      + wst;
    uint32_t
    t2 =
      ((a >> (uint32_t)2U | a << ((uint32_t)32U - (uint32_t)2U))
 c000cf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c000cfc:	ea4f 02b3 	mov.w	r2, r3, ror #2
      ^
        ((a >> (uint32_t)13U | a << ((uint32_t)32U - (uint32_t)13U))
 c000d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c000d04:	ea4f 3173 	mov.w	r1, r3, ror #13
        ^ (a >> (uint32_t)22U | a << ((uint32_t)32U - (uint32_t)22U))))
 c000d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c000d0c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 c000d10:	404b      	eors	r3, r1
      ^
 c000d12:	405a      	eors	r2, r3
      + ((a & b) ^ ((a & c) ^ (b & c)));
 c000d14:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 c000d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 c000d1c:	4019      	ands	r1, r3
 c000d1e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 c000d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 c000d26:	4058      	eors	r0, r3
 c000d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 c000d2c:	4003      	ands	r3, r0
 c000d2e:	404b      	eors	r3, r1
    t2 =
 c000d30:	4413      	add	r3, r2
 c000d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint32_t x1 = t1 + t2;
 c000d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 c000d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c000d3e:	4413      	add	r3, r2
 c000d40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t x5 = d + t1;
 c000d44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 c000d48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 c000d4c:	4413      	add	r3, r2
 c000d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t *p1 = hash_0;
 c000d52:	f107 030c 	add.w	r3, r7, #12
 c000d56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t *p2 = hash_0 + (uint32_t)4U;
 c000d5a:	f107 030c 	add.w	r3, r7, #12
 c000d5e:	3310      	adds	r3, #16
 c000d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    p1[0U] = x1;
 c000d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 c000d68:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 c000d6c:	601a      	str	r2, [r3, #0]
    p1[1U] = a;
 c000d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 c000d72:	3304      	adds	r3, #4
 c000d74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 c000d78:	601a      	str	r2, [r3, #0]
    p1[2U] = b;
 c000d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 c000d7e:	3308      	adds	r3, #8
 c000d80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 c000d84:	601a      	str	r2, [r3, #0]
    p1[3U] = c;
 c000d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 c000d8a:	330c      	adds	r3, #12
 c000d8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 c000d90:	601a      	str	r2, [r3, #0]
    p2[0U] = x5;
 c000d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 c000d96:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 c000d9a:	601a      	str	r2, [r3, #0]
    p2[1U] = e;
 c000d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 c000da0:	3304      	adds	r3, #4
 c000da2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 c000da6:	601a      	str	r2, [r3, #0]
    p2[2U] = f1;
 c000da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 c000dac:	3308      	adds	r3, #8
 c000dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 c000db2:	601a      	str	r2, [r3, #0]
    p2[3U] = g;
 c000db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 c000db8:	330c      	adds	r3, #12
 c000dba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 c000dbe:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c000dc4:	3301      	adds	r3, #1
 c000dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 c000dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c000dce:	2b3f      	cmp	r3, #63	@ 0x3f
 c000dd0:	f67f af42 	bls.w	c000c58 <Hacl_Impl_SHA2_256_update+0x15c>
  }
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000dd4:	2300      	movs	r3, #0
 c000dd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 c000dda:	e022      	b.n	c000e22 <Hacl_Impl_SHA2_256_update+0x326>
  {
    uint32_t xi = hash_w[i];
 c000ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 c000de0:	009b      	lsls	r3, r3, #2
 c000de2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 c000de6:	4413      	add	r3, r2
 c000de8:	681b      	ldr	r3, [r3, #0]
 c000dea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    uint32_t yi = hash_0[i];
 c000dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 c000df2:	009b      	lsls	r3, r3, #2
 c000df4:	33f0      	adds	r3, #240	@ 0xf0
 c000df6:	443b      	add	r3, r7
 c000df8:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 c000dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    hash_w[i] = xi + yi;
 c000e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 c000e04:	009b      	lsls	r3, r3, #2
 c000e06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 c000e0a:	4413      	add	r3, r2
 c000e0c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 c000e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 c000e14:	440a      	add	r2, r1
 c000e16:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 c000e1c:	3301      	adds	r3, #1
 c000e1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 c000e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 c000e26:	2b07      	cmp	r3, #7
 c000e28:	d9d8      	bls.n	c000ddc <Hacl_Impl_SHA2_256_update+0x2e0>
  }
  uint32_t c0 = counter_w[0U];
 c000e2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 c000e2e:	681b      	ldr	r3, [r3, #0]
 c000e30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  uint32_t one1 = (uint32_t)1U;
 c000e34:	2301      	movs	r3, #1
 c000e36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  counter_w[0U] = c0 + one1;
 c000e3a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 c000e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 c000e42:	441a      	add	r2, r3
 c000e44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 c000e48:	601a      	str	r2, [r3, #0]
}
 c000e4a:	bf00      	nop
 c000e4c:	37f0      	adds	r7, #240	@ 0xf0
 c000e4e:	46bd      	mov	sp, r7
 c000e50:	bd80      	pop	{r7, pc}

0c000e52 <Hacl_Impl_SHA2_256_update_multi>:

static void Hacl_Impl_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1)
{
 c000e52:	b580      	push	{r7, lr}
 c000e54:	b086      	sub	sp, #24
 c000e56:	af00      	add	r7, sp, #0
 c000e58:	60f8      	str	r0, [r7, #12]
 c000e5a:	60b9      	str	r1, [r7, #8]
 c000e5c:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e5e:	2300      	movs	r3, #0
 c000e60:	617b      	str	r3, [r7, #20]
 c000e62:	e00b      	b.n	c000e7c <Hacl_Impl_SHA2_256_update_multi+0x2a>
  {
    uint8_t *b = data + i * (uint32_t)64U;
 c000e64:	697b      	ldr	r3, [r7, #20]
 c000e66:	019b      	lsls	r3, r3, #6
 c000e68:	68ba      	ldr	r2, [r7, #8]
 c000e6a:	4413      	add	r3, r2
 c000e6c:	613b      	str	r3, [r7, #16]
    Hacl_Impl_SHA2_256_update(state, b);
 c000e6e:	6939      	ldr	r1, [r7, #16]
 c000e70:	68f8      	ldr	r0, [r7, #12]
 c000e72:	f7ff fe43 	bl	c000afc <Hacl_Impl_SHA2_256_update>
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e76:	697b      	ldr	r3, [r7, #20]
 c000e78:	3301      	adds	r3, #1
 c000e7a:	617b      	str	r3, [r7, #20]
 c000e7c:	697a      	ldr	r2, [r7, #20]
 c000e7e:	687b      	ldr	r3, [r7, #4]
 c000e80:	429a      	cmp	r2, r3
 c000e82:	d3ef      	bcc.n	c000e64 <Hacl_Impl_SHA2_256_update_multi+0x12>
  }
}
 c000e84:	bf00      	nop
 c000e86:	bf00      	nop
 c000e88:	3718      	adds	r7, #24
 c000e8a:	46bd      	mov	sp, r7
 c000e8c:	bd80      	pop	{r7, pc}

0c000e8e <Hacl_Impl_SHA2_256_update_last>:

static void Hacl_Impl_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len)
{
 c000e8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c000e92:	b0ba      	sub	sp, #232	@ 0xe8
 c000e94:	af00      	add	r7, sp, #0
 c000e96:	6278      	str	r0, [r7, #36]	@ 0x24
 c000e98:	6239      	str	r1, [r7, #32]
 c000e9a:	61fa      	str	r2, [r7, #28]
  uint8_t blocks[128U] = { 0U };
 c000e9c:	2300      	movs	r3, #0
 c000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 c000ea0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 c000ea4:	237c      	movs	r3, #124	@ 0x7c
 c000ea6:	461a      	mov	r2, r3
 c000ea8:	2100      	movs	r1, #0
 c000eaa:	f008 f8ec 	bl	c009086 <memset>
  uint32_t nb;
  if (len < (uint32_t)56U)
 c000eae:	69fb      	ldr	r3, [r7, #28]
 c000eb0:	2b37      	cmp	r3, #55	@ 0x37
 c000eb2:	d803      	bhi.n	c000ebc <Hacl_Impl_SHA2_256_update_last+0x2e>
    nb = (uint32_t)1U;
 c000eb4:	2301      	movs	r3, #1
 c000eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 c000eba:	e002      	b.n	c000ec2 <Hacl_Impl_SHA2_256_update_last+0x34>
  else
    nb = (uint32_t)2U;
 c000ebc:	2302      	movs	r3, #2
 c000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint8_t *final_blocks;
  if (len < (uint32_t)56U)
 c000ec2:	69fb      	ldr	r3, [r7, #28]
 c000ec4:	2b37      	cmp	r3, #55	@ 0x37
 c000ec6:	d805      	bhi.n	c000ed4 <Hacl_Impl_SHA2_256_update_last+0x46>
    final_blocks = blocks + (uint32_t)64U;
 c000ec8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 c000ecc:	3340      	adds	r3, #64	@ 0x40
 c000ece:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 c000ed2:	e003      	b.n	c000edc <Hacl_Impl_SHA2_256_update_last+0x4e>
  else
    final_blocks = blocks;
 c000ed4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 c000ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  memcpy(final_blocks, data, len * sizeof data[0U]);
 c000edc:	69fa      	ldr	r2, [r7, #28]
 c000ede:	6a39      	ldr	r1, [r7, #32]
 c000ee0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 c000ee4:	f008 f94b 	bl	c00917e <memcpy>
  uint32_t n1 = state[136U];
 c000ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c000eea:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 c000eee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint8_t *padding = final_blocks + len;
 c000ef2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 c000ef6:	69fb      	ldr	r3, [r7, #28]
 c000ef8:	4413      	add	r3, r2
 c000efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t
  pad0len = ((uint32_t)64U - (len + (uint32_t)8U + (uint32_t)1U) % (uint32_t)64U) % (uint32_t)64U;
 c000efe:	69fa      	ldr	r2, [r7, #28]
 c000f00:	f06f 0308 	mvn.w	r3, #8
 c000f04:	1a9b      	subs	r3, r3, r2
 c000f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 c000f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  uint8_t *buf1 = padding;
 c000f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 c000f12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  uint8_t *buf2 = padding + (uint32_t)1U + pad0len;
 c000f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c000f1a:	3301      	adds	r3, #1
 c000f1c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 c000f20:	4413      	add	r3, r2
 c000f22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  uint64_t
  encodedlen = ((uint64_t)n1 * (uint64_t)(uint32_t)64U + (uint64_t)len) * (uint64_t)(uint32_t)8U;
 c000f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c000f2a:	2200      	movs	r2, #0
 c000f2c:	4698      	mov	r8, r3
 c000f2e:	4691      	mov	r9, r2
 c000f30:	f04f 0200 	mov.w	r2, #0
 c000f34:	f04f 0300 	mov.w	r3, #0
 c000f38:	ea4f 1389 	mov.w	r3, r9, lsl #6
 c000f3c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 c000f40:	ea4f 1288 	mov.w	r2, r8, lsl #6
 c000f44:	69f9      	ldr	r1, [r7, #28]
 c000f46:	2000      	movs	r0, #0
 c000f48:	6139      	str	r1, [r7, #16]
 c000f4a:	6178      	str	r0, [r7, #20]
 c000f4c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 c000f50:	4641      	mov	r1, r8
 c000f52:	1854      	adds	r4, r2, r1
 c000f54:	4649      	mov	r1, r9
 c000f56:	eb43 0101 	adc.w	r1, r3, r1
 c000f5a:	460d      	mov	r5, r1
 c000f5c:	f04f 0200 	mov.w	r2, #0
 c000f60:	f04f 0300 	mov.w	r3, #0
 c000f64:	00eb      	lsls	r3, r5, #3
 c000f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c000f6a:	00e2      	lsls	r2, r4, #3
 c000f6c:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
  buf1[0U] = (uint8_t)0x80U;
 c000f70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 c000f74:	2280      	movs	r2, #128	@ 0x80
 c000f76:	701a      	strb	r2, [r3, #0]
  store64_be(buf2, encodedlen);
 c000f78:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 c000f7c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
 c000f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 c000f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 c000f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 c000f8c:	0e1a      	lsrs	r2, r3, #24
 c000f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 c000f92:	0a1b      	lsrs	r3, r3, #8
 c000f94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 c000f98:	431a      	orrs	r2, r3
 c000f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 c000f9e:	021b      	lsls	r3, r3, #8
 c000fa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 c000fa4:	431a      	orrs	r2, r3
 c000fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 c000faa:	061b      	lsls	r3, r3, #24
 c000fac:	4313      	orrs	r3, r2
 c000fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 c000fb2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 c000fb6:	f04f 0200 	mov.w	r2, #0
 c000fba:	f04f 0300 	mov.w	r3, #0
 c000fbe:	000a      	movs	r2, r1
 c000fc0:	2300      	movs	r3, #0
 c000fc2:	4613      	mov	r3, r2
 c000fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c000fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c000fcc:	0e1a      	lsrs	r2, r3, #24
 c000fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c000fd2:	0a1b      	lsrs	r3, r3, #8
 c000fd4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 c000fd8:	431a      	orrs	r2, r3
 c000fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c000fde:	021b      	lsls	r3, r3, #8
 c000fe0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 c000fe4:	431a      	orrs	r2, r3
 c000fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c000fea:	061b      	lsls	r3, r3, #24
 c000fec:	4313      	orrs	r3, r2
 c000fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 c000ff2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c000ff6:	2200      	movs	r2, #0
 c000ff8:	60bb      	str	r3, [r7, #8]
 c000ffa:	60fa      	str	r2, [r7, #12]
 c000ffc:	f04f 0200 	mov.w	r2, #0
 c001000:	f04f 0300 	mov.w	r3, #0
 c001004:	68b9      	ldr	r1, [r7, #8]
 c001006:	000b      	movs	r3, r1
 c001008:	2200      	movs	r2, #0
 c00100a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 c00100e:	2000      	movs	r0, #0
 c001010:	468a      	mov	sl, r1
 c001012:	4683      	mov	fp, r0
 c001014:	ea42 010a 	orr.w	r1, r2, sl
 c001018:	6039      	str	r1, [r7, #0]
 c00101a:	ea43 030b 	orr.w	r3, r3, fp
 c00101e:	607b      	str	r3, [r7, #4]
 c001020:	e9d7 2300 	ldrd	r2, r3, [r7]
 c001024:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 c001028:	f7ff faea 	bl	c000600 <store64>
  Hacl_Impl_SHA2_256_update_multi(state, final_blocks, nb);
 c00102c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 c001030:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 c001034:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 c001036:	f7ff ff0c 	bl	c000e52 <Hacl_Impl_SHA2_256_update_multi>
}
 c00103a:	bf00      	nop
 c00103c:	37e8      	adds	r7, #232	@ 0xe8
 c00103e:	46bd      	mov	sp, r7
 c001040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c001044 <Hacl_Impl_SHA2_256_finish>:

static void Hacl_Impl_SHA2_256_finish(uint32_t *state, uint8_t *hash1)
{
 c001044:	b580      	push	{r7, lr}
 c001046:	b084      	sub	sp, #16
 c001048:	af00      	add	r7, sp, #0
 c00104a:	6078      	str	r0, [r7, #4]
 c00104c:	6039      	str	r1, [r7, #0]
  uint32_t *hash_w = state + (uint32_t)128U;
 c00104e:	687b      	ldr	r3, [r7, #4]
 c001050:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 c001054:	60fb      	str	r3, [r7, #12]
  Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(hash1, hash_w, (uint32_t)8U);
 c001056:	2208      	movs	r2, #8
 c001058:	68f9      	ldr	r1, [r7, #12]
 c00105a:	6838      	ldr	r0, [r7, #0]
 c00105c:	f7ff fb15 	bl	c00068a <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>
}
 c001060:	bf00      	nop
 c001062:	3710      	adds	r7, #16
 c001064:	46bd      	mov	sp, r7
 c001066:	bd80      	pop	{r7, pc}

0c001068 <Hacl_Impl_SHA2_256_hash>:

static void Hacl_Impl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001068:	b580      	push	{r7, lr}
 c00106a:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 c00106e:	af00      	add	r7, sp, #0
 c001070:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 c001074:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 c001078:	6018      	str	r0, [r3, #0]
 c00107a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 c00107e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 c001082:	6019      	str	r1, [r3, #0]
 c001084:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 c001088:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 c00108c:	601a      	str	r2, [r3, #0]
  uint32_t state[137U] = { 0U };
 c00108e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 c001092:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 c001096:	4618      	mov	r0, r3
 c001098:	f44f 7309 	mov.w	r3, #548	@ 0x224
 c00109c:	461a      	mov	r2, r3
 c00109e:	2100      	movs	r1, #0
 c0010a0:	f007 fff1 	bl	c009086 <memset>
  uint32_t n1 = len / (uint32_t)64U;
 c0010a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 c0010a8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 c0010ac:	681b      	ldr	r3, [r3, #0]
 c0010ae:	099b      	lsrs	r3, r3, #6
 c0010b0:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  uint32_t r = len % (uint32_t)64U;
 c0010b4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 c0010b8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 c0010bc:	681b      	ldr	r3, [r3, #0]
 c0010be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 c0010c2:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  uint8_t *input_blocks = input;
 c0010c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 c0010ca:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 c0010ce:	681b      	ldr	r3, [r3, #0]
 c0010d0:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint8_t *input_last = input + n1 * (uint32_t)64U;
 c0010d4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 c0010d8:	019b      	lsls	r3, r3, #6
 c0010da:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 c0010de:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 c0010e2:	6812      	ldr	r2, [r2, #0]
 c0010e4:	4413      	add	r3, r2
 c0010e6:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  Hacl_Impl_SHA2_256_init(state);
 c0010ea:	f107 0314 	add.w	r3, r7, #20
 c0010ee:	4618      	mov	r0, r3
 c0010f0:	f7ff fb00 	bl	c0006f4 <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update_multi(state, input_blocks, n1);
 c0010f4:	f107 0314 	add.w	r3, r7, #20
 c0010f8:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 c0010fc:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 c001100:	4618      	mov	r0, r3
 c001102:	f7ff fea6 	bl	c000e52 <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state, input_last, r);
 c001106:	f107 0314 	add.w	r3, r7, #20
 c00110a:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 c00110e:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 c001112:	4618      	mov	r0, r3
 c001114:	f7ff febb 	bl	c000e8e <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state, hash1);
 c001118:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 c00111c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 c001120:	f107 0214 	add.w	r2, r7, #20
 c001124:	6819      	ldr	r1, [r3, #0]
 c001126:	4610      	mov	r0, r2
 c001128:	f7ff ff8c 	bl	c001044 <Hacl_Impl_SHA2_256_finish>
}
 c00112c:	bf00      	nop
 c00112e:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 c001132:	46bd      	mov	sp, r7
 c001134:	bd80      	pop	{r7, pc}

0c001136 <Hacl_SHA2_256_hash>:
{
  Hacl_Impl_SHA2_256_finish(state, hash1);
}

void Hacl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001136:	b580      	push	{r7, lr}
 c001138:	b084      	sub	sp, #16
 c00113a:	af00      	add	r7, sp, #0
 c00113c:	60f8      	str	r0, [r7, #12]
 c00113e:	60b9      	str	r1, [r7, #8]
 c001140:	607a      	str	r2, [r7, #4]
  Hacl_Impl_SHA2_256_hash(hash1, input, len);
 c001142:	687a      	ldr	r2, [r7, #4]
 c001144:	68b9      	ldr	r1, [r7, #8]
 c001146:	68f8      	ldr	r0, [r7, #12]
 c001148:	f7ff ff8e 	bl	c001068 <Hacl_Impl_SHA2_256_hash>
}
 c00114c:	bf00      	nop
 c00114e:	3710      	adds	r7, #16
 c001150:	46bd      	mov	sp, r7
 c001152:	bd80      	pop	{r7, pc}

0c001154 <_setup_data>:
	----------------------------- SUPERVISOR  --------------------------------------------
	---------------------------------------------------------------------------------
*/

//-------------------------- UTILS -------//
void _setup_data(){
 c001154:	b480      	push	{r7}
 c001156:	b083      	sub	sp, #12
 c001158:	af00      	add	r7, sp, #0
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c00115a:	2300      	movs	r3, #0
 c00115c:	607b      	str	r3, [r7, #4]
 c00115e:	e014      	b.n	c00118a <_setup_data+0x36>
		cfa_engine_conf.hash_key[i] = i;
 c001160:	687b      	ldr	r3, [r7, #4]
 c001162:	b2d9      	uxtb	r1, r3
 c001164:	4a0e      	ldr	r2, [pc, #56]	@ (c0011a0 <_setup_data+0x4c>)
 c001166:	687b      	ldr	r3, [r7, #4]
 c001168:	4413      	add	r3, r2
 c00116a:	334a      	adds	r3, #74	@ 0x4a
 c00116c:	460a      	mov	r2, r1
 c00116e:	701a      	strb	r2, [r3, #0]
		cfa_engine_conf.challenge[i] = 0x65+i;
 c001170:	687b      	ldr	r3, [r7, #4]
 c001172:	b2db      	uxtb	r3, r3
 c001174:	3365      	adds	r3, #101	@ 0x65
 c001176:	b2d9      	uxtb	r1, r3
 c001178:	4a09      	ldr	r2, [pc, #36]	@ (c0011a0 <_setup_data+0x4c>)
 c00117a:	687b      	ldr	r3, [r7, #4]
 c00117c:	4413      	add	r3, r2
 c00117e:	3308      	adds	r3, #8
 c001180:	460a      	mov	r2, r1
 c001182:	701a      	strb	r2, [r3, #0]
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c001184:	687b      	ldr	r3, [r7, #4]
 c001186:	3301      	adds	r3, #1
 c001188:	607b      	str	r3, [r7, #4]
 c00118a:	687b      	ldr	r3, [r7, #4]
 c00118c:	2b3f      	cmp	r3, #63	@ 0x3f
 c00118e:	d9e7      	bls.n	c001160 <_setup_data+0xc>
	}
}
 c001190:	bf00      	nop
 c001192:	bf00      	nop
 c001194:	370c      	adds	r7, #12
 c001196:	46bd      	mov	sp, r7
 c001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00119c:	4770      	bx	lr
 c00119e:	bf00      	nop
 c0011a0:	30000698 	.word	0x30000698

0c0011a4 <_update_challenge>:

void _update_challenge(uint8_t* chl){
 c0011a4:	b4f0      	push	{r4, r5, r6, r7}
 c0011a6:	b082      	sub	sp, #8
 c0011a8:	af00      	add	r7, sp, #0
 c0011aa:	6078      	str	r0, [r7, #4]
	memcpy(cfa_engine_conf.challenge,chl, CHAL_SIZE);
 c0011ac:	4b15      	ldr	r3, [pc, #84]	@ (c001204 <_update_challenge+0x60>)
 c0011ae:	687a      	ldr	r2, [r7, #4]
 c0011b0:	4614      	mov	r4, r2
 c0011b2:	f103 0608 	add.w	r6, r3, #8
 c0011b6:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 c0011ba:	4635      	mov	r5, r6
 c0011bc:	4623      	mov	r3, r4
 c0011be:	6818      	ldr	r0, [r3, #0]
 c0011c0:	6859      	ldr	r1, [r3, #4]
 c0011c2:	689a      	ldr	r2, [r3, #8]
 c0011c4:	68db      	ldr	r3, [r3, #12]
 c0011c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c0011c8:	3410      	adds	r4, #16
 c0011ca:	3610      	adds	r6, #16
 c0011cc:	4564      	cmp	r4, ip
 c0011ce:	d1f4      	bne.n	c0011ba <_update_challenge+0x16>
	memcpy(vrf_resp.new_challenge,chl, CHAL_SIZE);
 c0011d0:	4a0d      	ldr	r2, [pc, #52]	@ (c001208 <_update_challenge+0x64>)
 c0011d2:	687b      	ldr	r3, [r7, #4]
 c0011d4:	461c      	mov	r4, r3
 c0011d6:	4616      	mov	r6, r2
 c0011d8:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 c0011dc:	4635      	mov	r5, r6
 c0011de:	4623      	mov	r3, r4
 c0011e0:	6818      	ldr	r0, [r3, #0]
 c0011e2:	6859      	ldr	r1, [r3, #4]
 c0011e4:	689a      	ldr	r2, [r3, #8]
 c0011e6:	68db      	ldr	r3, [r3, #12]
 c0011e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c0011ea:	3410      	adds	r4, #16
 c0011ec:	3610      	adds	r6, #16
 c0011ee:	4564      	cmp	r4, ip
 c0011f0:	d1f4      	bne.n	c0011dc <_update_challenge+0x38>
	cfa_engine_conf.challenge_renewed = TRUE;
 c0011f2:	4b04      	ldr	r3, [pc, #16]	@ (c001204 <_update_challenge+0x60>)
 c0011f4:	2201      	movs	r2, #1
 c0011f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 c0011fa:	bf00      	nop
 c0011fc:	3708      	adds	r7, #8
 c0011fe:	46bd      	mov	sp, r7
 c001200:	bcf0      	pop	{r4, r5, r6, r7}
 c001202:	4770      	bx	lr
 c001204:	30000698 	.word	0x30000698
 c001208:	30000890 	.word	0x30000890

0c00120c <_clean>:

void _clean(){
 c00120c:	b480      	push	{r7}
 c00120e:	b083      	sub	sp, #12
 c001210:	af00      	add	r7, sp, #0
	report_secure.number_of_logs_sent = 0;
 c001212:	4b17      	ldr	r3, [pc, #92]	@ (c001270 <_clean+0x64>)
 c001214:	2200      	movs	r2, #0
 c001216:	f8a3 2166 	strh.w	r2, [r3, #358]	@ 0x166
	cfa_engine_conf.initialized = INITIALIZED;
 c00121a:	4b16      	ldr	r3, [pc, #88]	@ (c001274 <_clean+0x68>)
 c00121c:	22ee      	movs	r2, #238	@ 0xee
 c00121e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	cfa_engine_conf.attestation_status = INACTIVE;
 c001222:	4b14      	ldr	r3, [pc, #80]	@ (c001274 <_clean+0x68>)
 c001224:	2200      	movs	r2, #0
 c001226:	711a      	strb	r2, [r3, #4]
	report_secure.num_CF_Log_size = -1;
 c001228:	4b11      	ldr	r3, [pc, #68]	@ (c001270 <_clean+0x64>)
 c00122a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 c00122e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	cfa_engine_conf.challenge_renewed = FALSE;
 c001232:	4b10      	ldr	r3, [pc, #64]	@ (c001274 <_clean+0x68>)
 c001234:	2200      	movs	r2, #0
 c001236:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	report_secure.isFinal = FALSE;
 c00123a:	4b0d      	ldr	r3, [pc, #52]	@ (c001270 <_clean+0x64>)
 c00123c:	2200      	movs	r2, #0
 c00123e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	#if CFLOG_TYPE == CFLOG_RAM
	for(int i=0; i<MAX_LOG_SIZE_BYTES; i++) report_secure.CFLog[i] = 0;
 c001242:	2300      	movs	r3, #0
 c001244:	607b      	str	r3, [r7, #4]
 c001246:	e008      	b.n	c00125a <_clean+0x4e>
 c001248:	4a09      	ldr	r2, [pc, #36]	@ (c001270 <_clean+0x64>)
 c00124a:	687b      	ldr	r3, [r7, #4]
 c00124c:	4413      	add	r3, r2
 c00124e:	3364      	adds	r3, #100	@ 0x64
 c001250:	2200      	movs	r2, #0
 c001252:	701a      	strb	r2, [r3, #0]
 c001254:	687b      	ldr	r3, [r7, #4]
 c001256:	3301      	adds	r3, #1
 c001258:	607b      	str	r3, [r7, #4]
 c00125a:	687b      	ldr	r3, [r7, #4]
 c00125c:	2bff      	cmp	r3, #255	@ 0xff
 c00125e:	ddf3      	ble.n	c001248 <_clean+0x3c>
	#endif
}
 c001260:	bf00      	nop
 c001262:	bf00      	nop
 c001264:	370c      	adds	r7, #12
 c001266:	46bd      	mov	sp, r7
 c001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00126c:	4770      	bx	lr
 c00126e:	bf00      	nop
 c001270:	30000724 	.word	0x30000724
 c001274:	30000698 	.word	0x30000698

0c001278 <_run_application>:

void _run_application(){
 c001278:	b598      	push	{r3, r4, r7, lr}
 c00127a:	af00      	add	r7, sp, #0
	//start app
	if (cfa_engine_conf.iac.app_start_address != NULL){
 c00127c:	4b18      	ldr	r3, [pc, #96]	@ (c0012e0 <_run_application+0x68>)
 c00127e:	681b      	ldr	r3, [r3, #0]
 c001280:	2b00      	cmp	r3, #0
 c001282:	d02b      	beq.n	c0012dc <_run_application+0x64>
		cfa_engine_conf.iac.app_start_address();
 c001284:	4b16      	ldr	r3, [pc, #88]	@ (c0012e0 <_run_application+0x68>)
 c001286:	681b      	ldr	r3, [r3, #0]
 c001288:	461c      	mov	r4, r3
 c00128a:	0864      	lsrs	r4, r4, #1
 c00128c:	0064      	lsls	r4, r4, #1
 c00128e:	4620      	mov	r0, r4
 c001290:	4621      	mov	r1, r4
 c001292:	4622      	mov	r2, r4
 c001294:	4623      	mov	r3, r4
 c001296:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c00129a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c00129e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0012a2:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0012a6:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0012aa:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0012ae:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0012b2:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0012b6:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0012ba:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0012be:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0012c2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0012c6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0012ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0012ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0012d2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0012d6:	f7fe ffbd 	bl	c000254 <__gnu_cmse_nonsecure_call>
	}
	return;
 c0012da:	bf00      	nop
 c0012dc:	bf00      	nop
}
 c0012de:	bd98      	pop	{r3, r4, r7, pc}
 c0012e0:	30000698 	.word	0x30000698

0c0012e4 <record_output_data>:

uint32_t output_data = 0;
volatile char valueChar;
void record_output_data(uint32_t value){
 c0012e4:	b480      	push	{r7}
 c0012e6:	b083      	sub	sp, #12
 c0012e8:	af00      	add	r7, sp, #0
 c0012ea:	6078      	str	r0, [r7, #4]
	valueChar = value;
 c0012ec:	687b      	ldr	r3, [r7, #4]
 c0012ee:	b2da      	uxtb	r2, r3
 c0012f0:	4b05      	ldr	r3, [pc, #20]	@ (c001308 <record_output_data+0x24>)
 c0012f2:	701a      	strb	r2, [r3, #0]
	output_data = value;
 c0012f4:	4a05      	ldr	r2, [pc, #20]	@ (c00130c <record_output_data+0x28>)
 c0012f6:	687b      	ldr	r3, [r7, #4]
 c0012f8:	6013      	str	r3, [r2, #0]
}
 c0012fa:	bf00      	nop
 c0012fc:	370c      	adds	r7, #12
 c0012fe:	46bd      	mov	sp, r7
 c001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001304:	4770      	bx	lr
 c001306:	bf00      	nop
 c001308:	3000096c 	.word	0x3000096c
 c00130c:	30000968 	.word	0x30000968

0c001310 <CFA_ENGINE_start>:
	HAL_FLASH_Lock();
}
#endif


void CFA_ENGINE_start(){
 c001310:	b580      	push	{r7, lr}
 c001312:	af00      	add	r7, sp, #0
	while(1){
		_attest_memory();
 c001314:	f000 fa64 	bl	c0017e0 <_attest_memory>
		_setup_data();
 c001318:	f7ff ff1c 	bl	c001154 <_setup_data>
		_clean();
 c00131c:	f7ff ff76 	bl	c00120c <_clean>
		_read_serial_loop();
 c001320:	f000 f8e0 	bl	c0014e4 <_read_serial_loop>
		_attest_memory();
 c001324:	bf00      	nop
 c001326:	e7f5      	b.n	c001314 <CFA_ENGINE_start+0x4>

0c001328 <CFA_ENGINE_register_callback>:
	}
}

void CFA_ENGINE_register_callback(){
 c001328:	b480      	push	{r7}
 c00132a:	af00      	add	r7, sp, #0
	cfa_engine_conf.iac.app_start_address = (funcptr_NS)  pAttestationFunctionCallback;
 c00132c:	4b04      	ldr	r3, [pc, #16]	@ (c001340 <CFA_ENGINE_register_callback+0x18>)
 c00132e:	681b      	ldr	r3, [r3, #0]
 c001330:	461a      	mov	r2, r3
 c001332:	4b04      	ldr	r3, [pc, #16]	@ (c001344 <CFA_ENGINE_register_callback+0x1c>)
 c001334:	601a      	str	r2, [r3, #0]
	return;
 c001336:	bf00      	nop
}
 c001338:	46bd      	mov	sp, r7
 c00133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00133e:	4770      	bx	lr
 c001340:	30000a20 	.word	0x30000a20
 c001344:	30000698 	.word	0x30000698

0c001348 <STATE_initialize_attestation>:

/* --------------- - STATE HANDLING --------------------- */


uint8_t myFlag  = 0;
int STATE_initialize_attestation(){
 c001348:	b580      	push	{r7, lr}
 c00134a:	b082      	sub	sp, #8
 c00134c:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == INACTIVE){
 c00134e:	4b16      	ldr	r3, [pc, #88]	@ (c0013a8 <STATE_initialize_attestation+0x60>)
 c001350:	791b      	ldrb	r3, [r3, #4]
 c001352:	2b00      	cmp	r3, #0
 c001354:	d11c      	bne.n	c001390 <STATE_initialize_attestation+0x48>

		// send response to vrf
		uint8_t ready_char[COMMAND_SIZE+1] = INIT_ATTESTATION;
 c001356:	4a15      	ldr	r2, [pc, #84]	@ (c0013ac <STATE_initialize_attestation+0x64>)
 c001358:	463b      	mov	r3, r7
 c00135a:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00135e:	6018      	str	r0, [r3, #0]
 c001360:	3304      	adds	r3, #4
 c001362:	7019      	strb	r1, [r3, #0]
		SecureUartTx(ready_char, COMMAND_SIZE);
 c001364:	463b      	mov	r3, r7
 c001366:	2104      	movs	r1, #4
 c001368:	4618      	mov	r0, r3
 c00136a:	f004 fa51 	bl	c005810 <SecureUartTx>

		// receive challange
		if(_receive_challenge()) return 1;
 c00136e:	f000 f91f 	bl	c0015b0 <_receive_challenge>
 c001372:	4603      	mov	r3, r0
 c001374:	2b00      	cmp	r3, #0
 c001376:	d001      	beq.n	c00137c <STATE_initialize_attestation+0x34>
 c001378:	2301      	movs	r3, #1
 c00137a:	e011      	b.n	c0013a0 <STATE_initialize_attestation+0x58>

		// start application
		cfa_engine_conf.attestation_status = ACTIVE;
 c00137c:	4b0a      	ldr	r3, [pc, #40]	@ (c0013a8 <STATE_initialize_attestation+0x60>)
 c00137e:	2201      	movs	r2, #1
 c001380:	711a      	strb	r2, [r3, #4]
		CFA_ENGINE_run_attestation();
 c001382:	f000 fb6f 	bl	c001a64 <CFA_ENGINE_run_attestation>
		cfa_engine_conf.attestation_status = COMPLETE;
 c001386:	4b08      	ldr	r3, [pc, #32]	@ (c0013a8 <STATE_initialize_attestation+0x60>)
 c001388:	2202      	movs	r2, #2
 c00138a:	711a      	strb	r2, [r3, #4]

		// Send final report
		_send_report();
 c00138c:	f000 f9c8 	bl	c001720 <_send_report>
	}

	myFlag ^= 1;
 c001390:	4b07      	ldr	r3, [pc, #28]	@ (c0013b0 <STATE_initialize_attestation+0x68>)
 c001392:	781b      	ldrb	r3, [r3, #0]
 c001394:	f083 0301 	eor.w	r3, r3, #1
 c001398:	b2da      	uxtb	r2, r3
 c00139a:	4b05      	ldr	r3, [pc, #20]	@ (c0013b0 <STATE_initialize_attestation+0x68>)
 c00139c:	701a      	strb	r2, [r3, #0]
	return CONTINUE_LOOP;
 c00139e:	2301      	movs	r3, #1
}
 c0013a0:	4618      	mov	r0, r3
 c0013a2:	3708      	adds	r7, #8
 c0013a4:	46bd      	mov	sp, r7
 c0013a6:	bd80      	pop	{r7, pc}
 c0013a8:	30000698 	.word	0x30000698
 c0013ac:	0c009e10 	.word	0x0c009e10
 c0013b0:	3000096d 	.word	0x3000096d

0c0013b4 <STATE_accept_report>:

int STATE_accept_report(){
 c0013b4:	b580      	push	{r7, lr}
 c0013b6:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c0013b8:	4b06      	ldr	r3, [pc, #24]	@ (c0013d4 <STATE_accept_report+0x20>)
 c0013ba:	791b      	ldrb	r3, [r3, #4]
 c0013bc:	2b02      	cmp	r3, #2
 c0013be:	d106      	bne.n	c0013ce <STATE_accept_report+0x1a>
		cfa_engine_conf.attestation_status = INACTIVE; //temp
 c0013c0:	4b04      	ldr	r3, [pc, #16]	@ (c0013d4 <STATE_accept_report+0x20>)
 c0013c2:	2200      	movs	r2, #0
 c0013c4:	711a      	strb	r2, [r3, #4]
		_clean();
 c0013c6:	f7ff ff21 	bl	c00120c <_clean>
		return EXIT_LOOP;
 c0013ca:	2300      	movs	r3, #0
 c0013cc:	e000      	b.n	c0013d0 <STATE_accept_report+0x1c>
	}
	return CONTINUE_LOOP;
 c0013ce:	2301      	movs	r3, #1
}
 c0013d0:	4618      	mov	r0, r3
 c0013d2:	bd80      	pop	{r7, pc}
 c0013d4:	30000698 	.word	0x30000698

0c0013d8 <STATE_heal>:

int STATE_heal(){
 c0013d8:	b580      	push	{r7, lr}
 c0013da:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE || cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c0013dc:	4b07      	ldr	r3, [pc, #28]	@ (c0013fc <STATE_heal+0x24>)
 c0013de:	791b      	ldrb	r3, [r3, #4]
 c0013e0:	2b02      	cmp	r3, #2
 c0013e2:	d003      	beq.n	c0013ec <STATE_heal+0x14>
 c0013e4:	4b05      	ldr	r3, [pc, #20]	@ (c0013fc <STATE_heal+0x24>)
 c0013e6:	791b      	ldrb	r3, [r3, #4]
 c0013e8:	2b04      	cmp	r3, #4
 c0013ea:	d103      	bne.n	c0013f4 <STATE_heal+0x1c>
		_heal_function();
 c0013ec:	f000 fb8c 	bl	c001b08 <_heal_function>
		return EXIT_LOOP;
 c0013f0:	2300      	movs	r3, #0
 c0013f2:	e000      	b.n	c0013f6 <STATE_heal+0x1e>
	}
	return CONTINUE_LOOP;
 c0013f4:	2301      	movs	r3, #1
}
 c0013f6:	4618      	mov	r0, r3
 c0013f8:	bd80      	pop	{r7, pc}
 c0013fa:	bf00      	nop
 c0013fc:	30000698 	.word	0x30000698

0c001400 <STATE_continue>:

int STATE_continue(){
 c001400:	b580      	push	{r7, lr}
 c001402:	af00      	add	r7, sp, #0

	_receive_challenge();
 c001404:	f000 f8d4 	bl	c0015b0 <_receive_challenge>

	cfa_engine_conf.attestation_status = ACTIVE;
 c001408:	4b02      	ldr	r3, [pc, #8]	@ (c001414 <STATE_continue+0x14>)
 c00140a:	2201      	movs	r2, #1
 c00140c:	711a      	strb	r2, [r3, #4]

	return EXIT_LOOP;
 c00140e:	2300      	movs	r3, #0
}
 c001410:	4618      	mov	r0, r3
 c001412:	bd80      	pop	{r7, pc}
 c001414:	30000698 	.word	0x30000698

0c001418 <translate_command>:

/* ---------------------------  PROTOCOL  ----------------------------------------- */


char translate_command(int8_t command_received[]){
 c001418:	b580      	push	{r7, lr}
 c00141a:	b082      	sub	sp, #8
 c00141c:	af00      	add	r7, sp, #0
 c00141e:	6078      	str	r0, [r7, #4]
	command_received[COMMAND_SIZE] = '\0';
 c001420:	687b      	ldr	r3, [r7, #4]
 c001422:	3304      	adds	r3, #4
 c001424:	2200      	movs	r2, #0
 c001426:	701a      	strb	r2, [r3, #0]
	if (!strcmp(command_received,INIT_ATTESTATION))
 c001428:	4914      	ldr	r1, [pc, #80]	@ (c00147c <translate_command+0x64>)
 c00142a:	6878      	ldr	r0, [r7, #4]
 c00142c:	f7fe ff08 	bl	c000240 <strcmp>
 c001430:	4603      	mov	r3, r0
 c001432:	2b00      	cmp	r3, #0
 c001434:	d101      	bne.n	c00143a <translate_command+0x22>
		return INIT_ATTESTATION_CHAR;
 c001436:	2369      	movs	r3, #105	@ 0x69
 c001438:	e01b      	b.n	c001472 <translate_command+0x5a>
	else if (!strcmp(command_received,ACCEPTED_REPORT))
 c00143a:	4911      	ldr	r1, [pc, #68]	@ (c001480 <translate_command+0x68>)
 c00143c:	6878      	ldr	r0, [r7, #4]
 c00143e:	f7fe feff 	bl	c000240 <strcmp>
 c001442:	4603      	mov	r3, r0
 c001444:	2b00      	cmp	r3, #0
 c001446:	d101      	bne.n	c00144c <translate_command+0x34>
		return ACCEPT_REPORT_CHAR;
 c001448:	2376      	movs	r3, #118	@ 0x76
 c00144a:	e012      	b.n	c001472 <translate_command+0x5a>
	else if (!strcmp(command_received,CONTINUE_REQUEST))
 c00144c:	490d      	ldr	r1, [pc, #52]	@ (c001484 <translate_command+0x6c>)
 c00144e:	6878      	ldr	r0, [r7, #4]
 c001450:	f7fe fef6 	bl	c000240 <strcmp>
 c001454:	4603      	mov	r3, r0
 c001456:	2b00      	cmp	r3, #0
 c001458:	d101      	bne.n	c00145e <translate_command+0x46>
		return CONTINUE_CHAR;
 c00145a:	2363      	movs	r3, #99	@ 0x63
 c00145c:	e009      	b.n	c001472 <translate_command+0x5a>
	else if (!strcmp(command_received,HEAL_REQUEST))
 c00145e:	490a      	ldr	r1, [pc, #40]	@ (c001488 <translate_command+0x70>)
 c001460:	6878      	ldr	r0, [r7, #4]
 c001462:	f7fe feed 	bl	c000240 <strcmp>
 c001466:	4603      	mov	r3, r0
 c001468:	2b00      	cmp	r3, #0
 c00146a:	d101      	bne.n	c001470 <translate_command+0x58>
		return HEAL_CHAR;
 c00146c:	2368      	movs	r3, #104	@ 0x68
 c00146e:	e000      	b.n	c001472 <translate_command+0x5a>
	return 'X';
 c001470:	2358      	movs	r3, #88	@ 0x58

}
 c001472:	4618      	mov	r0, r3
 c001474:	3708      	adds	r7, #8
 c001476:	46bd      	mov	sp, r7
 c001478:	bd80      	pop	{r7, pc}
 c00147a:	bf00      	nop
 c00147c:	0c009e10 	.word	0x0c009e10
 c001480:	0c009e18 	.word	0x0c009e18
 c001484:	0c009e20 	.word	0x0c009e20
 c001488:	0c009e28 	.word	0x0c009e28

0c00148c <wait_for_command>:

void wait_for_command(char pattern[],int size){
 c00148c:	b580      	push	{r7, lr}
 c00148e:	b086      	sub	sp, #24
 c001490:	af00      	add	r7, sp, #0
 c001492:	6078      	str	r0, [r7, #4]
 c001494:	6039      	str	r1, [r7, #0]
	int found_size = 0;
 c001496:	2300      	movs	r3, #0
 c001498:	617b      	str	r3, [r7, #20]
	int i = 0;
 c00149a:	2300      	movs	r3, #0
 c00149c:	613b      	str	r3, [r7, #16]
	char read_char;
	while(found_size != size){
 c00149e:	e017      	b.n	c0014d0 <wait_for_command+0x44>
		SecureUartRx((uint8_t*)&read_char, 1);
 c0014a0:	f107 030f 	add.w	r3, r7, #15
 c0014a4:	2101      	movs	r1, #1
 c0014a6:	4618      	mov	r0, r3
 c0014a8:	f004 f9c6 	bl	c005838 <SecureUartRx>
		if (read_char == pattern[i]){
 c0014ac:	693b      	ldr	r3, [r7, #16]
 c0014ae:	687a      	ldr	r2, [r7, #4]
 c0014b0:	4413      	add	r3, r2
 c0014b2:	781a      	ldrb	r2, [r3, #0]
 c0014b4:	7bfb      	ldrb	r3, [r7, #15]
 c0014b6:	429a      	cmp	r2, r3
 c0014b8:	d106      	bne.n	c0014c8 <wait_for_command+0x3c>
			i++;
 c0014ba:	693b      	ldr	r3, [r7, #16]
 c0014bc:	3301      	adds	r3, #1
 c0014be:	613b      	str	r3, [r7, #16]
			found_size++;
 c0014c0:	697b      	ldr	r3, [r7, #20]
 c0014c2:	3301      	adds	r3, #1
 c0014c4:	617b      	str	r3, [r7, #20]
 c0014c6:	e003      	b.n	c0014d0 <wait_for_command+0x44>
		}
		else{
			i = 0;
 c0014c8:	2300      	movs	r3, #0
 c0014ca:	613b      	str	r3, [r7, #16]
			found_size = 0;
 c0014cc:	2300      	movs	r3, #0
 c0014ce:	617b      	str	r3, [r7, #20]
	while(found_size != size){
 c0014d0:	697a      	ldr	r2, [r7, #20]
 c0014d2:	683b      	ldr	r3, [r7, #0]
 c0014d4:	429a      	cmp	r2, r3
 c0014d6:	d1e3      	bne.n	c0014a0 <wait_for_command+0x14>
		}
	}
}
 c0014d8:	bf00      	nop
 c0014da:	bf00      	nop
 c0014dc:	3718      	adds	r7, #24
 c0014de:	46bd      	mov	sp, r7
 c0014e0:	bd80      	pop	{r7, pc}
	...

0c0014e4 <_read_serial_loop>:

void _read_serial_loop(){
 c0014e4:	b580      	push	{r7, lr}
 c0014e6:	b082      	sub	sp, #8
 c0014e8:	af00      	add	r7, sp, #0
	uint8_t command_received[COMMAND_SIZE+1];
	uint8_t state = CONTINUE_LOOP;
 c0014ea:	2301      	movs	r3, #1
 c0014ec:	71fb      	strb	r3, [r7, #7]
	char aaa;
	while(state == CONTINUE_LOOP){
 c0014ee:	e054      	b.n	c00159a <_read_serial_loop+0xb6>
		wait_for_command(BEGGINING_OF_COMMAND,COMMAND_SIZE);
 c0014f0:	2104      	movs	r1, #4
 c0014f2:	482e      	ldr	r0, [pc, #184]	@ (c0015ac <_read_serial_loop+0xc8>)
 c0014f4:	f7ff ffca 	bl	c00148c <wait_for_command>
		_receive_request(COMMAND_SIZE, command_received);
 c0014f8:	463b      	mov	r3, r7
 c0014fa:	4619      	mov	r1, r3
 c0014fc:	2004      	movs	r0, #4
 c0014fe:	f000 f8b3 	bl	c001668 <_receive_request>
		aaa = translate_command(command_received);
 c001502:	463b      	mov	r3, r7
 c001504:	4618      	mov	r0, r3
 c001506:	f7ff ff87 	bl	c001418 <translate_command>
 c00150a:	4603      	mov	r3, r0
 c00150c:	71bb      	strb	r3, [r7, #6]
		switch(aaa){
 c00150e:	79bb      	ldrb	r3, [r7, #6]
 c001510:	3b63      	subs	r3, #99	@ 0x63
 c001512:	2b13      	cmp	r3, #19
 c001514:	d83e      	bhi.n	c001594 <_read_serial_loop+0xb0>
 c001516:	a201      	add	r2, pc, #4	@ (adr r2, c00151c <_read_serial_loop+0x38>)
 c001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00151c:	0c00158b 	.word	0x0c00158b
 c001520:	0c001595 	.word	0x0c001595
 c001524:	0c001595 	.word	0x0c001595
 c001528:	0c001595 	.word	0x0c001595
 c00152c:	0c001595 	.word	0x0c001595
 c001530:	0c001581 	.word	0x0c001581
 c001534:	0c00156d 	.word	0x0c00156d
 c001538:	0c001595 	.word	0x0c001595
 c00153c:	0c001595 	.word	0x0c001595
 c001540:	0c001595 	.word	0x0c001595
 c001544:	0c001595 	.word	0x0c001595
 c001548:	0c001595 	.word	0x0c001595
 c00154c:	0c001595 	.word	0x0c001595
 c001550:	0c001595 	.word	0x0c001595
 c001554:	0c001595 	.word	0x0c001595
 c001558:	0c001595 	.word	0x0c001595
 c00155c:	0c001595 	.word	0x0c001595
 c001560:	0c001595 	.word	0x0c001595
 c001564:	0c001595 	.word	0x0c001595
 c001568:	0c001577 	.word	0x0c001577

			case INIT_ATTESTATION_CHAR:
				state = STATE_initialize_attestation();
 c00156c:	f7ff feec 	bl	c001348 <STATE_initialize_attestation>
 c001570:	4603      	mov	r3, r0
 c001572:	71fb      	strb	r3, [r7, #7]
				break;
 c001574:	e011      	b.n	c00159a <_read_serial_loop+0xb6>

			case ACCEPT_REPORT_CHAR:
				state = STATE_accept_report();
 c001576:	f7ff ff1d 	bl	c0013b4 <STATE_accept_report>
 c00157a:	4603      	mov	r3, r0
 c00157c:	71fb      	strb	r3, [r7, #7]
				break;
 c00157e:	e00c      	b.n	c00159a <_read_serial_loop+0xb6>

			case HEAL_CHAR:
				state = STATE_heal();
 c001580:	f7ff ff2a 	bl	c0013d8 <STATE_heal>
 c001584:	4603      	mov	r3, r0
 c001586:	71fb      	strb	r3, [r7, #7]
				break;
 c001588:	e007      	b.n	c00159a <_read_serial_loop+0xb6>

			case CONTINUE_CHAR:
				state = STATE_continue();
 c00158a:	f7ff ff39 	bl	c001400 <STATE_continue>
 c00158e:	4603      	mov	r3, r0
 c001590:	71fb      	strb	r3, [r7, #7]
				break;
 c001592:	e002      	b.n	c00159a <_read_serial_loop+0xb6>

			default:
				state = CONTINUE_LOOP;
 c001594:	2301      	movs	r3, #1
 c001596:	71fb      	strb	r3, [r7, #7]
				break;
 c001598:	bf00      	nop
	while(state == CONTINUE_LOOP){
 c00159a:	79fb      	ldrb	r3, [r7, #7]
 c00159c:	2b01      	cmp	r3, #1
 c00159e:	d0a7      	beq.n	c0014f0 <_read_serial_loop+0xc>
		}
	}
}
 c0015a0:	bf00      	nop
 c0015a2:	bf00      	nop
 c0015a4:	3708      	adds	r7, #8
 c0015a6:	46bd      	mov	sp, r7
 c0015a8:	bd80      	pop	{r7, pc}
 c0015aa:	bf00      	nop
 c0015ac:	0c009e30 	.word	0x0c009e30

0c0015b0 <_receive_challenge>:

/* -----------------------------  SENDING REPORT ------------------------------------ */
uint32_t receive_resp_time;
uint32_t verify_resp_time;
uint8_t  _receive_challenge(){
 c0015b0:	b580      	push	{r7, lr}
 c0015b2:	b096      	sub	sp, #88	@ 0x58
 c0015b4:	af02      	add	r7, sp, #8
	uint8_t chl[64];
//	uint8_t init_chal[] = BEGGINING_OF_CHALLANGE;

	uint32_t start = HAL_GetTick();
 c0015b6:	f004 f9e7 	bl	c005988 <HAL_GetTick>
 c0015ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
	SecureUartRx((uint8_t*)chl, 64);
 c0015bc:	463b      	mov	r3, r7
 c0015be:	2140      	movs	r1, #64	@ 0x40
 c0015c0:	4618      	mov	r0, r3
 c0015c2:	f004 f939 	bl	c005838 <SecureUartRx>
//	SecureUartTx(init_chal, COMMAND_SIZE); // echo for debug
//	SecureUartTx((uint8_t*)chl, 64);
	_update_challenge(chl);
 c0015c6:	463b      	mov	r3, r7
 c0015c8:	4618      	mov	r0, r3
 c0015ca:	f7ff fdeb 	bl	c0011a4 <_update_challenge>

	// read verifier signature
	SecureUartRx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);
 c0015ce:	2140      	movs	r1, #64	@ 0x40
 c0015d0:	481d      	ldr	r0, [pc, #116]	@ (c001648 <_receive_challenge+0x98>)
 c0015d2:	f004 f931 	bl	c005838 <SecureUartRx>
//	SecureUartTx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);

	vrf_resp.verify_result = 1;
 c0015d6:	4b1d      	ldr	r3, [pc, #116]	@ (c00164c <_receive_challenge+0x9c>)
 c0015d8:	2201      	movs	r2, #1
 c0015da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	uint32_t stop = HAL_GetTick();
 c0015de:	f004 f9d3 	bl	c005988 <HAL_GetTick>
 c0015e2:	64b8      	str	r0, [r7, #72]	@ 0x48
	receive_resp_time = stop-start;
 c0015e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c0015e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0015e8:	1ad3      	subs	r3, r2, r3
 c0015ea:	4a19      	ldr	r2, [pc, #100]	@ (c001650 <_receive_challenge+0xa0>)
 c0015ec:	6013      	str	r3, [r2, #0]

	start = HAL_GetTick();
 c0015ee:	f004 f9cb 	bl	c005988 <HAL_GetTick>
 c0015f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
	// check verifier signature by sig = ECDSA(private_key, hash(report))
	// 1) get SHA256 hash over report (excluding buffer that holds signature)
	uint32_t response_size = CHAL_SIZE + 1 + HASH_SIZE_BYTES;
 c0015f4:	2361      	movs	r3, #97	@ 0x61
 c0015f6:	647b      	str	r3, [r7, #68]	@ 0x44
	Hacl_SHA2_256_hash(response_hash, (uint8_t*)(&vrf_resp), response_size);
 c0015f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 c0015fa:	4914      	ldr	r1, [pc, #80]	@ (c00164c <_receive_challenge+0x9c>)
 c0015fc:	4815      	ldr	r0, [pc, #84]	@ (c001654 <_receive_challenge+0xa4>)
 c0015fe:	f7ff fd9a 	bl	c001136 <Hacl_SHA2_256_hash>
	// 2) verify signature of hash
    curve = uECC_secp256r1();
 c001602:	f002 fda1 	bl	c004148 <uECC_secp256r1>
 c001606:	4603      	mov	r3, r0
 c001608:	4a13      	ldr	r2, [pc, #76]	@ (c001658 <_receive_challenge+0xa8>)
 c00160a:	6013      	str	r3, [r2, #0]
    int t =  uECC_verify(public_key, response_hash, HASH_SIZE_BYTES, vrf_resp.signature, curve);
 c00160c:	4b12      	ldr	r3, [pc, #72]	@ (c001658 <_receive_challenge+0xa8>)
 c00160e:	681b      	ldr	r3, [r3, #0]
 c001610:	9300      	str	r3, [sp, #0]
 c001612:	4b0d      	ldr	r3, [pc, #52]	@ (c001648 <_receive_challenge+0x98>)
 c001614:	2220      	movs	r2, #32
 c001616:	490f      	ldr	r1, [pc, #60]	@ (c001654 <_receive_challenge+0xa4>)
 c001618:	4810      	ldr	r0, [pc, #64]	@ (c00165c <_receive_challenge+0xac>)
 c00161a:	f003 fd81 	bl	c005120 <uECC_verify>
 c00161e:	6438      	str	r0, [r7, #64]	@ 0x40
    stop = HAL_GetTick();
 c001620:	f004 f9b2 	bl	c005988 <HAL_GetTick>
 c001624:	64b8      	str	r0, [r7, #72]	@ 0x48
    verify_resp_time = stop-start;
 c001626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c001628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c00162a:	1ad3      	subs	r3, r2, r3
 c00162c:	4a0c      	ldr	r2, [pc, #48]	@ (c001660 <_receive_challenge+0xb0>)
 c00162e:	6013      	str	r3, [r2, #0]

    recv_verify_response_time = receive_resp_time + verify_resp_time;
 c001630:	4b07      	ldr	r3, [pc, #28]	@ (c001650 <_receive_challenge+0xa0>)
 c001632:	681a      	ldr	r2, [r3, #0]
 c001634:	4b0a      	ldr	r3, [pc, #40]	@ (c001660 <_receive_challenge+0xb0>)
 c001636:	681b      	ldr	r3, [r3, #0]
 c001638:	4413      	add	r3, r2
 c00163a:	4a0a      	ldr	r2, [pc, #40]	@ (c001664 <_receive_challenge+0xb4>)
 c00163c:	6013      	str	r3, [r2, #0]
	return 0;
 c00163e:	2300      	movs	r3, #0
}
 c001640:	4618      	mov	r0, r3
 c001642:	3750      	adds	r7, #80	@ 0x50
 c001644:	46bd      	mov	sp, r7
 c001646:	bd80      	pop	{r7, pc}
 c001648:	300008d1 	.word	0x300008d1
 c00164c:	30000890 	.word	0x30000890
 c001650:	30000970 	.word	0x30000970
 c001654:	30000934 	.word	0x30000934
 c001658:	30000954 	.word	0x30000954
 c00165c:	30000020 	.word	0x30000020
 c001660:	30000974 	.word	0x30000974
 c001664:	30000958 	.word	0x30000958

0c001668 <_receive_request>:

void _receive_request(int size,uint8_t* read_char){
 c001668:	b580      	push	{r7, lr}
 c00166a:	b082      	sub	sp, #8
 c00166c:	af00      	add	r7, sp, #0
 c00166e:	6078      	str	r0, [r7, #4]
 c001670:	6039      	str	r1, [r7, #0]
	SecureUartRx(read_char, size);
 c001672:	687b      	ldr	r3, [r7, #4]
 c001674:	b29b      	uxth	r3, r3
 c001676:	4619      	mov	r1, r3
 c001678:	6838      	ldr	r0, [r7, #0]
 c00167a:	f004 f8dd 	bl	c005838 <SecureUartRx>
	return;
 c00167e:	bf00      	nop
}
 c001680:	3708      	adds	r7, #8
 c001682:	46bd      	mov	sp, r7
 c001684:	bd80      	pop	{r7, pc}
	...

0c001688 <_send_report_message>:
uint32_t send_report_time = 0;
uint32_t send_report_start;
uint32_t send_report_stop;
void _send_report_message(){
 c001688:	b580      	push	{r7, lr}
 c00168a:	b084      	sub	sp, #16
 c00168c:	af00      	add	r7, sp, #0
	uint8_t init_report[] = BEGGINING_OF_REPORT;
 c00168e:	4a1e      	ldr	r2, [pc, #120]	@ (c001708 <_send_report_message+0x80>)
 c001690:	463b      	mov	r3, r7
 c001692:	e892 0003 	ldmia.w	r2, {r0, r1}
 c001696:	6018      	str	r0, [r3, #0]
 c001698:	3304      	adds	r3, #4
 c00169a:	7019      	strb	r1, [r3, #0]
	SecureUartTx(init_report, COMMAND_SIZE);
 c00169c:	463b      	mov	r3, r7
 c00169e:	2104      	movs	r1, #4
 c0016a0:	4618      	mov	r0, r3
 c0016a2:	f004 f8b5 	bl	c005810 <SecureUartTx>
//	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES);

	// CFA or TRACES
	//report_secure.num_CF_Log_size++; //convert from last index to size
	// 2 + 64 + 32 + 4*2048 + 2 bytes
	send_report_start = HAL_GetTick();
 c0016a6:	f004 f96f 	bl	c005988 <HAL_GetTick>
 c0016aa:	4603      	mov	r3, r0
 c0016ac:	4a17      	ldr	r2, [pc, #92]	@ (c00170c <_send_report_message+0x84>)
 c0016ae:	6013      	str	r3, [r2, #0]
	int data_size = 2 + SIGNATURE_SIZE_BYTES + HASH_SIZE_BYTES + 2;// + 4*report_secure.num_CF_Log_size + 2;
 c0016b0:	2364      	movs	r3, #100	@ 0x64
 c0016b2:	60fb      	str	r3, [r7, #12]
	uint8_t * report_addr = (uint8_t*)(&report_secure);
 c0016b4:	4b16      	ldr	r3, [pc, #88]	@ (c001710 <_send_report_message+0x88>)
 c0016b6:	60bb      	str	r3, [r7, #8]
	SecureUartTx(report_addr, data_size);
 c0016b8:	68fb      	ldr	r3, [r7, #12]
 c0016ba:	b29b      	uxth	r3, r3
 c0016bc:	4619      	mov	r1, r3
 c0016be:	68b8      	ldr	r0, [r7, #8]
 c0016c0:	f004 f8a6 	bl	c005810 <SecureUartTx>
	data_size = report_secure.num_CF_Log_size;
 c0016c4:	4b12      	ldr	r3, [pc, #72]	@ (c001710 <_send_report_message+0x88>)
 c0016c6:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c0016ca:	60fb      	str	r3, [r7, #12]
	SecureUartTx((uint8_t *)(&report_secure.CFLog), data_size);
 c0016cc:	68fb      	ldr	r3, [r7, #12]
 c0016ce:	b29b      	uxth	r3, r3
 c0016d0:	4619      	mov	r1, r3
 c0016d2:	4810      	ldr	r0, [pc, #64]	@ (c001714 <_send_report_message+0x8c>)
 c0016d4:	f004 f89c 	bl	c005810 <SecureUartTx>
	send_report_stop = HAL_GetTick();
 c0016d8:	f004 f956 	bl	c005988 <HAL_GetTick>
 c0016dc:	4603      	mov	r3, r0
 c0016de:	4a0e      	ldr	r2, [pc, #56]	@ (c001718 <_send_report_message+0x90>)
 c0016e0:	6013      	str	r3, [r2, #0]
	send_report_time += send_report_stop - send_report_start;
 c0016e2:	4b0d      	ldr	r3, [pc, #52]	@ (c001718 <_send_report_message+0x90>)
 c0016e4:	681a      	ldr	r2, [r3, #0]
 c0016e6:	4b09      	ldr	r3, [pc, #36]	@ (c00170c <_send_report_message+0x84>)
 c0016e8:	681b      	ldr	r3, [r3, #0]
 c0016ea:	1ad2      	subs	r2, r2, r3
 c0016ec:	4b0b      	ldr	r3, [pc, #44]	@ (c00171c <_send_report_message+0x94>)
 c0016ee:	681b      	ldr	r3, [r3, #0]
 c0016f0:	4413      	add	r3, r2
 c0016f2:	4a0a      	ldr	r2, [pc, #40]	@ (c00171c <_send_report_message+0x94>)
 c0016f4:	6013      	str	r3, [r2, #0]

	// timing for debug
	SecureUartTx((uint8_t *)(&send_report_time), 4);
 c0016f6:	2104      	movs	r1, #4
 c0016f8:	4808      	ldr	r0, [pc, #32]	@ (c00171c <_send_report_message+0x94>)
 c0016fa:	f004 f889 	bl	c005810 <SecureUartTx>
}
 c0016fe:	bf00      	nop
 c001700:	3710      	adds	r7, #16
 c001702:	46bd      	mov	sp, r7
 c001704:	bd80      	pop	{r7, pc}
 c001706:	bf00      	nop
 c001708:	0c009e38 	.word	0x0c009e38
 c00170c:	3000097c 	.word	0x3000097c
 c001710:	30000724 	.word	0x30000724
 c001714:	30000788 	.word	0x30000788
 c001718:	30000980 	.word	0x30000980
 c00171c:	30000978 	.word	0x30000978

0c001720 <_send_report>:
uint32_t compute_send_report_time;
uint32_t compute_send_report_start;
uint32_t compute_send_report_stop;
void _send_report(){
 c001720:	b580      	push	{r7, lr}
 c001722:	af00      	add	r7, sp, #0
//	report_secure.num_CF_Log_size = report_secure.num_CF_Log_size-1;
	report_secure.number_of_logs_sent ++;
 c001724:	4b28      	ldr	r3, [pc, #160]	@ (c0017c8 <_send_report+0xa8>)
 c001726:	f8b3 3166 	ldrh.w	r3, [r3, #358]	@ 0x166
 c00172a:	3301      	adds	r3, #1
 c00172c:	b29a      	uxth	r2, r3
 c00172e:	4b26      	ldr	r3, [pc, #152]	@ (c0017c8 <_send_report+0xa8>)
 c001730:	f8a3 2166 	strh.w	r2, [r3, #358]	@ 0x166
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c001734:	4b25      	ldr	r3, [pc, #148]	@ (c0017cc <_send_report+0xac>)
 c001736:	791b      	ldrb	r3, [r3, #4]
 c001738:	2b02      	cmp	r3, #2
 c00173a:	d122      	bne.n	c001782 <_send_report+0x62>
		report_secure.isFinal = FINAL_REPORT;
 c00173c:	4b22      	ldr	r3, [pc, #136]	@ (c0017c8 <_send_report+0xa8>)
 c00173e:	2246      	movs	r2, #70	@ 0x46
 c001740:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		huffman(&report_secure, "", 0, 0);
 c001744:	2300      	movs	r3, #0
 c001746:	2200      	movs	r2, #0
 c001748:	4921      	ldr	r1, [pc, #132]	@ (c0017d0 <_send_report+0xb0>)
 c00174a:	481f      	ldr	r0, [pc, #124]	@ (c0017c8 <_send_report+0xa8>)
 c00174c:	f000 faa2 	bl	c001c94 <huffman>
		report_secure.num_CF_Log_size++;
 c001750:	4b1d      	ldr	r3, [pc, #116]	@ (c0017c8 <_send_report+0xa8>)
 c001752:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c001756:	b29b      	uxth	r3, r3
 c001758:	3301      	adds	r3, #1
 c00175a:	b29b      	uxth	r3, r3
 c00175c:	b21a      	sxth	r2, r3
 c00175e:	4b1a      	ldr	r3, [pc, #104]	@ (c0017c8 <_send_report+0xa8>)
 c001760:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		compute_send_report_start = HAL_GetTick();
 c001764:	f004 f910 	bl	c005988 <HAL_GetTick>
 c001768:	4603      	mov	r3, r0
 c00176a:	4a1a      	ldr	r2, [pc, #104]	@ (c0017d4 <_send_report+0xb4>)
 c00176c:	6013      	str	r3, [r2, #0]
		_sign_report(); // must come after isFinal is set since signs all report data
 c00176e:	f000 f85d 	bl	c00182c <_sign_report>
		_send_report_message();
 c001772:	f7ff ff89 	bl	c001688 <_send_report_message>
		compute_send_report_stop = HAL_GetTick();
 c001776:	f004 f907 	bl	c005988 <HAL_GetTick>
 c00177a:	4603      	mov	r3, r0
 c00177c:	4a16      	ldr	r2, [pc, #88]	@ (c0017d8 <_send_report+0xb8>)
 c00177e:	6013      	str	r3, [r2, #0]
 c001780:	e019      	b.n	c0017b6 <_send_report+0x96>
	}
	else if(cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c001782:	4b12      	ldr	r3, [pc, #72]	@ (c0017cc <_send_report+0xac>)
 c001784:	791b      	ldrb	r3, [r3, #4]
 c001786:	2b04      	cmp	r3, #4
 c001788:	d115      	bne.n	c0017b6 <_send_report+0x96>
		report_secure.isFinal = PARTIAL_REPORT;
 c00178a:	4b0f      	ldr	r3, [pc, #60]	@ (c0017c8 <_send_report+0xa8>)
 c00178c:	2250      	movs	r2, #80	@ 0x50
 c00178e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		compute_send_report_start = HAL_GetTick();
 c001792:	f004 f8f9 	bl	c005988 <HAL_GetTick>
 c001796:	4603      	mov	r3, r0
 c001798:	4a0e      	ldr	r2, [pc, #56]	@ (c0017d4 <_send_report+0xb4>)
 c00179a:	6013      	str	r3, [r2, #0]
		_sign_report();
 c00179c:	f000 f846 	bl	c00182c <_sign_report>
		_send_report_message();
 c0017a0:	f7ff ff72 	bl	c001688 <_send_report_message>
		report_secure.num_CF_Log_size = 0;
 c0017a4:	4b08      	ldr	r3, [pc, #32]	@ (c0017c8 <_send_report+0xa8>)
 c0017a6:	2200      	movs	r2, #0
 c0017a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		compute_send_report_stop = HAL_GetTick();
 c0017ac:	f004 f8ec 	bl	c005988 <HAL_GetTick>
 c0017b0:	4603      	mov	r3, r0
 c0017b2:	4a09      	ldr	r2, [pc, #36]	@ (c0017d8 <_send_report+0xb8>)
 c0017b4:	6013      	str	r3, [r2, #0]
	}

	compute_send_report_time = compute_send_report_stop - compute_send_report_start;
 c0017b6:	4b08      	ldr	r3, [pc, #32]	@ (c0017d8 <_send_report+0xb8>)
 c0017b8:	681a      	ldr	r2, [r3, #0]
 c0017ba:	4b06      	ldr	r3, [pc, #24]	@ (c0017d4 <_send_report+0xb4>)
 c0017bc:	681b      	ldr	r3, [r3, #0]
 c0017be:	1ad3      	subs	r3, r2, r3
 c0017c0:	4a06      	ldr	r2, [pc, #24]	@ (c0017dc <_send_report+0xbc>)
 c0017c2:	6013      	str	r3, [r2, #0]
	return;
 c0017c4:	bf00      	nop
}
 c0017c6:	bd80      	pop	{r7, pc}
 c0017c8:	30000724 	.word	0x30000724
 c0017cc:	30000698 	.word	0x30000698
 c0017d0:	0c009e40 	.word	0x0c009e40
 c0017d4:	30000988 	.word	0x30000988
 c0017d8:	3000098c 	.word	0x3000098c
 c0017dc:	30000984 	.word	0x30000984

0c0017e0 <_attest_memory>:

/* ----------------------------- CRYPTO-OPERATIONS --------------------------------- */
uint32_t time_hash_memory;
uint32_t time_hash_memory_start;
uint32_t time_hash_memory_end;
void _attest_memory(){
 c0017e0:	b580      	push	{r7, lr}
 c0017e2:	af00      	add	r7, sp, #0
	time_hash_memory_start = HAL_GetTick();
 c0017e4:	f004 f8d0 	bl	c005988 <HAL_GetTick>
 c0017e8:	4603      	mov	r3, r0
 c0017ea:	4a0b      	ldr	r2, [pc, #44]	@ (c001818 <_attest_memory+0x38>)
 c0017ec:	6013      	str	r3, [r2, #0]
	// Compute sigle hash of non-secure memory
	Hacl_SHA2_256_hash(report_secure.mem_hash, (uint8_t*)(NONSECURE_FLASH_START), NONSECURE_FLASH_SIZE);
 c0017ee:	f44f 6236 	mov.w	r2, #2912	@ 0xb60
 c0017f2:	490a      	ldr	r1, [pc, #40]	@ (c00181c <_attest_memory+0x3c>)
 c0017f4:	480a      	ldr	r0, [pc, #40]	@ (c001820 <_attest_memory+0x40>)
 c0017f6:	f7ff fc9e 	bl	c001136 <Hacl_SHA2_256_hash>
	time_hash_memory_end = HAL_GetTick();
 c0017fa:	f004 f8c5 	bl	c005988 <HAL_GetTick>
 c0017fe:	4603      	mov	r3, r0
 c001800:	4a08      	ldr	r2, [pc, #32]	@ (c001824 <_attest_memory+0x44>)
 c001802:	6013      	str	r3, [r2, #0]
	time_hash_memory = time_hash_memory_end-time_hash_memory_start;
 c001804:	4b07      	ldr	r3, [pc, #28]	@ (c001824 <_attest_memory+0x44>)
 c001806:	681a      	ldr	r2, [r3, #0]
 c001808:	4b03      	ldr	r3, [pc, #12]	@ (c001818 <_attest_memory+0x38>)
 c00180a:	681b      	ldr	r3, [r3, #0]
 c00180c:	1ad3      	subs	r3, r2, r3
 c00180e:	4a06      	ldr	r2, [pc, #24]	@ (c001828 <_attest_memory+0x48>)
 c001810:	6013      	str	r3, [r2, #0]
}
 c001812:	bf00      	nop
 c001814:	bd80      	pop	{r7, pc}
 c001816:	bf00      	nop
 c001818:	30000994 	.word	0x30000994
 c00181c:	080401f8 	.word	0x080401f8
 c001820:	30000766 	.word	0x30000766
 c001824:	30000998 	.word	0x30000998
 c001828:	30000990 	.word	0x30000990

0c00182c <_sign_report>:

uint32_t time_sign_report = 0;
uint32_t time_sign_report_start;
uint32_t time_sign_report_end;
uint8_t sign_report_iters = 0;
void _sign_report(){
 c00182c:	b580      	push	{r7, lr}
 c00182e:	b084      	sub	sp, #16
 c001830:	af02      	add	r7, sp, #8
	time_sign_report_start = HAL_GetTick();
 c001832:	f004 f8a9 	bl	c005988 <HAL_GetTick>
 c001836:	4603      	mov	r3, r0
 c001838:	4a1a      	ldr	r2, [pc, #104]	@ (c0018a4 <_sign_report+0x78>)
 c00183a:	6013      	str	r3, [r2, #0]
	// Baseline End-to-end APP
//	uint32_t report_size = 4; // in bytes
//	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&output_data), report_size);

	// CFA or TRACES
	uint32_t report_size = 2 + HASH_SIZE_BYTES + 2 + 4*report_secure.num_CF_Log_size;
 c00183c:	4b1a      	ldr	r3, [pc, #104]	@ (c0018a8 <_sign_report+0x7c>)
 c00183e:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c001842:	3309      	adds	r3, #9
 c001844:	009b      	lsls	r3, r3, #2
 c001846:	607b      	str	r3, [r7, #4]
	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&report_secure.isFinal), report_size);
 c001848:	687a      	ldr	r2, [r7, #4]
 c00184a:	4918      	ldr	r1, [pc, #96]	@ (c0018ac <_sign_report+0x80>)
 c00184c:	4818      	ldr	r0, [pc, #96]	@ (c0018b0 <_sign_report+0x84>)
 c00184e:	f7ff fc72 	bl	c001136 <Hacl_SHA2_256_hash>

	// sign hash
    curve = uECC_secp256r1();
 c001852:	f002 fc79 	bl	c004148 <uECC_secp256r1>
 c001856:	4603      	mov	r3, r0
 c001858:	4a16      	ldr	r2, [pc, #88]	@ (c0018b4 <_sign_report+0x88>)
 c00185a:	6013      	str	r3, [r2, #0]
    int t =  uECC_sign(private_key, report_hash, HASH_SIZE_BYTES, report_secure.signature, curve);
 c00185c:	4b15      	ldr	r3, [pc, #84]	@ (c0018b4 <_sign_report+0x88>)
 c00185e:	681b      	ldr	r3, [r3, #0]
 c001860:	9300      	str	r3, [sp, #0]
 c001862:	4b11      	ldr	r3, [pc, #68]	@ (c0018a8 <_sign_report+0x7c>)
 c001864:	2220      	movs	r2, #32
 c001866:	4912      	ldr	r1, [pc, #72]	@ (c0018b0 <_sign_report+0x84>)
 c001868:	4813      	ldr	r0, [pc, #76]	@ (c0018b8 <_sign_report+0x8c>)
 c00186a:	f003 fc07 	bl	c00507c <uECC_sign>
 c00186e:	6038      	str	r0, [r7, #0]

    time_sign_report_end = HAL_GetTick();
 c001870:	f004 f88a 	bl	c005988 <HAL_GetTick>
 c001874:	4603      	mov	r3, r0
 c001876:	4a11      	ldr	r2, [pc, #68]	@ (c0018bc <_sign_report+0x90>)
 c001878:	6013      	str	r3, [r2, #0]
	time_sign_report += time_sign_report_end-time_sign_report_start;
 c00187a:	4b10      	ldr	r3, [pc, #64]	@ (c0018bc <_sign_report+0x90>)
 c00187c:	681a      	ldr	r2, [r3, #0]
 c00187e:	4b09      	ldr	r3, [pc, #36]	@ (c0018a4 <_sign_report+0x78>)
 c001880:	681b      	ldr	r3, [r3, #0]
 c001882:	1ad2      	subs	r2, r2, r3
 c001884:	4b0e      	ldr	r3, [pc, #56]	@ (c0018c0 <_sign_report+0x94>)
 c001886:	681b      	ldr	r3, [r3, #0]
 c001888:	4413      	add	r3, r2
 c00188a:	4a0d      	ldr	r2, [pc, #52]	@ (c0018c0 <_sign_report+0x94>)
 c00188c:	6013      	str	r3, [r2, #0]
	sign_report_iters++;
 c00188e:	4b0d      	ldr	r3, [pc, #52]	@ (c0018c4 <_sign_report+0x98>)
 c001890:	781b      	ldrb	r3, [r3, #0]
 c001892:	3301      	adds	r3, #1
 c001894:	b2da      	uxtb	r2, r3
 c001896:	4b0b      	ldr	r3, [pc, #44]	@ (c0018c4 <_sign_report+0x98>)
 c001898:	701a      	strb	r2, [r3, #0]
}
 c00189a:	bf00      	nop
 c00189c:	3708      	adds	r7, #8
 c00189e:	46bd      	mov	sp, r7
 c0018a0:	bd80      	pop	{r7, pc}
 c0018a2:	bf00      	nop
 c0018a4:	300009a0 	.word	0x300009a0
 c0018a8:	30000724 	.word	0x30000724
 c0018ac:	30000764 	.word	0x30000764
 c0018b0:	30000914 	.word	0x30000914
 c0018b4:	30000954 	.word	0x30000954
 c0018b8:	30000000 	.word	0x30000000
 c0018bc:	300009a4 	.word	0x300009a4
 c0018c0:	3000099c 	.word	0x3000099c
 c0018c4:	300009a8 	.word	0x300009a8

0c0018c8 <CFA_ENGINE_new_log_entry>:
// experimental
uint32_t size;
int spec = 0;
uint8_t to_log[24];
int debug_count = 0;
void CFA_ENGINE_new_log_entry(uint32_t value){
 c0018c8:	b580      	push	{r7, lr}
 c0018ca:	b086      	sub	sp, #24
 c0018cc:	af00      	add	r7, sp, #0
 c0018ce:	6078      	str	r0, [r7, #4]
    debug_count++;
 c0018d0:	4b58      	ldr	r3, [pc, #352]	@ (c001a34 <CFA_ENGINE_new_log_entry+0x16c>)
 c0018d2:	681b      	ldr	r3, [r3, #0]
 c0018d4:	3301      	adds	r3, #1
 c0018d6:	4a57      	ldr	r2, [pc, #348]	@ (c001a34 <CFA_ENGINE_new_log_entry+0x16c>)
 c0018d8:	6013      	str	r3, [r2, #0]
	logging_start = HAL_GetTick();
 c0018da:	f004 f855 	bl	c005988 <HAL_GetTick>
 c0018de:	4603      	mov	r3, r0
 c0018e0:	4a55      	ldr	r2, [pc, #340]	@ (c001a38 <CFA_ENGINE_new_log_entry+0x170>)
 c0018e2:	6013      	str	r3, [r2, #0]
	if (report_secure.num_CF_Log_size < 0){
 c0018e4:	4b55      	ldr	r3, [pc, #340]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c0018e6:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c0018ea:	2b00      	cmp	r3, #0
 c0018ec:	da09      	bge.n	c001902 <CFA_ENGINE_new_log_entry+0x3a>
	    report_secure.num_CF_Log_size++;
 c0018ee:	4b53      	ldr	r3, [pc, #332]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c0018f0:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c0018f4:	b29b      	uxth	r3, r3
 c0018f6:	3301      	adds	r3, #1
 c0018f8:	b29b      	uxth	r3, r3
 c0018fa:	b21a      	sxth	r2, r3
 c0018fc:	4b4f      	ldr	r3, [pc, #316]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c0018fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	}

	size = 4;
 c001902:	4b4f      	ldr	r3, [pc, #316]	@ (c001a40 <CFA_ENGINE_new_log_entry+0x178>)
 c001904:	2204      	movs	r2, #4
 c001906:	601a      	str	r2, [r3, #0]
	for(int i=0; i<4; i++){
 c001908:	2300      	movs	r3, #0
 c00190a:	617b      	str	r3, [r7, #20]
 c00190c:	e00b      	b.n	c001926 <CFA_ENGINE_new_log_entry+0x5e>
		to_log[i] = ((uint8_t *)&value)[i];
 c00190e:	697b      	ldr	r3, [r7, #20]
 c001910:	1d3a      	adds	r2, r7, #4
 c001912:	4413      	add	r3, r2
 c001914:	7819      	ldrb	r1, [r3, #0]
 c001916:	4a4b      	ldr	r2, [pc, #300]	@ (c001a44 <CFA_ENGINE_new_log_entry+0x17c>)
 c001918:	697b      	ldr	r3, [r7, #20]
 c00191a:	4413      	add	r3, r2
 c00191c:	460a      	mov	r2, r1
 c00191e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 c001920:	697b      	ldr	r3, [r7, #20]
 c001922:	3301      	adds	r3, #1
 c001924:	617b      	str	r3, [r7, #20]
 c001926:	697b      	ldr	r3, [r7, #20]
 c001928:	2b03      	cmp	r3, #3
 c00192a:	ddf0      	ble.n	c00190e <CFA_ENGINE_new_log_entry+0x46>
	}

	if (debug_count == 1499){
 c00192c:	4b41      	ldr	r3, [pc, #260]	@ (c001a34 <CFA_ENGINE_new_log_entry+0x16c>)
 c00192e:	681b      	ldr	r3, [r3, #0]
 c001930:	f240 52db 	movw	r2, #1499	@ 0x5db
 c001934:	4293      	cmp	r3, r2
 c001936:	d101      	bne.n	c00193c <CFA_ENGINE_new_log_entry+0x74>
		int temp = 0;
 c001938:	2300      	movs	r3, #0
 c00193a:	60fb      	str	r3, [r7, #12]
	}
	spec = SPECCFA_process_log_entry(value, &report_secure, to_log);
 c00193c:	687b      	ldr	r3, [r7, #4]
 c00193e:	4a41      	ldr	r2, [pc, #260]	@ (c001a44 <CFA_ENGINE_new_log_entry+0x17c>)
 c001940:	493e      	ldr	r1, [pc, #248]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c001942:	4618      	mov	r0, r3
 c001944:	f000 ff2a 	bl	c00279c <SPECCFA_process_log_entry>
 c001948:	4603      	mov	r3, r0
 c00194a:	4a3f      	ldr	r2, [pc, #252]	@ (c001a48 <CFA_ENGINE_new_log_entry+0x180>)
 c00194c:	6013      	str	r3, [r2, #0]
	size = prefix_handler(value, &report_secure, to_log);
 c00194e:	687b      	ldr	r3, [r7, #4]
 c001950:	4a3c      	ldr	r2, [pc, #240]	@ (c001a44 <CFA_ENGINE_new_log_entry+0x17c>)
 c001952:	493a      	ldr	r1, [pc, #232]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c001954:	4618      	mov	r0, r3
 c001956:	f000 fc0b 	bl	c002170 <prefix_handler>
 c00195a:	4603      	mov	r3, r0
 c00195c:	461a      	mov	r2, r3
 c00195e:	4b38      	ldr	r3, [pc, #224]	@ (c001a40 <CFA_ENGINE_new_log_entry+0x178>)
 c001960:	601a      	str	r2, [r3, #0]
	size = huffman(&report_secure, to_log, size, spec);
 c001962:	4b37      	ldr	r3, [pc, #220]	@ (c001a40 <CFA_ENGINE_new_log_entry+0x178>)
 c001964:	681b      	ldr	r3, [r3, #0]
 c001966:	461a      	mov	r2, r3
 c001968:	4b37      	ldr	r3, [pc, #220]	@ (c001a48 <CFA_ENGINE_new_log_entry+0x180>)
 c00196a:	681b      	ldr	r3, [r3, #0]
 c00196c:	4935      	ldr	r1, [pc, #212]	@ (c001a44 <CFA_ENGINE_new_log_entry+0x17c>)
 c00196e:	4833      	ldr	r0, [pc, #204]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c001970:	f000 f990 	bl	c001c94 <huffman>
 c001974:	4603      	mov	r3, r0
 c001976:	461a      	mov	r2, r3
 c001978:	4b31      	ldr	r3, [pc, #196]	@ (c001a40 <CFA_ENGINE_new_log_entry+0x178>)
 c00197a:	601a      	str	r2, [r3, #0]

	for (int i=0;i<size;i++){
 c00197c:	2300      	movs	r3, #0
 c00197e:	613b      	str	r3, [r7, #16]
 c001980:	e040      	b.n	c001a04 <CFA_ENGINE_new_log_entry+0x13c>
		if(report_secure.num_CF_Log_size == MAX_LOG_SIZE_BYTES){
 c001982:	4b2e      	ldr	r3, [pc, #184]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c001984:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c001988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c00198c:	d11e      	bne.n	c0019cc <CFA_ENGINE_new_log_entry+0x104>
			SPECCFA_reset();
 c00198e:	f000 febd 	bl	c00270c <SPECCFA_reset>
			prefix_reset();
 c001992:	f000 fbc9 	bl	c002128 <prefix_reset>
			cfa_engine_conf.attestation_status = WAITING_PARTIAL;
 c001996:	4b2d      	ldr	r3, [pc, #180]	@ (c001a4c <CFA_ENGINE_new_log_entry+0x184>)
 c001998:	2204      	movs	r2, #4
 c00199a:	711a      	strb	r2, [r3, #4]
			end = HAL_GetTick();
 c00199c:	f003 fff4 	bl	c005988 <HAL_GetTick>
 c0019a0:	4603      	mov	r3, r0
 c0019a2:	4a2b      	ldr	r2, [pc, #172]	@ (c001a50 <CFA_ENGINE_new_log_entry+0x188>)
 c0019a4:	6013      	str	r3, [r2, #0]
			app_exec_time += end - start;
 c0019a6:	4b2a      	ldr	r3, [pc, #168]	@ (c001a50 <CFA_ENGINE_new_log_entry+0x188>)
 c0019a8:	681a      	ldr	r2, [r3, #0]
 c0019aa:	4b2a      	ldr	r3, [pc, #168]	@ (c001a54 <CFA_ENGINE_new_log_entry+0x18c>)
 c0019ac:	681b      	ldr	r3, [r3, #0]
 c0019ae:	1ad2      	subs	r2, r2, r3
 c0019b0:	4b29      	ldr	r3, [pc, #164]	@ (c001a58 <CFA_ENGINE_new_log_entry+0x190>)
 c0019b2:	681b      	ldr	r3, [r3, #0]
 c0019b4:	4413      	add	r3, r2
 c0019b6:	4a28      	ldr	r2, [pc, #160]	@ (c001a58 <CFA_ENGINE_new_log_entry+0x190>)
 c0019b8:	6013      	str	r3, [r2, #0]
			_send_report();
 c0019ba:	f7ff feb1 	bl	c001720 <_send_report>
			_read_serial_loop();
 c0019be:	f7ff fd91 	bl	c0014e4 <_read_serial_loop>
			start = HAL_GetTick();
 c0019c2:	f003 ffe1 	bl	c005988 <HAL_GetTick>
 c0019c6:	4603      	mov	r3, r0
 c0019c8:	4a22      	ldr	r2, [pc, #136]	@ (c001a54 <CFA_ENGINE_new_log_entry+0x18c>)
 c0019ca:	6013      	str	r3, [r2, #0]
		}

		report_secure.CFLog[report_secure.num_CF_Log_size] = to_log[(size-1)-i];
 c0019cc:	4b1c      	ldr	r3, [pc, #112]	@ (c001a40 <CFA_ENGINE_new_log_entry+0x178>)
 c0019ce:	681a      	ldr	r2, [r3, #0]
 c0019d0:	693b      	ldr	r3, [r7, #16]
 c0019d2:	1ad3      	subs	r3, r2, r3
 c0019d4:	3b01      	subs	r3, #1
 c0019d6:	4a19      	ldr	r2, [pc, #100]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c0019d8:	f9b2 2062 	ldrsh.w	r2, [r2, #98]	@ 0x62
 c0019dc:	4611      	mov	r1, r2
 c0019de:	4a19      	ldr	r2, [pc, #100]	@ (c001a44 <CFA_ENGINE_new_log_entry+0x17c>)
 c0019e0:	5cd2      	ldrb	r2, [r2, r3]
 c0019e2:	4b16      	ldr	r3, [pc, #88]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c0019e4:	440b      	add	r3, r1
 c0019e6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
		report_secure.num_CF_Log_size++;
 c0019ea:	4b14      	ldr	r3, [pc, #80]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c0019ec:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c0019f0:	b29b      	uxth	r3, r3
 c0019f2:	3301      	adds	r3, #1
 c0019f4:	b29b      	uxth	r3, r3
 c0019f6:	b21a      	sxth	r2, r3
 c0019f8:	4b10      	ldr	r3, [pc, #64]	@ (c001a3c <CFA_ENGINE_new_log_entry+0x174>)
 c0019fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	for (int i=0;i<size;i++){
 c0019fe:	693b      	ldr	r3, [r7, #16]
 c001a00:	3301      	adds	r3, #1
 c001a02:	613b      	str	r3, [r7, #16]
 c001a04:	693a      	ldr	r2, [r7, #16]
 c001a06:	4b0e      	ldr	r3, [pc, #56]	@ (c001a40 <CFA_ENGINE_new_log_entry+0x178>)
 c001a08:	681b      	ldr	r3, [r3, #0]
 c001a0a:	429a      	cmp	r2, r3
 c001a0c:	d3b9      	bcc.n	c001982 <CFA_ENGINE_new_log_entry+0xba>
	}

	logging_end = HAL_GetTick();
 c001a0e:	f003 ffbb 	bl	c005988 <HAL_GetTick>
 c001a12:	4603      	mov	r3, r0
 c001a14:	4a11      	ldr	r2, [pc, #68]	@ (c001a5c <CFA_ENGINE_new_log_entry+0x194>)
 c001a16:	6013      	str	r3, [r2, #0]
	logging_time += logging_end - logging_start;
 c001a18:	4b10      	ldr	r3, [pc, #64]	@ (c001a5c <CFA_ENGINE_new_log_entry+0x194>)
 c001a1a:	681a      	ldr	r2, [r3, #0]
 c001a1c:	4b06      	ldr	r3, [pc, #24]	@ (c001a38 <CFA_ENGINE_new_log_entry+0x170>)
 c001a1e:	681b      	ldr	r3, [r3, #0]
 c001a20:	1ad2      	subs	r2, r2, r3
 c001a22:	4b0f      	ldr	r3, [pc, #60]	@ (c001a60 <CFA_ENGINE_new_log_entry+0x198>)
 c001a24:	681b      	ldr	r3, [r3, #0]
 c001a26:	4413      	add	r3, r2
 c001a28:	4a0d      	ldr	r2, [pc, #52]	@ (c001a60 <CFA_ENGINE_new_log_entry+0x198>)
 c001a2a:	6013      	str	r3, [r2, #0]
		//}
		logging_end = HAL_GetTick();
		logging_time += logging_end - logging_start;
	}
*/
}
 c001a2c:	bf00      	nop
 c001a2e:	3718      	adds	r7, #24
 c001a30:	46bd      	mov	sp, r7
 c001a32:	bd80      	pop	{r7, pc}
 c001a34:	300009d8 	.word	0x300009d8
 c001a38:	300009b0 	.word	0x300009b0
 c001a3c:	30000724 	.word	0x30000724
 c001a40:	300009b8 	.word	0x300009b8
 c001a44:	300009c0 	.word	0x300009c0
 c001a48:	300009bc 	.word	0x300009bc
 c001a4c:	30000698 	.word	0x30000698
 c001a50:	30000964 	.word	0x30000964
 c001a54:	30000960 	.word	0x30000960
 c001a58:	3000095c 	.word	0x3000095c
 c001a5c:	300009b4 	.word	0x300009b4
 c001a60:	300009ac 	.word	0x300009ac

0c001a64 <CFA_ENGINE_run_attestation>:

void CFA_ENGINE_run_attestation(){
 c001a64:	b580      	push	{r7, lr}
 c001a66:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized != INITIALIZED){
 c001a68:	4b16      	ldr	r3, [pc, #88]	@ (c001ac4 <CFA_ENGINE_run_attestation+0x60>)
 c001a6a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 c001a6e:	2bee      	cmp	r3, #238	@ 0xee
 c001a70:	d126      	bne.n	c001ac0 <CFA_ENGINE_run_attestation+0x5c>
	//	*ERROR = ERROR_CFA_ENGINE_NOT_INITIALIZED;
		return;
	}

	report_secure.num_CF_Log_size = -1;
 c001a72:	4b15      	ldr	r3, [pc, #84]	@ (c001ac8 <CFA_ENGINE_run_attestation+0x64>)
 c001a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 c001a78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	cfa_engine_conf.attestation_status = ACTIVE;
 c001a7c:	4b11      	ldr	r3, [pc, #68]	@ (c001ac4 <CFA_ENGINE_run_attestation+0x60>)
 c001a7e:	2201      	movs	r2, #1
 c001a80:	711a      	strb	r2, [r3, #4]
	report_secure.number_of_logs_sent = 0;
 c001a82:	4b11      	ldr	r3, [pc, #68]	@ (c001ac8 <CFA_ENGINE_run_attestation+0x64>)
 c001a84:	2200      	movs	r2, #0
 c001a86:	f8a3 2166 	strh.w	r2, [r3, #358]	@ 0x166

	// Call the application
	start = HAL_GetTick();
 c001a8a:	f003 ff7d 	bl	c005988 <HAL_GetTick>
 c001a8e:	4603      	mov	r3, r0
 c001a90:	4a0e      	ldr	r2, [pc, #56]	@ (c001acc <CFA_ENGINE_run_attestation+0x68>)
 c001a92:	6013      	str	r3, [r2, #0]
	_run_application();
 c001a94:	f7ff fbf0 	bl	c001278 <_run_application>
//	test_application();
	end = HAL_GetTick();
 c001a98:	f003 ff76 	bl	c005988 <HAL_GetTick>
 c001a9c:	4603      	mov	r3, r0
 c001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (c001ad0 <CFA_ENGINE_run_attestation+0x6c>)
 c001aa0:	6013      	str	r3, [r2, #0]
	app_exec_time += end - start;
 c001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (c001ad0 <CFA_ENGINE_run_attestation+0x6c>)
 c001aa4:	681a      	ldr	r2, [r3, #0]
 c001aa6:	4b09      	ldr	r3, [pc, #36]	@ (c001acc <CFA_ENGINE_run_attestation+0x68>)
 c001aa8:	681b      	ldr	r3, [r3, #0]
 c001aaa:	1ad2      	subs	r2, r2, r3
 c001aac:	4b09      	ldr	r3, [pc, #36]	@ (c001ad4 <CFA_ENGINE_run_attestation+0x70>)
 c001aae:	681b      	ldr	r3, [r3, #0]
 c001ab0:	4413      	add	r3, r2
 c001ab2:	4a08      	ldr	r2, [pc, #32]	@ (c001ad4 <CFA_ENGINE_run_attestation+0x70>)
 c001ab4:	6013      	str	r3, [r2, #0]
	// Set Final report Flag
	report_secure.isFinal = TRUE;
 c001ab6:	4b04      	ldr	r3, [pc, #16]	@ (c001ac8 <CFA_ENGINE_run_attestation+0x64>)
 c001ab8:	2201      	movs	r2, #1
 c001aba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	return;
 c001abe:	e000      	b.n	c001ac2 <CFA_ENGINE_run_attestation+0x5e>
		return;
 c001ac0:	bf00      	nop
}
 c001ac2:	bd80      	pop	{r7, pc}
 c001ac4:	30000698 	.word	0x30000698
 c001ac8:	30000724 	.word	0x30000724
 c001acc:	30000960 	.word	0x30000960
 c001ad0:	30000964 	.word	0x30000964
 c001ad4:	3000095c 	.word	0x3000095c

0c001ad8 <CFA_ENGINE_initialize>:

void CFA_ENGINE_initialize(){
 c001ad8:	b580      	push	{r7, lr}
 c001ada:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized == INITIALIZED){
 c001adc:	4b08      	ldr	r3, [pc, #32]	@ (c001b00 <CFA_ENGINE_initialize+0x28>)
 c001ade:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 c001ae2:	2bee      	cmp	r3, #238	@ 0xee
 c001ae4:	d00a      	beq.n	c001afc <CFA_ENGINE_initialize+0x24>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
	}
	report_secure.bits_left = 8;
 c001ae6:	4b07      	ldr	r3, [pc, #28]	@ (c001b04 <CFA_ENGINE_initialize+0x2c>)
 c001ae8:	2208      	movs	r2, #8
 c001aea:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
	_attest_memory();
 c001aee:	f7ff fe77 	bl	c0017e0 <_attest_memory>
	_setup_data();
 c001af2:	f7ff fb2f 	bl	c001154 <_setup_data>
	_clean();
 c001af6:	f7ff fb89 	bl	c00120c <_clean>

	return;
 c001afa:	e000      	b.n	c001afe <CFA_ENGINE_initialize+0x26>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
 c001afc:	bf00      	nop
}
 c001afe:	bd80      	pop	{r7, pc}
 c001b00:	30000698 	.word	0x30000698
 c001b04:	30000724 	.word	0x30000724

0c001b08 <_heal_function>:
	HAL_NVIC_SystemReset();
	return;
}


void _heal_function(){
 c001b08:	b480      	push	{r7}
 c001b0a:	af00      	add	r7, sp, #0
	while(1);
 c001b0c:	bf00      	nop
 c001b0e:	e7fd      	b.n	c001b0c <_heal_function+0x4>

0c001b10 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 c001b10:	b580      	push	{r7, lr}
 c001b12:	b082      	sub	sp, #8
 c001b14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c001b16:	4b09      	ldr	r3, [pc, #36]	@ (c001b3c <MX_GPIO_Init+0x2c>)
 c001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c001b1a:	4a08      	ldr	r2, [pc, #32]	@ (c001b3c <MX_GPIO_Init+0x2c>)
 c001b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 c001b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 c001b22:	4b06      	ldr	r3, [pc, #24]	@ (c001b3c <MX_GPIO_Init+0x2c>)
 c001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c001b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c001b2a:	607b      	str	r3, [r7, #4]
 c001b2c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 c001b2e:	f004 fd27 	bl	c006580 <HAL_PWREx_EnableVddIO2>

}
 c001b32:	bf00      	nop
 c001b34:	3708      	adds	r7, #8
 c001b36:	46bd      	mov	sp, r7
 c001b38:	bd80      	pop	{r7, pc}
 c001b3a:	bf00      	nop
 c001b3c:	50021000 	.word	0x50021000

0c001b40 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c001b40:	b580      	push	{r7, lr}
 c001b42:	b09c      	sub	sp, #112	@ 0x70
 c001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c001b46:	1d3b      	adds	r3, r7, #4
 c001b48:	226c      	movs	r2, #108	@ 0x6c
 c001b4a:	2100      	movs	r1, #0
 c001b4c:	4618      	mov	r0, r3
 c001b4e:	f007 fa9a 	bl	c009086 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001b52:	f240 3101 	movw	r1, #769	@ 0x301
 c001b56:	2001      	movs	r0, #1
 c001b58:	f004 fa2e 	bl	c005fb8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001b5c:	4603      	mov	r3, r0
 c001b5e:	2b00      	cmp	r3, #0
 c001b60:	d001      	beq.n	c001b66 <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c001b62:	f000 fadb 	bl	c00211c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001b66:	f240 3101 	movw	r1, #769	@ 0x301
 c001b6a:	2002      	movs	r0, #2
 c001b6c:	f004 fa24 	bl	c005fb8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001b70:	4603      	mov	r3, r0
 c001b72:	2b00      	cmp	r3, #0
 c001b74:	d001      	beq.n	c001b7a <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c001b76:	f000 fad1 	bl	c00211c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001b7a:	f240 3101 	movw	r1, #769	@ 0x301
 c001b7e:	2015      	movs	r0, #21
 c001b80:	f004 fa1a 	bl	c005fb8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001b84:	4603      	mov	r3, r0
 c001b86:	2b00      	cmp	r3, #0
 c001b88:	d001      	beq.n	c001b8e <MX_GTZC_S_Init+0x4e>
  {
    Error_Handler();
 c001b8a:	f000 fac7 	bl	c00211c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c001b8e:	2300      	movs	r3, #0
 c001b90:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c001b92:	2300      	movs	r3, #0
 c001b94:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c001b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001b9a:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c001b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001ba0:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c001ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001ba6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c001ba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bac:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c001bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bb2:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c001bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bb8:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c001bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c001bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c001bc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c001bcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c001bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c001bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c001bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c001bde:	2300      	movs	r3, #0
 c001be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c001be2:	2300      	movs	r3, #0
 c001be4:	643b      	str	r3, [r7, #64]	@ 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c001be6:	2300      	movs	r3, #0
 c001be8:	647b      	str	r3, [r7, #68]	@ 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c001bea:	2300      	movs	r3, #0
 c001bec:	64bb      	str	r3, [r7, #72]	@ 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c001bee:	2300      	movs	r3, #0
 c001bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c001bf2:	2300      	movs	r3, #0
 c001bf4:	653b      	str	r3, [r7, #80]	@ 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c001bf6:	2300      	movs	r3, #0
 c001bf8:	657b      	str	r3, [r7, #84]	@ 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c001bfa:	2300      	movs	r3, #0
 c001bfc:	65bb      	str	r3, [r7, #88]	@ 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c001bfe:	2300      	movs	r3, #0
 c001c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c001c02:	2300      	movs	r3, #0
 c001c04:	663b      	str	r3, [r7, #96]	@ 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c001c06:	2300      	movs	r3, #0
 c001c08:	667b      	str	r3, [r7, #100]	@ 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c001c0a:	2300      	movs	r3, #0
 c001c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001c0e:	2300      	movs	r3, #0
 c001c10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001c12:	1d3b      	adds	r3, r7, #4
 c001c14:	4619      	mov	r1, r3
 c001c16:	f04f 5040 	mov.w	r0, #805306368	@ 0x30000000
 c001c1a:	f004 faa5 	bl	c006168 <HAL_GTZC_MPCBB_ConfigMem>
 c001c1e:	4603      	mov	r3, r0
 c001c20:	2b00      	cmp	r3, #0
 c001c22:	d001      	beq.n	c001c28 <MX_GTZC_S_Init+0xe8>
  {
    Error_Handler();
 c001c24:	f000 fa7a 	bl	c00211c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c001c28:	2300      	movs	r3, #0
 c001c2a:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c001c2c:	2300      	movs	r3, #0
 c001c2e:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c001c30:	2300      	movs	r3, #0
 c001c32:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c001c34:	2300      	movs	r3, #0
 c001c36:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c001c38:	2300      	movs	r3, #0
 c001c3a:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c001c3c:	2300      	movs	r3, #0
 c001c3e:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c001c40:	2300      	movs	r3, #0
 c001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c001c44:	2300      	movs	r3, #0
 c001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001c48:	2300      	movs	r3, #0
 c001c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001c4c:	1d3b      	adds	r3, r7, #4
 c001c4e:	4619      	mov	r1, r3
 c001c50:	4809      	ldr	r0, [pc, #36]	@ (c001c78 <MX_GTZC_S_Init+0x138>)
 c001c52:	f004 fa89 	bl	c006168 <HAL_GTZC_MPCBB_ConfigMem>
 c001c56:	4603      	mov	r3, r0
 c001c58:	2b00      	cmp	r3, #0
 c001c5a:	d001      	beq.n	c001c60 <MX_GTZC_S_Init+0x120>
  {
    Error_Handler();
 c001c5c:	f000 fa5e 	bl	c00211c <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_LPUART1) != HAL_OK)
 c001c60:	2015      	movs	r0, #21
 c001c62:	f004 fb05 	bl	c006270 <HAL_GTZC_TZIC_EnableIT>
 c001c66:	4603      	mov	r3, r0
 c001c68:	2b00      	cmp	r3, #0
 c001c6a:	d001      	beq.n	c001c70 <MX_GTZC_S_Init+0x130>
  {
    Error_Handler();
 c001c6c:	f000 fa56 	bl	c00211c <Error_Handler>
  }

  /* USER CODE END GTZC_S_Init 2 */

}
 c001c70:	bf00      	nop
 c001c72:	3770      	adds	r7, #112	@ 0x70
 c001c74:	46bd      	mov	sp, r7
 c001c76:	bd80      	pop	{r7, pc}
 c001c78:	30030000 	.word	0x30030000

0c001c7c <huffman_start>:
short bits_left_local;
int shift_amount;
uint32_t mask;
uint32_t selected_bits;
int safety_save;
void huffman_start(){
 c001c7c:	b480      	push	{r7}
 c001c7e:	af00      	add	r7, sp, #0
	encoded_byte = 0;
 c001c80:	4b03      	ldr	r3, [pc, #12]	@ (c001c90 <huffman_start+0x14>)
 c001c82:	2200      	movs	r2, #0
 c001c84:	601a      	str	r2, [r3, #0]
}
 c001c86:	bf00      	nop
 c001c88:	46bd      	mov	sp, r7
 c001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c8e:	4770      	bx	lr
 c001c90:	300009f4 	.word	0x300009f4

0c001c94 <huffman>:

int huffman(CFA_REPORT * report_secure, uint8_t * to_log, int original_size, int speculating){
 c001c94:	b480      	push	{r7}
 c001c96:	b08b      	sub	sp, #44	@ 0x2c
 c001c98:	af00      	add	r7, sp, #0
 c001c9a:	60f8      	str	r0, [r7, #12]
 c001c9c:	60b9      	str	r1, [r7, #8]
 c001c9e:	607a      	str	r2, [r7, #4]
 c001ca0:	603b      	str	r3, [r7, #0]

	// Huffman encode each byte
	int encoded_size = 0;
 c001ca2:	2300      	movs	r3, #0
 c001ca4:	627b      	str	r3, [r7, #36]	@ 0x24

	bits_left_local = report_secure -> bits_left;
 c001ca6:	68fb      	ldr	r3, [r7, #12]
 c001ca8:	f9b3 2168 	ldrsh.w	r2, [r3, #360]	@ 0x168
 c001cac:	4b88      	ldr	r3, [pc, #544]	@ (c001ed0 <huffman+0x23c>)
 c001cae:	801a      	strh	r2, [r3, #0]
	if(speculating == 1 && safety_save <= MAX_LOG_SIZE_BYTES){
 c001cb0:	683b      	ldr	r3, [r7, #0]
 c001cb2:	2b01      	cmp	r3, #1
 c001cb4:	d12f      	bne.n	c001d16 <huffman+0x82>
 c001cb6:	4b87      	ldr	r3, [pc, #540]	@ (c001ed4 <huffman+0x240>)
 c001cb8:	681b      	ldr	r3, [r3, #0]
 c001cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c001cbe:	dc2a      	bgt.n	c001d16 <huffman+0x82>
		for(int j=0; j<8-bits_left_local; j++){
 c001cc0:	2300      	movs	r3, #0
 c001cc2:	623b      	str	r3, [r7, #32]
 c001cc4:	e009      	b.n	c001cda <huffman+0x46>
		    mask = 0x00000080 | (mask >> 1);
 c001cc6:	4b84      	ldr	r3, [pc, #528]	@ (c001ed8 <huffman+0x244>)
 c001cc8:	681b      	ldr	r3, [r3, #0]
 c001cca:	085b      	lsrs	r3, r3, #1
 c001ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c001cd0:	4a81      	ldr	r2, [pc, #516]	@ (c001ed8 <huffman+0x244>)
 c001cd2:	6013      	str	r3, [r2, #0]
		for(int j=0; j<8-bits_left_local; j++){
 c001cd4:	6a3b      	ldr	r3, [r7, #32]
 c001cd6:	3301      	adds	r3, #1
 c001cd8:	623b      	str	r3, [r7, #32]
 c001cda:	4b7d      	ldr	r3, [pc, #500]	@ (c001ed0 <huffman+0x23c>)
 c001cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 c001ce0:	f1c3 0308 	rsb	r3, r3, #8
 c001ce4:	6a3a      	ldr	r2, [r7, #32]
 c001ce6:	429a      	cmp	r2, r3
 c001ce8:	dbed      	blt.n	c001cc6 <huffman+0x32>
		}
		encoded_byte = report_secure->CFLog[report_secure->num_CF_Log_size] & mask;
 c001cea:	68fb      	ldr	r3, [r7, #12]
 c001cec:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c001cf0:	461a      	mov	r2, r3
 c001cf2:	68fb      	ldr	r3, [r7, #12]
 c001cf4:	4413      	add	r3, r2
 c001cf6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 c001cfa:	461a      	mov	r2, r3
 c001cfc:	4b76      	ldr	r3, [pc, #472]	@ (c001ed8 <huffman+0x244>)
 c001cfe:	681b      	ldr	r3, [r3, #0]
 c001d00:	4013      	ands	r3, r2
 c001d02:	4a76      	ldr	r2, [pc, #472]	@ (c001edc <huffman+0x248>)
 c001d04:	6013      	str	r3, [r2, #0]
		encoded_byte = encoded_byte << 24;
 c001d06:	4b75      	ldr	r3, [pc, #468]	@ (c001edc <huffman+0x248>)
 c001d08:	681b      	ldr	r3, [r3, #0]
 c001d0a:	061b      	lsls	r3, r3, #24
 c001d0c:	4a73      	ldr	r2, [pc, #460]	@ (c001edc <huffman+0x248>)
 c001d0e:	6013      	str	r3, [r2, #0]
		mask = 0;
 c001d10:	4b71      	ldr	r3, [pc, #452]	@ (c001ed8 <huffman+0x244>)
 c001d12:	2200      	movs	r2, #0
 c001d14:	601a      	str	r2, [r3, #0]
	}

	for(int i=original_size-1; i>-1; i--){
 c001d16:	687b      	ldr	r3, [r7, #4]
 c001d18:	3b01      	subs	r3, #1
 c001d1a:	61fb      	str	r3, [r7, #28]
 c001d1c:	e099      	b.n	c001e52 <huffman+0x1be>
		// Fetch encoding
		code = HUFFMAN_TABLE[to_log[i]];
 c001d1e:	69fb      	ldr	r3, [r7, #28]
 c001d20:	68ba      	ldr	r2, [r7, #8]
 c001d22:	4413      	add	r3, r2
 c001d24:	781b      	ldrb	r3, [r3, #0]
 c001d26:	461a      	mov	r2, r3
 c001d28:	4b6d      	ldr	r3, [pc, #436]	@ (c001ee0 <huffman+0x24c>)
 c001d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001d2e:	461a      	mov	r2, r3
 c001d30:	4b6c      	ldr	r3, [pc, #432]	@ (c001ee4 <huffman+0x250>)
 c001d32:	601a      	str	r2, [r3, #0]
		length = HUFFMAN_LENGTHS[to_log[i]];
 c001d34:	69fb      	ldr	r3, [r7, #28]
 c001d36:	68ba      	ldr	r2, [r7, #8]
 c001d38:	4413      	add	r3, r2
 c001d3a:	781b      	ldrb	r3, [r3, #0]
 c001d3c:	461a      	mov	r2, r3
 c001d3e:	4b6a      	ldr	r3, [pc, #424]	@ (c001ee8 <huffman+0x254>)
 c001d40:	5c9a      	ldrb	r2, [r3, r2]
 c001d42:	4b6a      	ldr	r3, [pc, #424]	@ (c001eec <huffman+0x258>)
 c001d44:	701a      	strb	r2, [r3, #0]
		code = code << (32-length);
 c001d46:	4b67      	ldr	r3, [pc, #412]	@ (c001ee4 <huffman+0x250>)
 c001d48:	681a      	ldr	r2, [r3, #0]
 c001d4a:	4b68      	ldr	r3, [pc, #416]	@ (c001eec <huffman+0x258>)
 c001d4c:	781b      	ldrb	r3, [r3, #0]
 c001d4e:	f1c3 0320 	rsb	r3, r3, #32
 c001d52:	fa02 f303 	lsl.w	r3, r2, r3
 c001d56:	4a63      	ldr	r2, [pc, #396]	@ (c001ee4 <huffman+0x250>)
 c001d58:	6013      	str	r3, [r2, #0]


		// encode the byte
	    while(length > 0){
 c001d5a:	e073      	b.n	c001e44 <huffman+0x1b0>

	    	// Determine how many bits to move
	        if (length >= bits_left_local){
 c001d5c:	4b63      	ldr	r3, [pc, #396]	@ (c001eec <huffman+0x258>)
 c001d5e:	781b      	ldrb	r3, [r3, #0]
 c001d60:	461a      	mov	r2, r3
 c001d62:	4b5b      	ldr	r3, [pc, #364]	@ (c001ed0 <huffman+0x23c>)
 c001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 c001d68:	429a      	cmp	r2, r3
 c001d6a:	db06      	blt.n	c001d7a <huffman+0xe6>
	        	shift_amount = bits_left_local;
 c001d6c:	4b58      	ldr	r3, [pc, #352]	@ (c001ed0 <huffman+0x23c>)
 c001d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 c001d72:	461a      	mov	r2, r3
 c001d74:	4b5e      	ldr	r3, [pc, #376]	@ (c001ef0 <huffman+0x25c>)
 c001d76:	601a      	str	r2, [r3, #0]
 c001d78:	e004      	b.n	c001d84 <huffman+0xf0>
	        }else{
	        	shift_amount = length;
 c001d7a:	4b5c      	ldr	r3, [pc, #368]	@ (c001eec <huffman+0x258>)
 c001d7c:	781b      	ldrb	r3, [r3, #0]
 c001d7e:	461a      	mov	r2, r3
 c001d80:	4b5b      	ldr	r3, [pc, #364]	@ (c001ef0 <huffman+0x25c>)
 c001d82:	601a      	str	r2, [r3, #0]
	        }

	        for(int j=0; j<shift_amount; j++){
 c001d84:	2300      	movs	r3, #0
 c001d86:	61bb      	str	r3, [r7, #24]
 c001d88:	e009      	b.n	c001d9e <huffman+0x10a>
	        	mask = 0x80000000 | (mask >> 1);
 c001d8a:	4b53      	ldr	r3, [pc, #332]	@ (c001ed8 <huffman+0x244>)
 c001d8c:	681b      	ldr	r3, [r3, #0]
 c001d8e:	085b      	lsrs	r3, r3, #1
 c001d90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 c001d94:	4a50      	ldr	r2, [pc, #320]	@ (c001ed8 <huffman+0x244>)
 c001d96:	6013      	str	r3, [r2, #0]
	        for(int j=0; j<shift_amount; j++){
 c001d98:	69bb      	ldr	r3, [r7, #24]
 c001d9a:	3301      	adds	r3, #1
 c001d9c:	61bb      	str	r3, [r7, #24]
 c001d9e:	4b54      	ldr	r3, [pc, #336]	@ (c001ef0 <huffman+0x25c>)
 c001da0:	681b      	ldr	r3, [r3, #0]
 c001da2:	69ba      	ldr	r2, [r7, #24]
 c001da4:	429a      	cmp	r2, r3
 c001da6:	dbf0      	blt.n	c001d8a <huffman+0xf6>
	        }

	        selected_bits = mask & code;
 c001da8:	4b4b      	ldr	r3, [pc, #300]	@ (c001ed8 <huffman+0x244>)
 c001daa:	681a      	ldr	r2, [r3, #0]
 c001dac:	4b4d      	ldr	r3, [pc, #308]	@ (c001ee4 <huffman+0x250>)
 c001dae:	681b      	ldr	r3, [r3, #0]
 c001db0:	4013      	ands	r3, r2
 c001db2:	4a50      	ldr	r2, [pc, #320]	@ (c001ef4 <huffman+0x260>)
 c001db4:	6013      	str	r3, [r2, #0]
	        mask = 0;
 c001db6:	4b48      	ldr	r3, [pc, #288]	@ (c001ed8 <huffman+0x244>)
 c001db8:	2200      	movs	r2, #0
 c001dba:	601a      	str	r2, [r3, #0]
	        code = code << shift_amount;
 c001dbc:	4b49      	ldr	r3, [pc, #292]	@ (c001ee4 <huffman+0x250>)
 c001dbe:	681a      	ldr	r2, [r3, #0]
 c001dc0:	4b4b      	ldr	r3, [pc, #300]	@ (c001ef0 <huffman+0x25c>)
 c001dc2:	681b      	ldr	r3, [r3, #0]
 c001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 c001dc8:	4a46      	ldr	r2, [pc, #280]	@ (c001ee4 <huffman+0x250>)
 c001dca:	6013      	str	r3, [r2, #0]
	        length = length - shift_amount;
 c001dcc:	4b47      	ldr	r3, [pc, #284]	@ (c001eec <huffman+0x258>)
 c001dce:	781a      	ldrb	r2, [r3, #0]
 c001dd0:	4b47      	ldr	r3, [pc, #284]	@ (c001ef0 <huffman+0x25c>)
 c001dd2:	681b      	ldr	r3, [r3, #0]
 c001dd4:	b2db      	uxtb	r3, r3
 c001dd6:	1ad3      	subs	r3, r2, r3
 c001dd8:	b2da      	uxtb	r2, r3
 c001dda:	4b44      	ldr	r3, [pc, #272]	@ (c001eec <huffman+0x258>)
 c001ddc:	701a      	strb	r2, [r3, #0]

	        selected_bits = selected_bits >> (8-bits_left_local);
 c001dde:	4b45      	ldr	r3, [pc, #276]	@ (c001ef4 <huffman+0x260>)
 c001de0:	681a      	ldr	r2, [r3, #0]
 c001de2:	4b3b      	ldr	r3, [pc, #236]	@ (c001ed0 <huffman+0x23c>)
 c001de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 c001de8:	f1c3 0308 	rsb	r3, r3, #8
 c001dec:	fa22 f303 	lsr.w	r3, r2, r3
 c001df0:	4a40      	ldr	r2, [pc, #256]	@ (c001ef4 <huffman+0x260>)
 c001df2:	6013      	str	r3, [r2, #0]
	        encoded_byte = encoded_byte | selected_bits;
 c001df4:	4b39      	ldr	r3, [pc, #228]	@ (c001edc <huffman+0x248>)
 c001df6:	681a      	ldr	r2, [r3, #0]
 c001df8:	4b3e      	ldr	r3, [pc, #248]	@ (c001ef4 <huffman+0x260>)
 c001dfa:	681b      	ldr	r3, [r3, #0]
 c001dfc:	4313      	orrs	r3, r2
 c001dfe:	4a37      	ldr	r2, [pc, #220]	@ (c001edc <huffman+0x248>)
 c001e00:	6013      	str	r3, [r2, #0]
	        bits_left_local = bits_left_local - shift_amount;
 c001e02:	4b33      	ldr	r3, [pc, #204]	@ (c001ed0 <huffman+0x23c>)
 c001e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 c001e08:	b29a      	uxth	r2, r3
 c001e0a:	4b39      	ldr	r3, [pc, #228]	@ (c001ef0 <huffman+0x25c>)
 c001e0c:	681b      	ldr	r3, [r3, #0]
 c001e0e:	b29b      	uxth	r3, r3
 c001e10:	1ad3      	subs	r3, r2, r3
 c001e12:	b29b      	uxth	r3, r3
 c001e14:	b21a      	sxth	r2, r3
 c001e16:	4b2e      	ldr	r3, [pc, #184]	@ (c001ed0 <huffman+0x23c>)
 c001e18:	801a      	strh	r2, [r3, #0]
	        if (bits_left_local == 0){
 c001e1a:	4b2d      	ldr	r3, [pc, #180]	@ (c001ed0 <huffman+0x23c>)
 c001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 c001e20:	2b00      	cmp	r3, #0
 c001e22:	d10f      	bne.n	c001e44 <huffman+0x1b0>
	        	temp_buffer[encoded_size] = ((uint8_t*) &encoded_byte)[3];
 c001e24:	4b2d      	ldr	r3, [pc, #180]	@ (c001edc <huffman+0x248>)
 c001e26:	78d9      	ldrb	r1, [r3, #3]
 c001e28:	4a33      	ldr	r2, [pc, #204]	@ (c001ef8 <huffman+0x264>)
 c001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001e2c:	4413      	add	r3, r2
 c001e2e:	460a      	mov	r2, r1
 c001e30:	701a      	strb	r2, [r3, #0]
	        	encoded_size++;
 c001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001e34:	3301      	adds	r3, #1
 c001e36:	627b      	str	r3, [r7, #36]	@ 0x24
	        	encoded_byte = 0;
 c001e38:	4b28      	ldr	r3, [pc, #160]	@ (c001edc <huffman+0x248>)
 c001e3a:	2200      	movs	r2, #0
 c001e3c:	601a      	str	r2, [r3, #0]
	        	bits_left_local = 8;
 c001e3e:	4b24      	ldr	r3, [pc, #144]	@ (c001ed0 <huffman+0x23c>)
 c001e40:	2208      	movs	r2, #8
 c001e42:	801a      	strh	r2, [r3, #0]
	    while(length > 0){
 c001e44:	4b29      	ldr	r3, [pc, #164]	@ (c001eec <huffman+0x258>)
 c001e46:	781b      	ldrb	r3, [r3, #0]
 c001e48:	2b00      	cmp	r3, #0
 c001e4a:	d187      	bne.n	c001d5c <huffman+0xc8>
	for(int i=original_size-1; i>-1; i--){
 c001e4c:	69fb      	ldr	r3, [r7, #28]
 c001e4e:	3b01      	subs	r3, #1
 c001e50:	61fb      	str	r3, [r7, #28]
 c001e52:	69fb      	ldr	r3, [r7, #28]
 c001e54:	2b00      	cmp	r3, #0
 c001e56:	f6bf af62 	bge.w	c001d1e <huffman+0x8a>
	        }
	    }
	}

	safety_save = report_secure->num_CF_Log_size + encoded_size;
 c001e5a:	68fb      	ldr	r3, [r7, #12]
 c001e5c:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c001e60:	461a      	mov	r2, r3
 c001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001e64:	4413      	add	r3, r2
 c001e66:	4a1b      	ldr	r2, [pc, #108]	@ (c001ed4 <huffman+0x240>)
 c001e68:	6013      	str	r3, [r2, #0]
	if(!(safety_save > MAX_LOG_SIZE_BYTES+1)){
 c001e6a:	4b1a      	ldr	r3, [pc, #104]	@ (c001ed4 <huffman+0x240>)
 c001e6c:	681b      	ldr	r3, [r3, #0]
 c001e6e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 c001e72:	da0c      	bge.n	c001e8e <huffman+0x1fa>
	    report_secure->CFLog[report_secure->num_CF_Log_size + encoded_size] = ((uint8_t*) &encoded_byte)[3];
 c001e74:	68fb      	ldr	r3, [r7, #12]
 c001e76:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c001e7a:	461a      	mov	r2, r3
 c001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001e7e:	4413      	add	r3, r2
 c001e80:	4a16      	ldr	r2, [pc, #88]	@ (c001edc <huffman+0x248>)
 c001e82:	78d1      	ldrb	r1, [r2, #3]
 c001e84:	68fa      	ldr	r2, [r7, #12]
 c001e86:	4413      	add	r3, r2
 c001e88:	460a      	mov	r2, r1
 c001e8a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	}
	report_secure -> bits_left = bits_left_local;
 c001e8e:	4b10      	ldr	r3, [pc, #64]	@ (c001ed0 <huffman+0x23c>)
 c001e90:	f9b3 2000 	ldrsh.w	r2, [r3]
 c001e94:	68fb      	ldr	r3, [r7, #12]
 c001e96:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
	for(int i=0; i<encoded_size; i++){
 c001e9a:	2300      	movs	r3, #0
 c001e9c:	617b      	str	r3, [r7, #20]
 c001e9e:	e00c      	b.n	c001eba <huffman+0x226>
		to_log[i] = temp_buffer[(encoded_size-1)-i];
 c001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001ea2:	1e5a      	subs	r2, r3, #1
 c001ea4:	697b      	ldr	r3, [r7, #20]
 c001ea6:	1ad2      	subs	r2, r2, r3
 c001ea8:	697b      	ldr	r3, [r7, #20]
 c001eaa:	68b9      	ldr	r1, [r7, #8]
 c001eac:	440b      	add	r3, r1
 c001eae:	4912      	ldr	r1, [pc, #72]	@ (c001ef8 <huffman+0x264>)
 c001eb0:	5c8a      	ldrb	r2, [r1, r2]
 c001eb2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<encoded_size; i++){
 c001eb4:	697b      	ldr	r3, [r7, #20]
 c001eb6:	3301      	adds	r3, #1
 c001eb8:	617b      	str	r3, [r7, #20]
 c001eba:	697a      	ldr	r2, [r7, #20]
 c001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001ebe:	429a      	cmp	r2, r3
 c001ec0:	dbee      	blt.n	c001ea0 <huffman+0x20c>
	}
	return encoded_size;
 c001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 c001ec4:	4618      	mov	r0, r3
 c001ec6:	372c      	adds	r7, #44	@ 0x2c
 c001ec8:	46bd      	mov	sp, r7
 c001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ece:	4770      	bx	lr
 c001ed0:	300009fe 	.word	0x300009fe
 c001ed4:	30000a0c 	.word	0x30000a0c
 c001ed8:	30000a04 	.word	0x30000a04
 c001edc:	300009f4 	.word	0x300009f4
 c001ee0:	30000060 	.word	0x30000060
 c001ee4:	300009f8 	.word	0x300009f8
 c001ee8:	30000460 	.word	0x30000460
 c001eec:	300009fc 	.word	0x300009fc
 c001ef0:	30000a00 	.word	0x30000a00
 c001ef4:	30000a08 	.word	0x30000a08
 c001ef8:	300009dc 	.word	0x300009dc

0c001efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c001efc:	b580      	push	{r7, lr}
 c001efe:	b082      	sub	sp, #8
 c001f00:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  //enable SecureFault_Handler, without this HardFault_Handler will be raised.
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c001f02:	4b16      	ldr	r3, [pc, #88]	@ (c001f5c <main+0x60>)
 c001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c001f06:	4a15      	ldr	r2, [pc, #84]	@ (c001f5c <main+0x60>)
 c001f08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 c001f0c:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c001f0e:	f003 fcd0 	bl	c0058b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c001f12:	f000 f8b3 	bl	c00207c <SystemClock_Config>

  //init mpu configs
  MPU_init();
 c001f16:	f000 f825 	bl	c001f64 <MPU_init>

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c001f1a:	f7ff fe11 	bl	c001b40 <MX_GTZC_S_Init>

  /* USER CODE BEGIN SysInit */

  // Enable flash controller clock
  __HAL_RCC_FLASH_CLK_ENABLE();
 c001f1e:	4b10      	ldr	r3, [pc, #64]	@ (c001f60 <main+0x64>)
 c001f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c001f22:	4a0f      	ldr	r2, [pc, #60]	@ (c001f60 <main+0x64>)
 c001f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c001f28:	6493      	str	r3, [r2, #72]	@ 0x48
 c001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (c001f60 <main+0x64>)
 c001f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c001f32:	607b      	str	r3, [r7, #4]
 c001f34:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c001f36:	f7ff fdeb 	bl	c001b10 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 c001f3a:	f003 fbbd 	bl	c0056b8 <MX_LPUART1_UART_Init>
//  MX_TIM3_Init();
//  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  FPU_Init();
 c001f3e:	f000 f841 	bl	c001fc4 <FPU_Init>
  CFA_ENGINE_initialize();
 c001f42:	f7ff fdc9 	bl	c001ad8 <CFA_ENGINE_initialize>
  init_spec();
 c001f46:	f000 fbdb 	bl	c002700 <init_spec>
  prefix_reset();
 c001f4a:	f000 f8ed 	bl	c002128 <prefix_reset>
  huffman_start();
 c001f4e:	f7ff fe95 	bl	c001c7c <huffman_start>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/


  NonSecure_Init();
 c001f52:	f000 f84f 	bl	c001ff4 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c001f56:	bf00      	nop
 c001f58:	e7fd      	b.n	c001f56 <main+0x5a>
 c001f5a:	bf00      	nop
 c001f5c:	e000ed00 	.word	0xe000ed00
 c001f60:	50021000 	.word	0x50021000

0c001f64 <MPU_init>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void MPU_init(){
 c001f64:	b580      	push	{r7, lr}
 c001f66:	b084      	sub	sp, #16
 c001f68:	af00      	add	r7, sp, #0
//	                                                     This parameter can be a value of @ref CORTEX_MPU_Instruction_Access            */
//	  uint8_t                IsShareable;           /*!< Specifies the shareability status of the protected region.
//	                                                     This parameter can be a value of @ref CORTEX_MPU_Access_Shareable              */

	/* Disable MPU */
	HAL_MPU_Disable();
 c001f6a:	f003 fe49 	bl	c005c00 <HAL_MPU_Disable>

	/* Configure NS-RAM region as Region N°0 as R/W region */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 c001f6e:	2301      	movs	r3, #1
 c001f70:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20000000;
 c001f72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 c001f76:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.LimitAddress = 0x20040000;
 c001f78:	4b10      	ldr	r3, [pc, #64]	@ (c001fbc <MPU_init+0x58>)
 c001f7a:	60bb      	str	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RW;
 c001f7c:	2301      	movs	r3, #1
 c001f7e:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 c001f80:	2300      	movs	r3, #0
 c001f82:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 c001f84:	2301      	movs	r3, #1
 c001f86:	73bb      	strb	r3, [r7, #14]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 c001f88:	463b      	mov	r3, r7
 c001f8a:	4618      	mov	r0, r3
 c001f8c:	f003 fe4a 	bl	c005c24 <HAL_MPU_ConfigRegion>

	/* Configure NS-FLASH region as REGION N°1 as R/X region */
	MPU_InitStruct.BaseAddress = 0x08000000;
 c001f90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 c001f94:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.LimitAddress = 0x08080000;
 c001f96:	4b0a      	ldr	r3, [pc, #40]	@ (c001fc0 <MPU_init+0x5c>)
 c001f98:	60bb      	str	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RO;
 c001f9a:	2303      	movs	r3, #3
 c001f9c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 c001f9e:	2301      	movs	r3, #1
 c001fa0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 c001fa2:	2300      	movs	r3, #0
 c001fa4:	73bb      	strb	r3, [r7, #14]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 c001fa6:	463b      	mov	r3, r7
 c001fa8:	4618      	mov	r0, r3
 c001faa:	f003 fe3b 	bl	c005c24 <HAL_MPU_ConfigRegion>

	/* Enable MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 c001fae:	2004      	movs	r0, #4
 c001fb0:	f003 fe06 	bl	c005bc0 <HAL_MPU_Enable>
}
 c001fb4:	bf00      	nop
 c001fb6:	3710      	adds	r7, #16
 c001fb8:	46bd      	mov	sp, r7
 c001fba:	bd80      	pop	{r7, pc}
 c001fbc:	20040000 	.word	0x20040000
 c001fc0:	08080000 	.word	0x08080000

0c001fc4 <FPU_Init>:

void FPU_Init(void) {
 c001fc4:	b480      	push	{r7}
 c001fc6:	b083      	sub	sp, #12
 c001fc8:	af00      	add	r7, sp, #0
    // FPU access is controlled by the CPACR register
    // The CPACR is an ARMv8-M system control register (SCTLR)

    // Access the SCTLR register
    volatile uint32_t* cpacr = (volatile uint32_t*)0xE000ED88;
 c001fca:	4b09      	ldr	r3, [pc, #36]	@ (c001ff0 <FPU_Init+0x2c>)
 c001fcc:	607b      	str	r3, [r7, #4]

    // Enable full access to the FPU for both secure and non-secure worlds
    *cpacr |= (0xF << 20);  // Set bits 20-23 to 1111 to enable full FPU access
 c001fce:	687b      	ldr	r3, [r7, #4]
 c001fd0:	681b      	ldr	r3, [r3, #0]
 c001fd2:	f443 0270 	orr.w	r2, r3, #15728640	@ 0xf00000
 c001fd6:	687b      	ldr	r3, [r7, #4]
 c001fd8:	601a      	str	r2, [r3, #0]

    // DSB (Data Synchronization Barrier) to ensure the register write completes
    __asm volatile ("dsb");
 c001fda:	f3bf 8f4f 	dsb	sy

    // ISB (Instruction Synchronization Barrier) to flush the pipeline
    __asm volatile ("isb");
 c001fde:	f3bf 8f6f 	isb	sy
}
 c001fe2:	bf00      	nop
 c001fe4:	370c      	adds	r7, #12
 c001fe6:	46bd      	mov	sp, r7
 c001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001fec:	4770      	bx	lr
 c001fee:	bf00      	nop
 c001ff0:	e000ed88 	.word	0xe000ed88

0c001ff4 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c001ff4:	b590      	push	{r4, r7, lr}
 c001ff6:	b083      	sub	sp, #12
 c001ff8:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (c002070 <NonSecure_Init+0x7c>)
 c001ffc:	4a1d      	ldr	r2, [pc, #116]	@ (c002074 <NonSecure_Init+0x80>)
 c001ffe:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c002000:	4b1c      	ldr	r3, [pc, #112]	@ (c002074 <NonSecure_Init+0x80>)
 c002002:	681b      	ldr	r3, [r3, #0]
 c002004:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c002006:	683b      	ldr	r3, [r7, #0]
 c002008:	f383 8888 	msr	MSP_NS, r3
}
 c00200c:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00200e:	4b1a      	ldr	r3, [pc, #104]	@ (c002078 <NonSecure_Init+0x84>)
 c002010:	681b      	ldr	r3, [r3, #0]
 c002012:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c002014:	687b      	ldr	r3, [r7, #4]
 c002016:	461c      	mov	r4, r3
 c002018:	0864      	lsrs	r4, r4, #1
 c00201a:	0064      	lsls	r4, r4, #1
 c00201c:	4620      	mov	r0, r4
 c00201e:	4621      	mov	r1, r4
 c002020:	4622      	mov	r2, r4
 c002022:	4623      	mov	r3, r4
 c002024:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c002028:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c00202c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c002030:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c002034:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c002038:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c00203c:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c002040:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c002044:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c002048:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c00204c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c002050:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c002054:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c002058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00205c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c002060:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c002064:	f7fe f8f6 	bl	c000254 <__gnu_cmse_nonsecure_call>
}
 c002068:	bf00      	nop
 c00206a:	370c      	adds	r7, #12
 c00206c:	46bd      	mov	sp, r7
 c00206e:	bd90      	pop	{r4, r7, pc}
 c002070:	e002ed00 	.word	0xe002ed00
 c002074:	08040000 	.word	0x08040000
 c002078:	08040004 	.word	0x08040004

0c00207c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c00207c:	b580      	push	{r7, lr}
 c00207e:	b098      	sub	sp, #96	@ 0x60
 c002080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c002082:	f107 0318 	add.w	r3, r7, #24
 c002086:	2248      	movs	r2, #72	@ 0x48
 c002088:	2100      	movs	r1, #0
 c00208a:	4618      	mov	r0, r3
 c00208c:	f006 fffb 	bl	c009086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c002090:	1d3b      	adds	r3, r7, #4
 c002092:	2200      	movs	r2, #0
 c002094:	601a      	str	r2, [r3, #0]
 c002096:	605a      	str	r2, [r3, #4]
 c002098:	609a      	str	r2, [r3, #8]
 c00209a:	60da      	str	r2, [r3, #12]
 c00209c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c00209e:	2000      	movs	r0, #0
 c0020a0:	f004 fa12 	bl	c0064c8 <HAL_PWREx_ControlVoltageScaling>
 c0020a4:	4603      	mov	r3, r0
 c0020a6:	2b00      	cmp	r3, #0
 c0020a8:	d001      	beq.n	c0020ae <SystemClock_Config+0x32>
  {
    Error_Handler();
 c0020aa:	f000 f837 	bl	c00211c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c0020ae:	2302      	movs	r3, #2
 c0020b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c0020b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 c0020b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c0020b8:	2340      	movs	r3, #64	@ 0x40
 c0020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0020bc:	2302      	movs	r3, #2
 c0020be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c0020c0:	2302      	movs	r3, #2
 c0020c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 c0020c4:	2304      	movs	r3, #4
 c0020c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0020c8:	2337      	movs	r3, #55	@ 0x37
 c0020ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0020cc:	2307      	movs	r3, #7
 c0020ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0020d0:	2302      	movs	r3, #2
 c0020d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0020d4:	2302      	movs	r3, #2
 c0020d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0020d8:	f107 0318 	add.w	r3, r7, #24
 c0020dc:	4618      	mov	r0, r3
 c0020de:	f004 fa93 	bl	c006608 <HAL_RCC_OscConfig>
 c0020e2:	4603      	mov	r3, r0
 c0020e4:	2b00      	cmp	r3, #0
 c0020e6:	d001      	beq.n	c0020ec <SystemClock_Config+0x70>
  {
    Error_Handler();
 c0020e8:	f000 f818 	bl	c00211c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0020ec:	230f      	movs	r3, #15
 c0020ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0020f0:	2303      	movs	r3, #3
 c0020f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0020f4:	2300      	movs	r3, #0
 c0020f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0020f8:	2300      	movs	r3, #0
 c0020fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0020fc:	2300      	movs	r3, #0
 c0020fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c002100:	1d3b      	adds	r3, r7, #4
 c002102:	2105      	movs	r1, #5
 c002104:	4618      	mov	r0, r3
 c002106:	f004 ff61 	bl	c006fcc <HAL_RCC_ClockConfig>
 c00210a:	4603      	mov	r3, r0
 c00210c:	2b00      	cmp	r3, #0
 c00210e:	d001      	beq.n	c002114 <SystemClock_Config+0x98>
  {
    Error_Handler();
 c002110:	f000 f804 	bl	c00211c <Error_Handler>
  }
}
 c002114:	bf00      	nop
 c002116:	3760      	adds	r7, #96	@ 0x60
 c002118:	46bd      	mov	sp, r7
 c00211a:	bd80      	pop	{r7, pc}

0c00211c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c00211c:	b480      	push	{r7}
 c00211e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c002120:	b672      	cpsid	i
}
 c002122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c002124:	bf00      	nop
 c002126:	e7fd      	b.n	c002124 <Error_Handler+0x8>

0c002128 <prefix_reset>:
#include "cfa_engine.h"

uint32_t prefix_mask;
uint32_t prefix;

void prefix_reset(){
 c002128:	b480      	push	{r7}
 c00212a:	b083      	sub	sp, #12
 c00212c:	af00      	add	r7, sp, #0
	prefix = 0;
 c00212e:	4b0e      	ldr	r3, [pc, #56]	@ (c002168 <prefix_reset+0x40>)
 c002130:	2200      	movs	r2, #0
 c002132:	601a      	str	r2, [r3, #0]
	prefix_mask = 0;
 c002134:	4b0d      	ldr	r3, [pc, #52]	@ (c00216c <prefix_reset+0x44>)
 c002136:	2200      	movs	r2, #0
 c002138:	601a      	str	r2, [r3, #0]
	for(int i=0; i<PREFIX_BIT_LEN; i++){
 c00213a:	2300      	movs	r3, #0
 c00213c:	607b      	str	r3, [r7, #4]
 c00213e:	e009      	b.n	c002154 <prefix_reset+0x2c>
		prefix_mask = 0x80000000 | (prefix_mask >> 1);
 c002140:	4b0a      	ldr	r3, [pc, #40]	@ (c00216c <prefix_reset+0x44>)
 c002142:	681b      	ldr	r3, [r3, #0]
 c002144:	085b      	lsrs	r3, r3, #1
 c002146:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 c00214a:	4a08      	ldr	r2, [pc, #32]	@ (c00216c <prefix_reset+0x44>)
 c00214c:	6013      	str	r3, [r2, #0]
	for(int i=0; i<PREFIX_BIT_LEN; i++){
 c00214e:	687b      	ldr	r3, [r7, #4]
 c002150:	3301      	adds	r3, #1
 c002152:	607b      	str	r3, [r7, #4]
 c002154:	687b      	ldr	r3, [r7, #4]
 c002156:	2b0f      	cmp	r3, #15
 c002158:	ddf2      	ble.n	c002140 <prefix_reset+0x18>
	}
}
 c00215a:	bf00      	nop
 c00215c:	bf00      	nop
 c00215e:	370c      	adds	r7, #12
 c002160:	46bd      	mov	sp, r7
 c002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002166:	4770      	bx	lr
 c002168:	30000a14 	.word	0x30000a14
 c00216c:	30000a10 	.word	0x30000a10

0c002170 <prefix_handler>:

int prefix_handler(uint32_t write_value, CFA_REPORT * report_secure, uint8_t * to_log){
 c002170:	b480      	push	{r7}
 c002172:	b087      	sub	sp, #28
 c002174:	af00      	add	r7, sp, #0
 c002176:	60f8      	str	r0, [r7, #12]
 c002178:	60b9      	str	r1, [r7, #8]
 c00217a:	607a      	str	r2, [r7, #4]
	int size = SUFFIX_BYTE_LEN;
 c00217c:	2302      	movs	r3, #2
 c00217e:	617b      	str	r3, [r7, #20]

	if ((to_log[3] == REPEAT_SYMBOL) && (to_log[2]== REPEAT_SYMBOL)){
 c002180:	687b      	ldr	r3, [r7, #4]
 c002182:	3303      	adds	r3, #3
 c002184:	781b      	ldrb	r3, [r3, #0]
 c002186:	2bff      	cmp	r3, #255	@ 0xff
 c002188:	d107      	bne.n	c00219a <prefix_handler+0x2a>
 c00218a:	687b      	ldr	r3, [r7, #4]
 c00218c:	3302      	adds	r3, #2
 c00218e:	781b      	ldrb	r3, [r3, #0]
 c002190:	2bff      	cmp	r3, #255	@ 0xff
 c002192:	d102      	bne.n	c00219a <prefix_handler+0x2a>
		size = 3;
 c002194:	2303      	movs	r3, #3
 c002196:	617b      	str	r3, [r7, #20]
 c002198:	e030      	b.n	c0021fc <prefix_handler+0x8c>
	}else if ((to_log[3] == SPEC_ID_SYMBOL) && (to_log[2] == SPEC_ID_SYMBOL) && (to_log[1] == SPEC_ID_SYMBOL)){
 c00219a:	687b      	ldr	r3, [r7, #4]
 c00219c:	3303      	adds	r3, #3
 c00219e:	781b      	ldrb	r3, [r3, #0]
 c0021a0:	2b11      	cmp	r3, #17
 c0021a2:	d10c      	bne.n	c0021be <prefix_handler+0x4e>
 c0021a4:	687b      	ldr	r3, [r7, #4]
 c0021a6:	3302      	adds	r3, #2
 c0021a8:	781b      	ldrb	r3, [r3, #0]
 c0021aa:	2b11      	cmp	r3, #17
 c0021ac:	d107      	bne.n	c0021be <prefix_handler+0x4e>
 c0021ae:	687b      	ldr	r3, [r7, #4]
 c0021b0:	3301      	adds	r3, #1
 c0021b2:	781b      	ldrb	r3, [r3, #0]
 c0021b4:	2b11      	cmp	r3, #17
 c0021b6:	d102      	bne.n	c0021be <prefix_handler+0x4e>
		size = 2;
 c0021b8:	2302      	movs	r3, #2
 c0021ba:	617b      	str	r3, [r7, #20]
 c0021bc:	e01e      	b.n	c0021fc <prefix_handler+0x8c>
	}else if ((write_value & prefix_mask) != prefix){
 c0021be:	4b13      	ldr	r3, [pc, #76]	@ (c00220c <prefix_handler+0x9c>)
 c0021c0:	681a      	ldr	r2, [r3, #0]
 c0021c2:	68fb      	ldr	r3, [r7, #12]
 c0021c4:	401a      	ands	r2, r3
 c0021c6:	4b12      	ldr	r3, [pc, #72]	@ (c002210 <prefix_handler+0xa0>)
 c0021c8:	681b      	ldr	r3, [r3, #0]
 c0021ca:	429a      	cmp	r2, r3
 c0021cc:	d016      	beq.n	c0021fc <prefix_handler+0x8c>
		prefix = (write_value & prefix_mask);
 c0021ce:	4b0f      	ldr	r3, [pc, #60]	@ (c00220c <prefix_handler+0x9c>)
 c0021d0:	681a      	ldr	r2, [r3, #0]
 c0021d2:	68fb      	ldr	r3, [r7, #12]
 c0021d4:	4013      	ands	r3, r2
 c0021d6:	4a0e      	ldr	r2, [pc, #56]	@ (c002210 <prefix_handler+0xa0>)
 c0021d8:	6013      	str	r3, [r2, #0]
		for(int i=4; i<4+SUFFIX_BYTE_LEN; i++){
 c0021da:	2304      	movs	r3, #4
 c0021dc:	613b      	str	r3, [r7, #16]
 c0021de:	e007      	b.n	c0021f0 <prefix_handler+0x80>
			to_log[i] = 0x33;
 c0021e0:	693b      	ldr	r3, [r7, #16]
 c0021e2:	687a      	ldr	r2, [r7, #4]
 c0021e4:	4413      	add	r3, r2
 c0021e6:	2233      	movs	r2, #51	@ 0x33
 c0021e8:	701a      	strb	r2, [r3, #0]
		for(int i=4; i<4+SUFFIX_BYTE_LEN; i++){
 c0021ea:	693b      	ldr	r3, [r7, #16]
 c0021ec:	3301      	adds	r3, #1
 c0021ee:	613b      	str	r3, [r7, #16]
 c0021f0:	693b      	ldr	r3, [r7, #16]
 c0021f2:	2b05      	cmp	r3, #5
 c0021f4:	ddf4      	ble.n	c0021e0 <prefix_handler+0x70>
		}
		size = size + 4;
 c0021f6:	697b      	ldr	r3, [r7, #20]
 c0021f8:	3304      	adds	r3, #4
 c0021fa:	617b      	str	r3, [r7, #20]
	}
	return size;
 c0021fc:	697b      	ldr	r3, [r7, #20]
}
 c0021fe:	4618      	mov	r0, r3
 c002200:	371c      	adds	r7, #28
 c002202:	46bd      	mov	sp, r7
 c002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002208:	4770      	bx	lr
 c00220a:	bf00      	nop
 c00220c:	30000a10 	.word	0x30000a10
 c002210:	30000a14 	.word	0x30000a14

0c002214 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */

CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func){
 c002214:	b580      	push	{r7, lr}
 c002216:	b082      	sub	sp, #8
 c002218:	af00      	add	r7, sp, #0
 c00221a:	4603      	mov	r3, r0
 c00221c:	6039      	str	r1, [r7, #0]
 c00221e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c002220:	683b      	ldr	r3, [r7, #0]
 c002222:	2b00      	cmp	r3, #0
 c002224:	d018      	beq.n	c002258 <__acle_se_SECURE_RegisterCallback+0x44>
  {
    switch(CallbackId)
 c002226:	79fb      	ldrb	r3, [r7, #7]
 c002228:	2b02      	cmp	r3, #2
 c00222a:	d00e      	beq.n	c00224a <__acle_se_SECURE_RegisterCallback+0x36>
 c00222c:	2b02      	cmp	r3, #2
 c00222e:	dc12      	bgt.n	c002256 <__acle_se_SECURE_RegisterCallback+0x42>
 c002230:	2b00      	cmp	r3, #0
 c002232:	d002      	beq.n	c00223a <__acle_se_SECURE_RegisterCallback+0x26>
 c002234:	2b01      	cmp	r3, #1
 c002236:	d004      	beq.n	c002242 <__acle_se_SECURE_RegisterCallback+0x2e>
      case ATTESTATION_APP_ID:
			pAttestationFunctionCallback = func;
			CFA_ENGINE_register_callback();
			break;
      default:
        break;
 c002238:	e00d      	b.n	c002256 <__acle_se_SECURE_RegisterCallback+0x42>
			pSecureFaultCallback = func;
 c00223a:	4a24      	ldr	r2, [pc, #144]	@ (c0022cc <__acle_se_SECURE_RegisterCallback+0xb8>)
 c00223c:	683b      	ldr	r3, [r7, #0]
 c00223e:	6013      	str	r3, [r2, #0]
			break;
 c002240:	e00a      	b.n	c002258 <__acle_se_SECURE_RegisterCallback+0x44>
			pSecureErrorCallback = func;
 c002242:	4a23      	ldr	r2, [pc, #140]	@ (c0022d0 <__acle_se_SECURE_RegisterCallback+0xbc>)
 c002244:	683b      	ldr	r3, [r7, #0]
 c002246:	6013      	str	r3, [r2, #0]
			break;
 c002248:	e006      	b.n	c002258 <__acle_se_SECURE_RegisterCallback+0x44>
			pAttestationFunctionCallback = func;
 c00224a:	4a22      	ldr	r2, [pc, #136]	@ (c0022d4 <__acle_se_SECURE_RegisterCallback+0xc0>)
 c00224c:	683b      	ldr	r3, [r7, #0]
 c00224e:	6013      	str	r3, [r2, #0]
			CFA_ENGINE_register_callback();
 c002250:	f7ff f86a 	bl	c001328 <CFA_ENGINE_register_callback>
			break;
 c002254:	e000      	b.n	c002258 <__acle_se_SECURE_RegisterCallback+0x44>
        break;
 c002256:	bf00      	nop
    }
  }
}
 c002258:	bf00      	nop
 c00225a:	3708      	adds	r7, #8
 c00225c:	46bd      	mov	sp, r7
 c00225e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002262:	4670      	mov	r0, lr
 c002264:	4671      	mov	r1, lr
 c002266:	4672      	mov	r2, lr
 c002268:	4673      	mov	r3, lr
 c00226a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c00226e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c002272:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c002276:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c00227a:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c00227e:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c002282:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c002286:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c00228a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c00228e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c002292:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c002296:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c00229a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c00229e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0022a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0022a6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0022aa:	f38e 8c00 	msr	CPSR_fs, lr
 c0022ae:	b410      	push	{r4}
 c0022b0:	eef1 ca10 	vmrs	ip, fpscr
 c0022b4:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0022b8:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0022bc:	ea0c 0c04 	and.w	ip, ip, r4
 c0022c0:	eee1 ca10 	vmsr	fpscr, ip
 c0022c4:	bc10      	pop	{r4}
 c0022c6:	46f4      	mov	ip, lr
 c0022c8:	4774      	bxns	lr
 c0022ca:	bf00      	nop
 c0022cc:	30000a18 	.word	0x30000a18
 c0022d0:	30000a1c 	.word	0x30000a1c
 c0022d4:	30000a20 	.word	0x30000a20

0c0022d8 <__acle_se_SECURE_RunCallback>:

CMSE_NS_ENTRY void SECURE_RunCallback(){
 c0022d8:	b580      	push	{r7, lr}
 c0022da:	af00      	add	r7, sp, #0
	CFA_ENGINE_run_attestation(0x23FA);
 c0022dc:	f242 30fa 	movw	r0, #9210	@ 0x23fa
 c0022e0:	f7ff fbc0 	bl	c001a64 <CFA_ENGINE_run_attestation>
	return;
 c0022e4:	bf00      	nop
}
 c0022e6:	46bd      	mov	sp, r7
 c0022e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0022ec:	4670      	mov	r0, lr
 c0022ee:	4671      	mov	r1, lr
 c0022f0:	4672      	mov	r2, lr
 c0022f2:	4673      	mov	r3, lr
 c0022f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0022f8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0022fc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c002300:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c002304:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c002308:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c00230c:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c002310:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c002314:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c002318:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c00231c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c002320:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c002324:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c002328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00232c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c002330:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c002334:	f38e 8c00 	msr	CPSR_fs, lr
 c002338:	b410      	push	{r4}
 c00233a:	eef1 ca10 	vmrs	ip, fpscr
 c00233e:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c002342:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c002346:	ea0c 0c04 	and.w	ip, ip, r4
 c00234a:	eee1 ca10 	vmsr	fpscr, ip
 c00234e:	bc10      	pop	{r4}
 c002350:	46f4      	mov	ip, lr
 c002352:	4774      	bxns	lr

0c002354 <__acle_se_SECURE_Initialize_CFA_engine>:

CMSE_NS_ENTRY void SECURE_Initialize_CFA_engine(){
 c002354:	b580      	push	{r7, lr}
 c002356:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c002358:	f7ff fbbe 	bl	c001ad8 <CFA_ENGINE_initialize>
	return;
 c00235c:	bf00      	nop
}
 c00235e:	46bd      	mov	sp, r7
 c002360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002364:	4670      	mov	r0, lr
 c002366:	4671      	mov	r1, lr
 c002368:	4672      	mov	r2, lr
 c00236a:	4673      	mov	r3, lr
 c00236c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c002370:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c002374:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c002378:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c00237c:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c002380:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c002384:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c002388:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c00238c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c002390:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c002394:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c002398:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c00239c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0023a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0023a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0023a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0023ac:	f38e 8c00 	msr	CPSR_fs, lr
 c0023b0:	b410      	push	{r4}
 c0023b2:	eef1 ca10 	vmrs	ip, fpscr
 c0023b6:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0023ba:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0023be:	ea0c 0c04 	and.w	ip, ip, r4
 c0023c2:	eee1 ca10 	vmsr	fpscr, ip
 c0023c6:	bc10      	pop	{r4}
 c0023c8:	46f4      	mov	ip, lr
 c0023ca:	4774      	bxns	lr

0c0023cc <__acle_se_SECURE_Initialize_Attestation>:

CMSE_NS_ENTRY void SECURE_Initialize_Attestation(){
 c0023cc:	b580      	push	{r7, lr}
 c0023ce:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c0023d0:	f7ff fb82 	bl	c001ad8 <CFA_ENGINE_initialize>
	return;
 c0023d4:	bf00      	nop
}
 c0023d6:	46bd      	mov	sp, r7
 c0023d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0023dc:	4670      	mov	r0, lr
 c0023de:	4671      	mov	r1, lr
 c0023e0:	4672      	mov	r2, lr
 c0023e2:	4673      	mov	r3, lr
 c0023e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0023e8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0023ec:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0023f0:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0023f4:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0023f8:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0023fc:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c002400:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c002404:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c002408:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c00240c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c002410:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c002414:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c002418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00241c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c002420:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c002424:	f38e 8c00 	msr	CPSR_fs, lr
 c002428:	b410      	push	{r4}
 c00242a:	eef1 ca10 	vmrs	ip, fpscr
 c00242e:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c002432:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c002436:	ea0c 0c04 	and.w	ip, ip, r4
 c00243a:	eee1 ca10 	vmsr	fpscr, ip
 c00243e:	bc10      	pop	{r4}
 c002440:	46f4      	mov	ip, lr
 c002442:	4774      	bxns	lr

0c002444 <__acle_se_SECURE_log_ret>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_ret(){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c002444:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c002448:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c00244a:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c00244c:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c00244e:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c002450:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c002452:	4673      	mov	r3, lr
 c002454:	461c      	mov	r4, r3
	CFA_ENGINE_new_log_entry(inst_addr);
 c002456:	4620      	mov	r0, r4
 c002458:	f7ff fa36 	bl	c0018c8 <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c00245c:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c00245e:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c002460:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c002462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c002466:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c002468:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c00246a:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c00246c:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c00246e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c002472:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c002476:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c00247a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c00247e:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c002482:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c002486:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c00248a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c00248e:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c002492:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c002496:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c00249a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c00249e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c0024a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0024a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c0024aa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c0024ae:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c0024b2:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c0024b4:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c0024b8:	f64f 7460 	movw	r4, #65376	@ 0xff60
	__asm__ volatile("movt	r4, #4095");
 c0024bc:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
	__asm__ volatile("and	ip, r4");
 c0024c0:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c0024c4:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c0024c8:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c0024ca:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c0024cc:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c0024ce:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c0024d0:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c0024d4:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c0024d8:	4774      	bxns	lr
}
 c0024da:	bf00      	nop

0c0024dc <__acle_se_SECURE_log_call>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_call(uint32_t addr){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r10}");
 c0024dc:	e92d 048f 	stmdb	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("sub	sp, sp, #24");
 c0024e0:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c0024e2:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c0024e4:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c0024e6:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c0024e8:	af00      	add	r7, sp, #0
	__asm__ volatile("sub	r0, r10, #1");
 c0024ea:	f1aa 0001 	sub.w	r0, sl, #1
	__asm__ volatile("bl	CFA_ENGINE_new_log_entry");
 c0024ee:	f7ff f9eb 	bl	c0018c8 <CFA_ENGINE_new_log_entry>
	__asm__ volatile("nop");
 c0024f2:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c0024f4:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c0024f6:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c0024f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c0024fc:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c0024fe:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c002500:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c002502:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c002504:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c002508:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c00250c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c002510:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c002514:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c002518:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c00251c:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c002520:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c002524:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c002528:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c00252c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c002530:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c002534:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c002538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c00253c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c002540:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c002544:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("vmrs	ip, fpscr");
 c002548:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c00254c:	f64f 7460 	movw	r4, #65376	@ 0xff60
	__asm__ volatile("movt	r4, #4095");
 c002550:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
	__asm__ volatile("and	ip, r4");
 c002554:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c002558:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("mov	ip, lr");
 c00255c:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c00255e:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c002560:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r10}");
 c002562:	e8bd 048f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("bics	r10, #1");
 c002566:	f03a 0a01 	bics.w	sl, sl, #1
	__asm__ volatile("bxns	r10");
 c00256a:	4754      	bxns	sl
}
 c00256c:	bf00      	nop

0c00256e <__acle_se_SECURE_log_cond_br>:


CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_cond_br(){;
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c00256e:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c002572:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c002574:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c002576:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c002578:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c00257a:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c00257c:	4673      	mov	r3, lr
 c00257e:	461c      	mov	r4, r3
	inst_addr -= 4;
 c002580:	3c04      	subs	r4, #4
	CFA_ENGINE_new_log_entry(inst_addr);
 c002582:	4620      	mov	r0, r4
 c002584:	f7ff f9a0 	bl	c0018c8 <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c002588:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c00258a:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c00258c:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c00258e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c002592:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c002594:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c002596:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c002598:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c00259a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c00259e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c0025a2:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c0025a6:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c0025aa:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c0025ae:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c0025b2:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c0025b6:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c0025ba:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c0025be:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c0025c2:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c0025c6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c0025ca:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c0025ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0025d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c0025d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c0025da:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c0025de:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c0025e0:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c0025e4:	f64f 7460 	movw	r4, #65376	@ 0xff60
	__asm__ volatile("movt	r4, #4095");
 c0025e8:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
	__asm__ volatile("and	ip, r4");
 c0025ec:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c0025f0:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c0025f4:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c0025f6:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c0025f8:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c0025fa:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c0025fc:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c002600:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c002604:	4774      	bxns	lr
}
 c002606:	bf00      	nop

0c002608 <__acle_se_SECURE_run_attestation_wait_mode>:

CMSE_NS_ENTRY void  SECURE_run_attestation_wait_mode(){
 c002608:	b580      	push	{r7, lr}
 c00260a:	af00      	add	r7, sp, #0
	CFA_ENGINE_start();
 c00260c:	f7fe fe80 	bl	c001310 <CFA_ENGINE_start>
	return;
 c002610:	bf00      	nop
};
 c002612:	46bd      	mov	sp, r7
 c002614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002618:	4670      	mov	r0, lr
 c00261a:	4671      	mov	r1, lr
 c00261c:	4672      	mov	r2, lr
 c00261e:	4673      	mov	r3, lr
 c002620:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c002624:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c002628:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c00262c:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c002630:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c002634:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c002638:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c00263c:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c002640:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c002644:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c002648:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c00264c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c002650:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c002654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c002658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00265c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c002660:	f38e 8c00 	msr	CPSR_fs, lr
 c002664:	b410      	push	{r4}
 c002666:	eef1 ca10 	vmrs	ip, fpscr
 c00266a:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c00266e:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c002672:	ea0c 0c04 	and.w	ip, ip, r4
 c002676:	eee1 ca10 	vmsr	fpscr, ip
 c00267a:	bc10      	pop	{r4}
 c00267c:	46f4      	mov	ip, lr
 c00267e:	4774      	bxns	lr

0c002680 <__acle_se_SECURE_record_output_data>:

CMSE_NS_ENTRY void SECURE_record_output_data(uint32_t value){
 c002680:	b580      	push	{r7, lr}
 c002682:	b082      	sub	sp, #8
 c002684:	af00      	add	r7, sp, #0
 c002686:	6078      	str	r0, [r7, #4]
	record_output_data(value);
 c002688:	6878      	ldr	r0, [r7, #4]
 c00268a:	f7fe fe2b 	bl	c0012e4 <record_output_data>
	return;
 c00268e:	bf00      	nop
};
 c002690:	3708      	adds	r7, #8
 c002692:	46bd      	mov	sp, r7
 c002694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002698:	4670      	mov	r0, lr
 c00269a:	4671      	mov	r1, lr
 c00269c:	4672      	mov	r2, lr
 c00269e:	4673      	mov	r3, lr
 c0026a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0026a4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0026a8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0026ac:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0026b0:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0026b4:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0026b8:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0026bc:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0026c0:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0026c4:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0026c8:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0026cc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0026d0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0026d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0026d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0026dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0026e0:	f38e 8c00 	msr	CPSR_fs, lr
 c0026e4:	b410      	push	{r4}
 c0026e6:	eef1 ca10 	vmrs	ip, fpscr
 c0026ea:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0026ee:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0026f2:	ea0c 0c04 	and.w	ip, ip, r4
 c0026f6:	eee1 ca10 	vmsr	fpscr, ip
 c0026fa:	bc10      	pop	{r4}
 c0026fc:	46f4      	mov	ip, lr
 c0026fe:	4774      	bxns	lr

0c002700 <init_spec>:
uint8_t repeat_detect = 0;
uint32_t repeat_count = 0xffff0002;
uint32_t prev_value = 0;
uint32_t prev_addr = 0;

void init_spec(){
 c002700:	b580      	push	{r7, lr}
 c002702:	af00      	add	r7, sp, #0
	SPECCFA_reset();
 c002704:	f000 f802 	bl	c00270c <SPECCFA_reset>
}
 c002708:	bf00      	nop
 c00270a:	bd80      	pop	{r7, pc}

0c00270c <SPECCFA_reset>:

void SPECCFA_reset(){
 c00270c:	b480      	push	{r7}
 c00270e:	b083      	sub	sp, #12
 c002710:	af00      	add	r7, sp, #0
	spec_monitor = 0x00;
 c002712:	4b18      	ldr	r3, [pc, #96]	@ (c002774 <SPECCFA_reset+0x68>)
 c002714:	2200      	movs	r2, #0
 c002716:	701a      	strb	r2, [r3, #0]
	spec_detect = 0x00;
 c002718:	4b17      	ldr	r3, [pc, #92]	@ (c002778 <SPECCFA_reset+0x6c>)
 c00271a:	2200      	movs	r2, #0
 c00271c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<TOTAL_BLOCKS; i++){
 c00271e:	2300      	movs	r3, #0
 c002720:	607b      	str	r3, [r7, #4]
 c002722:	e011      	b.n	c002748 <SPECCFA_reset+0x3c>
		spec_monitor_count[i] = 0;
 c002724:	4a15      	ldr	r2, [pc, #84]	@ (c00277c <SPECCFA_reset+0x70>)
 c002726:	687b      	ldr	r3, [r7, #4]
 c002728:	4413      	add	r3, r2
 c00272a:	2200      	movs	r2, #0
 c00272c:	701a      	strb	r2, [r3, #0]
		monitor_cflog_idxs[i] = 0;
 c00272e:	4a14      	ldr	r2, [pc, #80]	@ (c002780 <SPECCFA_reset+0x74>)
 c002730:	687b      	ldr	r3, [r7, #4]
 c002732:	2100      	movs	r1, #0
 c002734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		monitor_cflog_bit_idxs[i] = 0;
 c002738:	4a12      	ldr	r2, [pc, #72]	@ (c002784 <SPECCFA_reset+0x78>)
 c00273a:	687b      	ldr	r3, [r7, #4]
 c00273c:	2100      	movs	r1, #0
 c00273e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<TOTAL_BLOCKS; i++){
 c002742:	687b      	ldr	r3, [r7, #4]
 c002744:	3301      	adds	r3, #1
 c002746:	607b      	str	r3, [r7, #4]
 c002748:	687b      	ldr	r3, [r7, #4]
 c00274a:	2b07      	cmp	r3, #7
 c00274c:	ddea      	ble.n	c002724 <SPECCFA_reset+0x18>
	}
	repeat_detect = 0;
 c00274e:	4b0e      	ldr	r3, [pc, #56]	@ (c002788 <SPECCFA_reset+0x7c>)
 c002750:	2200      	movs	r2, #0
 c002752:	701a      	strb	r2, [r3, #0]
	repeat_count = 0xffff0002;
 c002754:	4b0d      	ldr	r3, [pc, #52]	@ (c00278c <SPECCFA_reset+0x80>)
 c002756:	4a0e      	ldr	r2, [pc, #56]	@ (c002790 <SPECCFA_reset+0x84>)
 c002758:	601a      	str	r2, [r3, #0]

	prev_value = 0;
 c00275a:	4b0e      	ldr	r3, [pc, #56]	@ (c002794 <SPECCFA_reset+0x88>)
 c00275c:	2200      	movs	r2, #0
 c00275e:	601a      	str	r2, [r3, #0]
	prev_addr = 0;
 c002760:	4b0d      	ldr	r3, [pc, #52]	@ (c002798 <SPECCFA_reset+0x8c>)
 c002762:	2200      	movs	r2, #0
 c002764:	601a      	str	r2, [r3, #0]
}
 c002766:	bf00      	nop
 c002768:	370c      	adds	r7, #12
 c00276a:	46bd      	mov	sp, r7
 c00276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002770:	4770      	bx	lr
 c002772:	bf00      	nop
 c002774:	30000a5c 	.word	0x30000a5c
 c002778:	30000a5d 	.word	0x30000a5d
 c00277c:	30000a54 	.word	0x30000a54
 c002780:	30000a24 	.word	0x30000a24
 c002784:	30000a44 	.word	0x30000a44
 c002788:	30000a64 	.word	0x30000a64
 c00278c:	3000060c 	.word	0x3000060c
 c002790:	ffff0002 	.word	0xffff0002
 c002794:	30000a68 	.word	0x30000a68
 c002798:	30000a6c 	.word	0x30000a6c

0c00279c <SPECCFA_process_log_entry>:

int speculating;
int SPECCFA_process_log_entry(uint32_t addr, CFA_REPORT * report_secure, uint8_t * to_log){
 c00279c:	b580      	push	{r7, lr}
 c00279e:	b086      	sub	sp, #24
 c0027a0:	af00      	add	r7, sp, #0
 c0027a2:	60f8      	str	r0, [r7, #12]
 c0027a4:	60b9      	str	r1, [r7, #8]
 c0027a6:	607a      	str	r2, [r7, #4]

	speculating = 0;
 c0027a8:	4b4a      	ldr	r3, [pc, #296]	@ (c0028d4 <SPECCFA_process_log_entry+0x138>)
 c0027aa:	2200      	movs	r2, #0
 c0027ac:	601a      	str	r2, [r3, #0]
	uint32_t write_value;
	SPECCFA_detect_paths(addr,report_secure);
 c0027ae:	68b9      	ldr	r1, [r7, #8]
 c0027b0:	68f8      	ldr	r0, [r7, #12]
 c0027b2:	f000 fa61 	bl	c002c78 <SPECCFA_detect_paths>
	if(spec_detect == 0){
 c0027b6:	4b48      	ldr	r3, [pc, #288]	@ (c0028d8 <SPECCFA_process_log_entry+0x13c>)
 c0027b8:	781b      	ldrb	r3, [r3, #0]
 c0027ba:	2b00      	cmp	r3, #0
 c0027bc:	d110      	bne.n	c0027e0 <SPECCFA_process_log_entry+0x44>
		// no sub-path detect, so append log normally
		write_value = addr;
 c0027be:	68fb      	ldr	r3, [r7, #12]
 c0027c0:	613b      	str	r3, [r7, #16]

		if(spec_monitor == 0){
 c0027c2:	4b46      	ldr	r3, [pc, #280]	@ (c0028dc <SPECCFA_process_log_entry+0x140>)
 c0027c4:	781b      	ldrb	r3, [r3, #0]
 c0027c6:	2b00      	cmp	r3, #0
 c0027c8:	d17e      	bne.n	c0028c8 <SPECCFA_process_log_entry+0x12c>
			repeat_detect = 0;
 c0027ca:	4b45      	ldr	r3, [pc, #276]	@ (c0028e0 <SPECCFA_process_log_entry+0x144>)
 c0027cc:	2200      	movs	r2, #0
 c0027ce:	701a      	strb	r2, [r3, #0]
			repeat_count = 0xffff0002;
 c0027d0:	4b44      	ldr	r3, [pc, #272]	@ (c0028e4 <SPECCFA_process_log_entry+0x148>)
 c0027d2:	4a45      	ldr	r2, [pc, #276]	@ (c0028e8 <SPECCFA_process_log_entry+0x14c>)
 c0027d4:	601a      	str	r2, [r3, #0]
			prev_value = 0xffffffff;
 c0027d6:	4b45      	ldr	r3, [pc, #276]	@ (c0028ec <SPECCFA_process_log_entry+0x150>)
 c0027d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0027dc:	601a      	str	r2, [r3, #0]
 c0027de:	e073      	b.n	c0028c8 <SPECCFA_process_log_entry+0x12c>
		}

	} else{
		speculating = 1;
 c0027e0:	4b3c      	ldr	r3, [pc, #240]	@ (c0028d4 <SPECCFA_process_log_entry+0x138>)
 c0027e2:	2201      	movs	r2, #1
 c0027e4:	601a      	str	r2, [r3, #0]
		SPECCFA_speculate(addr, report_secure);
 c0027e6:	68b9      	ldr	r1, [r7, #8]
 c0027e8:	68f8      	ldr	r0, [r7, #12]
 c0027ea:	f000 f885 	bl	c0028f8 <SPECCFA_speculate>

		// if not repeating and no repeat detected, log subpath normally, set prev_value
		if (repeat_detect == 0 && ((prev_value != log_entry))){// || (prev_addr+1 != active_addr))){
 c0027ee:	4b3c      	ldr	r3, [pc, #240]	@ (c0028e0 <SPECCFA_process_log_entry+0x144>)
 c0027f0:	781b      	ldrb	r3, [r3, #0]
 c0027f2:	2b00      	cmp	r3, #0
 c0027f4:	d113      	bne.n	c00281e <SPECCFA_process_log_entry+0x82>
 c0027f6:	4b3d      	ldr	r3, [pc, #244]	@ (c0028ec <SPECCFA_process_log_entry+0x150>)
 c0027f8:	681a      	ldr	r2, [r3, #0]
 c0027fa:	4b3d      	ldr	r3, [pc, #244]	@ (c0028f0 <SPECCFA_process_log_entry+0x154>)
 c0027fc:	681b      	ldr	r3, [r3, #0]
 c0027fe:	429a      	cmp	r2, r3
 c002800:	d00d      	beq.n	c00281e <SPECCFA_process_log_entry+0x82>
			write_value = log_entry;
 c002802:	4b3b      	ldr	r3, [pc, #236]	@ (c0028f0 <SPECCFA_process_log_entry+0x154>)
 c002804:	681b      	ldr	r3, [r3, #0]
 c002806:	613b      	str	r3, [r7, #16]
			prev_value = log_entry;
 c002808:	4b39      	ldr	r3, [pc, #228]	@ (c0028f0 <SPECCFA_process_log_entry+0x154>)
 c00280a:	681b      	ldr	r3, [r3, #0]
 c00280c:	4a37      	ldr	r2, [pc, #220]	@ (c0028ec <SPECCFA_process_log_entry+0x150>)
 c00280e:	6013      	str	r3, [r2, #0]
			prev_addr = report_secure->num_CF_Log_size;
 c002810:	68bb      	ldr	r3, [r7, #8]
 c002812:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c002816:	461a      	mov	r2, r3
 c002818:	4b36      	ldr	r3, [pc, #216]	@ (c0028f4 <SPECCFA_process_log_entry+0x158>)
 c00281a:	601a      	str	r2, [r3, #0]
 c00281c:	e042      	b.n	c0028a4 <SPECCFA_process_log_entry+0x108>
		}
		// if not repeating but repeat is detected, this is the first instance. Set repeat_detect and log the ctr.
		else if(repeat_detect == 0 && prev_value == log_entry){// && prev_addr+1 == active_addr){
 c00281e:	4b30      	ldr	r3, [pc, #192]	@ (c0028e0 <SPECCFA_process_log_entry+0x144>)
 c002820:	781b      	ldrb	r3, [r3, #0]
 c002822:	2b00      	cmp	r3, #0
 c002824:	d112      	bne.n	c00284c <SPECCFA_process_log_entry+0xb0>
 c002826:	4b31      	ldr	r3, [pc, #196]	@ (c0028ec <SPECCFA_process_log_entry+0x150>)
 c002828:	681a      	ldr	r2, [r3, #0]
 c00282a:	4b31      	ldr	r3, [pc, #196]	@ (c0028f0 <SPECCFA_process_log_entry+0x154>)
 c00282c:	681b      	ldr	r3, [r3, #0]
 c00282e:	429a      	cmp	r2, r3
 c002830:	d10c      	bne.n	c00284c <SPECCFA_process_log_entry+0xb0>
			repeat_detect = 1;
 c002832:	4b2b      	ldr	r3, [pc, #172]	@ (c0028e0 <SPECCFA_process_log_entry+0x144>)
 c002834:	2201      	movs	r2, #1
 c002836:	701a      	strb	r2, [r3, #0]
			prev_addr = report_secure->num_CF_Log_size;
 c002838:	68bb      	ldr	r3, [r7, #8]
 c00283a:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c00283e:	461a      	mov	r2, r3
 c002840:	4b2c      	ldr	r3, [pc, #176]	@ (c0028f4 <SPECCFA_process_log_entry+0x158>)
 c002842:	601a      	str	r2, [r3, #0]
			write_value = repeat_count;
 c002844:	4b27      	ldr	r3, [pc, #156]	@ (c0028e4 <SPECCFA_process_log_entry+0x148>)
 c002846:	681b      	ldr	r3, [r3, #0]
 c002848:	613b      	str	r3, [r7, #16]
 c00284a:	e02b      	b.n	c0028a4 <SPECCFA_process_log_entry+0x108>
		}
		// if repeating and repeat is continuing, increment the counter, increment and log counter
		else if(repeat_detect == 1 && prev_value == log_entry){// && prev_addr+1 == active_addr){
 c00284c:	4b24      	ldr	r3, [pc, #144]	@ (c0028e0 <SPECCFA_process_log_entry+0x144>)
 c00284e:	781b      	ldrb	r3, [r3, #0]
 c002850:	2b01      	cmp	r3, #1
 c002852:	d114      	bne.n	c00287e <SPECCFA_process_log_entry+0xe2>
 c002854:	4b25      	ldr	r3, [pc, #148]	@ (c0028ec <SPECCFA_process_log_entry+0x150>)
 c002856:	681a      	ldr	r2, [r3, #0]
 c002858:	4b25      	ldr	r3, [pc, #148]	@ (c0028f0 <SPECCFA_process_log_entry+0x154>)
 c00285a:	681b      	ldr	r3, [r3, #0]
 c00285c:	429a      	cmp	r2, r3
 c00285e:	d10e      	bne.n	c00287e <SPECCFA_process_log_entry+0xe2>
			report_secure->num_CF_Log_size = prev_addr;
 c002860:	4b24      	ldr	r3, [pc, #144]	@ (c0028f4 <SPECCFA_process_log_entry+0x158>)
 c002862:	681b      	ldr	r3, [r3, #0]
 c002864:	b21a      	sxth	r2, r3
 c002866:	68bb      	ldr	r3, [r7, #8]
 c002868:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
			repeat_count++;
 c00286c:	4b1d      	ldr	r3, [pc, #116]	@ (c0028e4 <SPECCFA_process_log_entry+0x148>)
 c00286e:	681b      	ldr	r3, [r3, #0]
 c002870:	3301      	adds	r3, #1
 c002872:	4a1c      	ldr	r2, [pc, #112]	@ (c0028e4 <SPECCFA_process_log_entry+0x148>)
 c002874:	6013      	str	r3, [r2, #0]
			write_value = repeat_count;
 c002876:	4b1b      	ldr	r3, [pc, #108]	@ (c0028e4 <SPECCFA_process_log_entry+0x148>)
 c002878:	681b      	ldr	r3, [r3, #0]
 c00287a:	613b      	str	r3, [r7, #16]
 c00287c:	e012      	b.n	c0028a4 <SPECCFA_process_log_entry+0x108>
		}
		// if repeat_detect and a different subpath has occurred, reset repeat signals and log current sub-path
		else {
			repeat_detect = 0;
 c00287e:	4b18      	ldr	r3, [pc, #96]	@ (c0028e0 <SPECCFA_process_log_entry+0x144>)
 c002880:	2200      	movs	r2, #0
 c002882:	701a      	strb	r2, [r3, #0]
			repeat_count = 0xffff0002;
 c002884:	4b17      	ldr	r3, [pc, #92]	@ (c0028e4 <SPECCFA_process_log_entry+0x148>)
 c002886:	4a18      	ldr	r2, [pc, #96]	@ (c0028e8 <SPECCFA_process_log_entry+0x14c>)
 c002888:	601a      	str	r2, [r3, #0]
			write_value = log_entry;
 c00288a:	4b19      	ldr	r3, [pc, #100]	@ (c0028f0 <SPECCFA_process_log_entry+0x154>)
 c00288c:	681b      	ldr	r3, [r3, #0]
 c00288e:	613b      	str	r3, [r7, #16]
			prev_value = log_entry;
 c002890:	4b17      	ldr	r3, [pc, #92]	@ (c0028f0 <SPECCFA_process_log_entry+0x154>)
 c002892:	681b      	ldr	r3, [r3, #0]
 c002894:	4a15      	ldr	r2, [pc, #84]	@ (c0028ec <SPECCFA_process_log_entry+0x150>)
 c002896:	6013      	str	r3, [r2, #0]
			prev_addr = report_secure->num_CF_Log_size;
 c002898:	68bb      	ldr	r3, [r7, #8]
 c00289a:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	@ 0x62
 c00289e:	461a      	mov	r2, r3
 c0028a0:	4b14      	ldr	r3, [pc, #80]	@ (c0028f4 <SPECCFA_process_log_entry+0x158>)
 c0028a2:	601a      	str	r2, [r3, #0]
		}

		for(int i=0; i<4; i++){
 c0028a4:	2300      	movs	r3, #0
 c0028a6:	617b      	str	r3, [r7, #20]
 c0028a8:	e00b      	b.n	c0028c2 <SPECCFA_process_log_entry+0x126>
			to_log[i] = ((uint8_t *)&write_value)[i];
 c0028aa:	697b      	ldr	r3, [r7, #20]
 c0028ac:	f107 0210 	add.w	r2, r7, #16
 c0028b0:	441a      	add	r2, r3
 c0028b2:	697b      	ldr	r3, [r7, #20]
 c0028b4:	6879      	ldr	r1, [r7, #4]
 c0028b6:	440b      	add	r3, r1
 c0028b8:	7812      	ldrb	r2, [r2, #0]
 c0028ba:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<4; i++){
 c0028bc:	697b      	ldr	r3, [r7, #20]
 c0028be:	3301      	adds	r3, #1
 c0028c0:	617b      	str	r3, [r7, #20]
 c0028c2:	697b      	ldr	r3, [r7, #20]
 c0028c4:	2b03      	cmp	r3, #3
 c0028c6:	ddf0      	ble.n	c0028aa <SPECCFA_process_log_entry+0x10e>
		}
	}
	return speculating;
 c0028c8:	4b02      	ldr	r3, [pc, #8]	@ (c0028d4 <SPECCFA_process_log_entry+0x138>)
 c0028ca:	681b      	ldr	r3, [r3, #0]
}
 c0028cc:	4618      	mov	r0, r3
 c0028ce:	3718      	adds	r7, #24
 c0028d0:	46bd      	mov	sp, r7
 c0028d2:	bd80      	pop	{r7, pc}
 c0028d4:	30000a70 	.word	0x30000a70
 c0028d8:	30000a5d 	.word	0x30000a5d
 c0028dc:	30000a5c 	.word	0x30000a5c
 c0028e0:	30000a64 	.word	0x30000a64
 c0028e4:	3000060c 	.word	0x3000060c
 c0028e8:	ffff0002 	.word	0xffff0002
 c0028ec:	30000a68 	.word	0x30000a68
 c0028f0:	30000a60 	.word	0x30000a60
 c0028f4:	30000a6c 	.word	0x30000a6c

0c0028f8 <SPECCFA_speculate>:


void SPECCFA_speculate(uint32_t addr,  CFA_REPORT * report_secure){
 c0028f8:	b480      	push	{r7}
 c0028fa:	b083      	sub	sp, #12
 c0028fc:	af00      	add	r7, sp, #0
 c0028fe:	6078      	str	r0, [r7, #4]
 c002900:	6039      	str	r1, [r7, #0]
	if((spec_detect & BLOCK0_MASK) == BLOCK0_MASK){
 c002902:	4b76      	ldr	r3, [pc, #472]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002904:	781b      	ldrb	r3, [r3, #0]
 c002906:	f003 0301 	and.w	r3, r3, #1
 c00290a:	2b00      	cmp	r3, #0
 c00290c:	d016      	beq.n	c00293c <SPECCFA_speculate+0x44>
		spec_detect &= ~BLOCK0_MASK;
 c00290e:	4b73      	ldr	r3, [pc, #460]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002910:	781b      	ldrb	r3, [r3, #0]
 c002912:	f023 0301 	bic.w	r3, r3, #1
 c002916:	b2da      	uxtb	r2, r3
 c002918:	4b70      	ldr	r3, [pc, #448]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c00291a:	701a      	strb	r2, [r3, #0]
		log_entry = BLOCK0_ID;
 c00291c:	4b70      	ldr	r3, [pc, #448]	@ (c002ae0 <SPECCFA_speculate+0x1e8>)
 c00291e:	4a71      	ldr	r2, [pc, #452]	@ (c002ae4 <SPECCFA_speculate+0x1ec>)
 c002920:	601a      	str	r2, [r3, #0]
		report_secure->num_CF_Log_size = monitor_cflog_idxs[0];
 c002922:	4b71      	ldr	r3, [pc, #452]	@ (c002ae8 <SPECCFA_speculate+0x1f0>)
 c002924:	681b      	ldr	r3, [r3, #0]
 c002926:	b21a      	sxth	r2, r3
 c002928:	683b      	ldr	r3, [r7, #0]
 c00292a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		report_secure->bits_left = monitor_cflog_bit_idxs[0];
 c00292e:	4b6f      	ldr	r3, [pc, #444]	@ (c002aec <SPECCFA_speculate+0x1f4>)
 c002930:	f9b3 2000 	ldrsh.w	r2, [r3]
 c002934:	683b      	ldr	r3, [r7, #0]
 c002936:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
		log_entry = BLOCK7_ID;
		report_secure->num_CF_Log_size = monitor_cflog_idxs[7];
		report_secure->bits_left = monitor_cflog_bit_idxs[7];
	}
	#endif
}
 c00293a:	e0c8      	b.n	c002ace <SPECCFA_speculate+0x1d6>
	else if((spec_detect & BLOCK1_MASK) == BLOCK1_MASK){
 c00293c:	4b67      	ldr	r3, [pc, #412]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c00293e:	781b      	ldrb	r3, [r3, #0]
 c002940:	f003 0302 	and.w	r3, r3, #2
 c002944:	2b00      	cmp	r3, #0
 c002946:	d016      	beq.n	c002976 <SPECCFA_speculate+0x7e>
		spec_detect &= ~BLOCK1_MASK;
 c002948:	4b64      	ldr	r3, [pc, #400]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c00294a:	781b      	ldrb	r3, [r3, #0]
 c00294c:	f023 0302 	bic.w	r3, r3, #2
 c002950:	b2da      	uxtb	r2, r3
 c002952:	4b62      	ldr	r3, [pc, #392]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002954:	701a      	strb	r2, [r3, #0]
		log_entry = BLOCK1_ID;
 c002956:	4b62      	ldr	r3, [pc, #392]	@ (c002ae0 <SPECCFA_speculate+0x1e8>)
 c002958:	4a65      	ldr	r2, [pc, #404]	@ (c002af0 <SPECCFA_speculate+0x1f8>)
 c00295a:	601a      	str	r2, [r3, #0]
		report_secure->num_CF_Log_size = monitor_cflog_idxs[1];
 c00295c:	4b62      	ldr	r3, [pc, #392]	@ (c002ae8 <SPECCFA_speculate+0x1f0>)
 c00295e:	685b      	ldr	r3, [r3, #4]
 c002960:	b21a      	sxth	r2, r3
 c002962:	683b      	ldr	r3, [r7, #0]
 c002964:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		report_secure->bits_left = monitor_cflog_bit_idxs[1];
 c002968:	4b60      	ldr	r3, [pc, #384]	@ (c002aec <SPECCFA_speculate+0x1f4>)
 c00296a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 c00296e:	683b      	ldr	r3, [r7, #0]
 c002970:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
}
 c002974:	e0ab      	b.n	c002ace <SPECCFA_speculate+0x1d6>
	else if((spec_detect & BLOCK2_MASK) == BLOCK2_MASK){
 c002976:	4b59      	ldr	r3, [pc, #356]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002978:	781b      	ldrb	r3, [r3, #0]
 c00297a:	f003 0304 	and.w	r3, r3, #4
 c00297e:	2b00      	cmp	r3, #0
 c002980:	d016      	beq.n	c0029b0 <SPECCFA_speculate+0xb8>
		spec_detect &= ~BLOCK2_MASK;
 c002982:	4b56      	ldr	r3, [pc, #344]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002984:	781b      	ldrb	r3, [r3, #0]
 c002986:	f023 0304 	bic.w	r3, r3, #4
 c00298a:	b2da      	uxtb	r2, r3
 c00298c:	4b53      	ldr	r3, [pc, #332]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c00298e:	701a      	strb	r2, [r3, #0]
		log_entry = BLOCK2_ID;
 c002990:	4b53      	ldr	r3, [pc, #332]	@ (c002ae0 <SPECCFA_speculate+0x1e8>)
 c002992:	4a58      	ldr	r2, [pc, #352]	@ (c002af4 <SPECCFA_speculate+0x1fc>)
 c002994:	601a      	str	r2, [r3, #0]
		report_secure->num_CF_Log_size = monitor_cflog_idxs[2];
 c002996:	4b54      	ldr	r3, [pc, #336]	@ (c002ae8 <SPECCFA_speculate+0x1f0>)
 c002998:	689b      	ldr	r3, [r3, #8]
 c00299a:	b21a      	sxth	r2, r3
 c00299c:	683b      	ldr	r3, [r7, #0]
 c00299e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		report_secure->bits_left = monitor_cflog_bit_idxs[2];
 c0029a2:	4b52      	ldr	r3, [pc, #328]	@ (c002aec <SPECCFA_speculate+0x1f4>)
 c0029a4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 c0029a8:	683b      	ldr	r3, [r7, #0]
 c0029aa:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
}
 c0029ae:	e08e      	b.n	c002ace <SPECCFA_speculate+0x1d6>
	else if((spec_detect & BLOCK3_MASK) == BLOCK3_MASK){
 c0029b0:	4b4a      	ldr	r3, [pc, #296]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c0029b2:	781b      	ldrb	r3, [r3, #0]
 c0029b4:	f003 0308 	and.w	r3, r3, #8
 c0029b8:	2b00      	cmp	r3, #0
 c0029ba:	d016      	beq.n	c0029ea <SPECCFA_speculate+0xf2>
		spec_detect &= ~BLOCK3_MASK;
 c0029bc:	4b47      	ldr	r3, [pc, #284]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c0029be:	781b      	ldrb	r3, [r3, #0]
 c0029c0:	f023 0308 	bic.w	r3, r3, #8
 c0029c4:	b2da      	uxtb	r2, r3
 c0029c6:	4b45      	ldr	r3, [pc, #276]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c0029c8:	701a      	strb	r2, [r3, #0]
		log_entry = BLOCK3_ID;
 c0029ca:	4b45      	ldr	r3, [pc, #276]	@ (c002ae0 <SPECCFA_speculate+0x1e8>)
 c0029cc:	4a4a      	ldr	r2, [pc, #296]	@ (c002af8 <SPECCFA_speculate+0x200>)
 c0029ce:	601a      	str	r2, [r3, #0]
		report_secure->num_CF_Log_size = monitor_cflog_idxs[3];
 c0029d0:	4b45      	ldr	r3, [pc, #276]	@ (c002ae8 <SPECCFA_speculate+0x1f0>)
 c0029d2:	68db      	ldr	r3, [r3, #12]
 c0029d4:	b21a      	sxth	r2, r3
 c0029d6:	683b      	ldr	r3, [r7, #0]
 c0029d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		report_secure->bits_left = monitor_cflog_bit_idxs[3];
 c0029dc:	4b43      	ldr	r3, [pc, #268]	@ (c002aec <SPECCFA_speculate+0x1f4>)
 c0029de:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 c0029e2:	683b      	ldr	r3, [r7, #0]
 c0029e4:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
}
 c0029e8:	e071      	b.n	c002ace <SPECCFA_speculate+0x1d6>
	else if((spec_detect & BLOCK4_MASK) == BLOCK4_MASK){
 c0029ea:	4b3c      	ldr	r3, [pc, #240]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c0029ec:	781b      	ldrb	r3, [r3, #0]
 c0029ee:	f003 0310 	and.w	r3, r3, #16
 c0029f2:	2b00      	cmp	r3, #0
 c0029f4:	d016      	beq.n	c002a24 <SPECCFA_speculate+0x12c>
		spec_detect &= ~BLOCK4_MASK;
 c0029f6:	4b39      	ldr	r3, [pc, #228]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c0029f8:	781b      	ldrb	r3, [r3, #0]
 c0029fa:	f023 0310 	bic.w	r3, r3, #16
 c0029fe:	b2da      	uxtb	r2, r3
 c002a00:	4b36      	ldr	r3, [pc, #216]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002a02:	701a      	strb	r2, [r3, #0]
		log_entry = BLOCK4_ID;
 c002a04:	4b36      	ldr	r3, [pc, #216]	@ (c002ae0 <SPECCFA_speculate+0x1e8>)
 c002a06:	4a3d      	ldr	r2, [pc, #244]	@ (c002afc <SPECCFA_speculate+0x204>)
 c002a08:	601a      	str	r2, [r3, #0]
		report_secure->num_CF_Log_size = monitor_cflog_idxs[4];
 c002a0a:	4b37      	ldr	r3, [pc, #220]	@ (c002ae8 <SPECCFA_speculate+0x1f0>)
 c002a0c:	691b      	ldr	r3, [r3, #16]
 c002a0e:	b21a      	sxth	r2, r3
 c002a10:	683b      	ldr	r3, [r7, #0]
 c002a12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		report_secure->bits_left = monitor_cflog_bit_idxs[4];
 c002a16:	4b35      	ldr	r3, [pc, #212]	@ (c002aec <SPECCFA_speculate+0x1f4>)
 c002a18:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 c002a1c:	683b      	ldr	r3, [r7, #0]
 c002a1e:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
}
 c002a22:	e054      	b.n	c002ace <SPECCFA_speculate+0x1d6>
	else if((spec_detect & BLOCK5_MASK) == BLOCK5_MASK){
 c002a24:	4b2d      	ldr	r3, [pc, #180]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002a26:	781b      	ldrb	r3, [r3, #0]
 c002a28:	f003 0320 	and.w	r3, r3, #32
 c002a2c:	2b00      	cmp	r3, #0
 c002a2e:	d016      	beq.n	c002a5e <SPECCFA_speculate+0x166>
		spec_detect &= ~BLOCK5_MASK;
 c002a30:	4b2a      	ldr	r3, [pc, #168]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002a32:	781b      	ldrb	r3, [r3, #0]
 c002a34:	f023 0320 	bic.w	r3, r3, #32
 c002a38:	b2da      	uxtb	r2, r3
 c002a3a:	4b28      	ldr	r3, [pc, #160]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002a3c:	701a      	strb	r2, [r3, #0]
		log_entry = BLOCK5_ID;
 c002a3e:	4b28      	ldr	r3, [pc, #160]	@ (c002ae0 <SPECCFA_speculate+0x1e8>)
 c002a40:	4a2f      	ldr	r2, [pc, #188]	@ (c002b00 <SPECCFA_speculate+0x208>)
 c002a42:	601a      	str	r2, [r3, #0]
		report_secure->num_CF_Log_size = monitor_cflog_idxs[5];
 c002a44:	4b28      	ldr	r3, [pc, #160]	@ (c002ae8 <SPECCFA_speculate+0x1f0>)
 c002a46:	695b      	ldr	r3, [r3, #20]
 c002a48:	b21a      	sxth	r2, r3
 c002a4a:	683b      	ldr	r3, [r7, #0]
 c002a4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		report_secure->bits_left = monitor_cflog_bit_idxs[5];
 c002a50:	4b26      	ldr	r3, [pc, #152]	@ (c002aec <SPECCFA_speculate+0x1f4>)
 c002a52:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 c002a56:	683b      	ldr	r3, [r7, #0]
 c002a58:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
}
 c002a5c:	e037      	b.n	c002ace <SPECCFA_speculate+0x1d6>
	else if((spec_detect & BLOCK6_MASK) == BLOCK6_MASK){
 c002a5e:	4b1f      	ldr	r3, [pc, #124]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002a60:	781b      	ldrb	r3, [r3, #0]
 c002a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c002a66:	2b00      	cmp	r3, #0
 c002a68:	d016      	beq.n	c002a98 <SPECCFA_speculate+0x1a0>
		spec_detect &= ~BLOCK6_MASK;
 c002a6a:	4b1c      	ldr	r3, [pc, #112]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002a6c:	781b      	ldrb	r3, [r3, #0]
 c002a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 c002a72:	b2da      	uxtb	r2, r3
 c002a74:	4b19      	ldr	r3, [pc, #100]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002a76:	701a      	strb	r2, [r3, #0]
		log_entry = BLOCK6_ID;
 c002a78:	4b19      	ldr	r3, [pc, #100]	@ (c002ae0 <SPECCFA_speculate+0x1e8>)
 c002a7a:	4a22      	ldr	r2, [pc, #136]	@ (c002b04 <SPECCFA_speculate+0x20c>)
 c002a7c:	601a      	str	r2, [r3, #0]
		report_secure->num_CF_Log_size = monitor_cflog_idxs[6];
 c002a7e:	4b1a      	ldr	r3, [pc, #104]	@ (c002ae8 <SPECCFA_speculate+0x1f0>)
 c002a80:	699b      	ldr	r3, [r3, #24]
 c002a82:	b21a      	sxth	r2, r3
 c002a84:	683b      	ldr	r3, [r7, #0]
 c002a86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		report_secure->bits_left = monitor_cflog_bit_idxs[6];
 c002a8a:	4b18      	ldr	r3, [pc, #96]	@ (c002aec <SPECCFA_speculate+0x1f4>)
 c002a8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 c002a90:	683b      	ldr	r3, [r7, #0]
 c002a92:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
}
 c002a96:	e01a      	b.n	c002ace <SPECCFA_speculate+0x1d6>
	else if((spec_detect & BLOCK7_MASK) == BLOCK7_MASK){
 c002a98:	4b10      	ldr	r3, [pc, #64]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002a9a:	781b      	ldrb	r3, [r3, #0]
 c002a9c:	b25b      	sxtb	r3, r3
 c002a9e:	2b00      	cmp	r3, #0
 c002aa0:	da15      	bge.n	c002ace <SPECCFA_speculate+0x1d6>
		spec_detect &= ~BLOCK7_MASK;
 c002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002aa4:	781b      	ldrb	r3, [r3, #0]
 c002aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c002aaa:	b2da      	uxtb	r2, r3
 c002aac:	4b0b      	ldr	r3, [pc, #44]	@ (c002adc <SPECCFA_speculate+0x1e4>)
 c002aae:	701a      	strb	r2, [r3, #0]
		log_entry = BLOCK7_ID;
 c002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (c002ae0 <SPECCFA_speculate+0x1e8>)
 c002ab2:	4a15      	ldr	r2, [pc, #84]	@ (c002b08 <SPECCFA_speculate+0x210>)
 c002ab4:	601a      	str	r2, [r3, #0]
		report_secure->num_CF_Log_size = monitor_cflog_idxs[7];
 c002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (c002ae8 <SPECCFA_speculate+0x1f0>)
 c002ab8:	69db      	ldr	r3, [r3, #28]
 c002aba:	b21a      	sxth	r2, r3
 c002abc:	683b      	ldr	r3, [r7, #0]
 c002abe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		report_secure->bits_left = monitor_cflog_bit_idxs[7];
 c002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (c002aec <SPECCFA_speculate+0x1f4>)
 c002ac4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 c002ac8:	683b      	ldr	r3, [r7, #0]
 c002aca:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
}
 c002ace:	bf00      	nop
 c002ad0:	370c      	adds	r7, #12
 c002ad2:	46bd      	mov	sp, r7
 c002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ad8:	4770      	bx	lr
 c002ada:	bf00      	nop
 c002adc:	30000a5d 	.word	0x30000a5d
 c002ae0:	30000a60 	.word	0x30000a60
 c002ae4:	11111100 	.word	0x11111100
 c002ae8:	30000a24 	.word	0x30000a24
 c002aec:	30000a44 	.word	0x30000a44
 c002af0:	11111101 	.word	0x11111101
 c002af4:	11111102 	.word	0x11111102
 c002af8:	11111103 	.word	0x11111103
 c002afc:	11111104 	.word	0x11111104
 c002b00:	11111105 	.word	0x11111105
 c002b04:	11111106 	.word	0x11111106
 c002b08:	11111107 	.word	0x11111107

0c002b0c <SPECCFA_detect_path>:

void SPECCFA_detect_path(uint32_t value, uint32_t * path, uint8_t block_num, uint8_t size, CFA_REPORT * report_secure){
 c002b0c:	b480      	push	{r7}
 c002b0e:	b089      	sub	sp, #36	@ 0x24
 c002b10:	af00      	add	r7, sp, #0
 c002b12:	60f8      	str	r0, [r7, #12]
 c002b14:	60b9      	str	r1, [r7, #8]
 c002b16:	4611      	mov	r1, r2
 c002b18:	461a      	mov	r2, r3
 c002b1a:	460b      	mov	r3, r1
 c002b1c:	71fb      	strb	r3, [r7, #7]
 c002b1e:	4613      	mov	r3, r2
 c002b20:	71bb      	strb	r3, [r7, #6]
	uint8_t mask = (0x01 << block_num);
 c002b22:	79fb      	ldrb	r3, [r7, #7]
 c002b24:	2201      	movs	r2, #1
 c002b26:	fa02 f303 	lsl.w	r3, r2, r3
 c002b2a:	76fb      	strb	r3, [r7, #27]

	uint32_t next_in_path = path[spec_monitor_count[block_num]];
 c002b2c:	79fb      	ldrb	r3, [r7, #7]
 c002b2e:	4a4b      	ldr	r2, [pc, #300]	@ (c002c5c <SPECCFA_detect_path+0x150>)
 c002b30:	5cd3      	ldrb	r3, [r2, r3]
 c002b32:	009b      	lsls	r3, r3, #2
 c002b34:	68ba      	ldr	r2, [r7, #8]
 c002b36:	4413      	add	r3, r2
 c002b38:	681b      	ldr	r3, [r3, #0]
 c002b3a:	617b      	str	r3, [r7, #20]

	if(value == next_in_path){
 c002b3c:	68fa      	ldr	r2, [r7, #12]
 c002b3e:	697b      	ldr	r3, [r7, #20]
 c002b40:	429a      	cmp	r2, r3
 c002b42:	d149      	bne.n	c002bd8 <SPECCFA_detect_path+0xcc>

		// If this is the first match, grab the current log_ptr value
		if(spec_monitor_count[block_num] == 0){
 c002b44:	79fb      	ldrb	r3, [r7, #7]
 c002b46:	4a45      	ldr	r2, [pc, #276]	@ (c002c5c <SPECCFA_detect_path+0x150>)
 c002b48:	5cd3      	ldrb	r3, [r2, r3]
 c002b4a:	2b00      	cmp	r3, #0
 c002b4c:	d11b      	bne.n	c002b86 <SPECCFA_detect_path+0x7a>
			monitor_cflog_idxs[block_num] = report_secure->num_CF_Log_size;
 c002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002b50:	f9b3 2062 	ldrsh.w	r2, [r3, #98]	@ 0x62
 c002b54:	79fb      	ldrb	r3, [r7, #7]
 c002b56:	4611      	mov	r1, r2
 c002b58:	4a41      	ldr	r2, [pc, #260]	@ (c002c60 <SPECCFA_detect_path+0x154>)
 c002b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((repeat_detect == 0) || (prev_value != (0x11111100 | block_num))){
 c002b5e:	4b41      	ldr	r3, [pc, #260]	@ (c002c64 <SPECCFA_detect_path+0x158>)
 c002b60:	781b      	ldrb	r3, [r3, #0]
 c002b62:	2b00      	cmp	r3, #0
 c002b64:	d008      	beq.n	c002b78 <SPECCFA_detect_path+0x6c>
 c002b66:	79fb      	ldrb	r3, [r7, #7]
 c002b68:	f043 2311 	orr.w	r3, r3, #285217024	@ 0x11001100
 c002b6c:	f443 1388 	orr.w	r3, r3, #1114112	@ 0x110000
 c002b70:	4a3d      	ldr	r2, [pc, #244]	@ (c002c68 <SPECCFA_detect_path+0x15c>)
 c002b72:	6812      	ldr	r2, [r2, #0]
 c002b74:	4293      	cmp	r3, r2
 c002b76:	d006      	beq.n	c002b86 <SPECCFA_detect_path+0x7a>
			    monitor_cflog_bit_idxs[block_num] = report_secure->bits_left;
 c002b78:	79fb      	ldrb	r3, [r7, #7]
 c002b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 c002b7c:	f9b2 1168 	ldrsh.w	r1, [r2, #360]	@ 0x168
 c002b80:	4a3a      	ldr	r2, [pc, #232]	@ (c002c6c <SPECCFA_detect_path+0x160>)
 c002b82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}

		// If match, increment the count and set the bit in monitor
		spec_monitor_count[block_num]++;
 c002b86:	79fb      	ldrb	r3, [r7, #7]
 c002b88:	4a34      	ldr	r2, [pc, #208]	@ (c002c5c <SPECCFA_detect_path+0x150>)
 c002b8a:	5cd2      	ldrb	r2, [r2, r3]
 c002b8c:	3201      	adds	r2, #1
 c002b8e:	b2d1      	uxtb	r1, r2
 c002b90:	4a32      	ldr	r2, [pc, #200]	@ (c002c5c <SPECCFA_detect_path+0x150>)
 c002b92:	54d1      	strb	r1, [r2, r3]
		spec_monitor |= mask;
 c002b94:	4b36      	ldr	r3, [pc, #216]	@ (c002c70 <SPECCFA_detect_path+0x164>)
 c002b96:	781a      	ldrb	r2, [r3, #0]
 c002b98:	7efb      	ldrb	r3, [r7, #27]
 c002b9a:	4313      	orrs	r3, r2
 c002b9c:	b2da      	uxtb	r2, r3
 c002b9e:	4b34      	ldr	r3, [pc, #208]	@ (c002c70 <SPECCFA_detect_path+0x164>)
 c002ba0:	701a      	strb	r2, [r3, #0]

		// If the count equals the subpath size, the entire subpath occurred in the log
		if(spec_monitor_count[block_num] == size){
 c002ba2:	79fb      	ldrb	r3, [r7, #7]
 c002ba4:	4a2d      	ldr	r2, [pc, #180]	@ (c002c5c <SPECCFA_detect_path+0x150>)
 c002ba6:	5cd3      	ldrb	r3, [r2, r3]
 c002ba8:	79ba      	ldrb	r2, [r7, #6]
 c002baa:	429a      	cmp	r2, r3
 c002bac:	d14f      	bne.n	c002c4e <SPECCFA_detect_path+0x142>
			// Turn on detect bit, reset everything
			spec_detect = mask;
 c002bae:	4a31      	ldr	r2, [pc, #196]	@ (c002c74 <SPECCFA_detect_path+0x168>)
 c002bb0:	7efb      	ldrb	r3, [r7, #27]
 c002bb2:	7013      	strb	r3, [r2, #0]
			spec_monitor = 0;
 c002bb4:	4b2e      	ldr	r3, [pc, #184]	@ (c002c70 <SPECCFA_detect_path+0x164>)
 c002bb6:	2200      	movs	r2, #0
 c002bb8:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<TOTAL_BLOCKS; i++){
 c002bba:	2300      	movs	r3, #0
 c002bbc:	61fb      	str	r3, [r7, #28]
 c002bbe:	e007      	b.n	c002bd0 <SPECCFA_detect_path+0xc4>
				spec_monitor_count[i] = 0;
 c002bc0:	4a26      	ldr	r2, [pc, #152]	@ (c002c5c <SPECCFA_detect_path+0x150>)
 c002bc2:	69fb      	ldr	r3, [r7, #28]
 c002bc4:	4413      	add	r3, r2
 c002bc6:	2200      	movs	r2, #0
 c002bc8:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<TOTAL_BLOCKS; i++){
 c002bca:	69fb      	ldr	r3, [r7, #28]
 c002bcc:	3301      	adds	r3, #1
 c002bce:	61fb      	str	r3, [r7, #28]
 c002bd0:	69fb      	ldr	r3, [r7, #28]
 c002bd2:	2b07      	cmp	r3, #7
 c002bd4:	ddf4      	ble.n	c002bc0 <SPECCFA_detect_path+0xb4>
			monitor_cflog_idxs[block_num] = 0;
			monitor_cflog_bit_idxs[block_num] = 0;
		}

	}
}
 c002bd6:	e03a      	b.n	c002c4e <SPECCFA_detect_path+0x142>
	}  else if((spec_monitor & mask) == mask){
 c002bd8:	4b25      	ldr	r3, [pc, #148]	@ (c002c70 <SPECCFA_detect_path+0x164>)
 c002bda:	781a      	ldrb	r2, [r3, #0]
 c002bdc:	7efb      	ldrb	r3, [r7, #27]
 c002bde:	4013      	ands	r3, r2
 c002be0:	b2db      	uxtb	r3, r3
 c002be2:	7efa      	ldrb	r2, [r7, #27]
 c002be4:	429a      	cmp	r2, r3
 c002be6:	d132      	bne.n	c002c4e <SPECCFA_detect_path+0x142>
		if(value == path[0]){
 c002be8:	68bb      	ldr	r3, [r7, #8]
 c002bea:	681b      	ldr	r3, [r3, #0]
 c002bec:	68fa      	ldr	r2, [r7, #12]
 c002bee:	429a      	cmp	r2, r3
 c002bf0:	d113      	bne.n	c002c1a <SPECCFA_detect_path+0x10e>
			spec_monitor_count[block_num] = 1;
 c002bf2:	79fb      	ldrb	r3, [r7, #7]
 c002bf4:	4a19      	ldr	r2, [pc, #100]	@ (c002c5c <SPECCFA_detect_path+0x150>)
 c002bf6:	2101      	movs	r1, #1
 c002bf8:	54d1      	strb	r1, [r2, r3]
			monitor_cflog_idxs[block_num] = report_secure->num_CF_Log_size;
 c002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002bfc:	f9b3 2062 	ldrsh.w	r2, [r3, #98]	@ 0x62
 c002c00:	79fb      	ldrb	r3, [r7, #7]
 c002c02:	4611      	mov	r1, r2
 c002c04:	4a16      	ldr	r2, [pc, #88]	@ (c002c60 <SPECCFA_detect_path+0x154>)
 c002c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			monitor_cflog_bit_idxs[block_num] = report_secure->bits_left;
 c002c0a:	79fb      	ldrb	r3, [r7, #7]
 c002c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 c002c0e:	f9b2 1168 	ldrsh.w	r1, [r2, #360]	@ 0x168
 c002c12:	4a16      	ldr	r2, [pc, #88]	@ (c002c6c <SPECCFA_detect_path+0x160>)
 c002c14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 c002c18:	e019      	b.n	c002c4e <SPECCFA_detect_path+0x142>
			spec_monitor &= ~mask;
 c002c1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 c002c1e:	43db      	mvns	r3, r3
 c002c20:	b25a      	sxtb	r2, r3
 c002c22:	4b13      	ldr	r3, [pc, #76]	@ (c002c70 <SPECCFA_detect_path+0x164>)
 c002c24:	781b      	ldrb	r3, [r3, #0]
 c002c26:	b25b      	sxtb	r3, r3
 c002c28:	4013      	ands	r3, r2
 c002c2a:	b25b      	sxtb	r3, r3
 c002c2c:	b2da      	uxtb	r2, r3
 c002c2e:	4b10      	ldr	r3, [pc, #64]	@ (c002c70 <SPECCFA_detect_path+0x164>)
 c002c30:	701a      	strb	r2, [r3, #0]
			spec_monitor_count[block_num] = 0;
 c002c32:	79fb      	ldrb	r3, [r7, #7]
 c002c34:	4a09      	ldr	r2, [pc, #36]	@ (c002c5c <SPECCFA_detect_path+0x150>)
 c002c36:	2100      	movs	r1, #0
 c002c38:	54d1      	strb	r1, [r2, r3]
			monitor_cflog_idxs[block_num] = 0;
 c002c3a:	79fb      	ldrb	r3, [r7, #7]
 c002c3c:	4a08      	ldr	r2, [pc, #32]	@ (c002c60 <SPECCFA_detect_path+0x154>)
 c002c3e:	2100      	movs	r1, #0
 c002c40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			monitor_cflog_bit_idxs[block_num] = 0;
 c002c44:	79fb      	ldrb	r3, [r7, #7]
 c002c46:	4a09      	ldr	r2, [pc, #36]	@ (c002c6c <SPECCFA_detect_path+0x160>)
 c002c48:	2100      	movs	r1, #0
 c002c4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 c002c4e:	bf00      	nop
 c002c50:	3724      	adds	r7, #36	@ 0x24
 c002c52:	46bd      	mov	sp, r7
 c002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002c58:	4770      	bx	lr
 c002c5a:	bf00      	nop
 c002c5c:	30000a54 	.word	0x30000a54
 c002c60:	30000a24 	.word	0x30000a24
 c002c64:	30000a64 	.word	0x30000a64
 c002c68:	30000a68 	.word	0x30000a68
 c002c6c:	30000a44 	.word	0x30000a44
 c002c70:	30000a5c 	.word	0x30000a5c
 c002c74:	30000a5d 	.word	0x30000a5d

0c002c78 <SPECCFA_detect_paths>:

void SPECCFA_detect_paths(uint32_t addr, CFA_REPORT * report_secure){
 c002c78:	b580      	push	{r7, lr}
 c002c7a:	b086      	sub	sp, #24
 c002c7c:	af02      	add	r7, sp, #8
 c002c7e:	6078      	str	r0, [r7, #4]
 c002c80:	6039      	str	r1, [r7, #0]
	for(int i=0; i<TOTAL_BLOCKS; i++){
 c002c82:	2300      	movs	r3, #0
 c002c84:	60fb      	str	r3, [r7, #12]
 c002c86:	e012      	b.n	c002cae <SPECCFA_detect_paths+0x36>
		SPECCFA_detect_path(addr, path_base_addrs[i], i, block_sizes[i], report_secure);
 c002c88:	4a0d      	ldr	r2, [pc, #52]	@ (c002cc0 <SPECCFA_detect_paths+0x48>)
 c002c8a:	68fb      	ldr	r3, [r7, #12]
 c002c8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 c002c90:	68fb      	ldr	r3, [r7, #12]
 c002c92:	b2da      	uxtb	r2, r3
 c002c94:	480b      	ldr	r0, [pc, #44]	@ (c002cc4 <SPECCFA_detect_paths+0x4c>)
 c002c96:	68fb      	ldr	r3, [r7, #12]
 c002c98:	4403      	add	r3, r0
 c002c9a:	7818      	ldrb	r0, [r3, #0]
 c002c9c:	683b      	ldr	r3, [r7, #0]
 c002c9e:	9300      	str	r3, [sp, #0]
 c002ca0:	4603      	mov	r3, r0
 c002ca2:	6878      	ldr	r0, [r7, #4]
 c002ca4:	f7ff ff32 	bl	c002b0c <SPECCFA_detect_path>
	for(int i=0; i<TOTAL_BLOCKS; i++){
 c002ca8:	68fb      	ldr	r3, [r7, #12]
 c002caa:	3301      	adds	r3, #1
 c002cac:	60fb      	str	r3, [r7, #12]
 c002cae:	68fb      	ldr	r3, [r7, #12]
 c002cb0:	2b07      	cmp	r3, #7
 c002cb2:	dde9      	ble.n	c002c88 <SPECCFA_detect_paths+0x10>
	}
}
 c002cb4:	bf00      	nop
 c002cb6:	bf00      	nop
 c002cb8:	3710      	adds	r7, #16
 c002cba:	46bd      	mov	sp, r7
 c002cbc:	bd80      	pop	{r7, pc}
 c002cbe:	bf00      	nop
 c002cc0:	300005ec 	.word	0x300005ec
 c002cc4:	300005e4 	.word	0x300005e4

0c002cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c002cc8:	b580      	push	{r7, lr}
 c002cca:	b084      	sub	sp, #16
 c002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c002cce:	4b31      	ldr	r3, [pc, #196]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 c002cd2:	4a30      	ldr	r2, [pc, #192]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002cd4:	f043 0301 	orr.w	r3, r3, #1
 c002cd8:	6613      	str	r3, [r2, #96]	@ 0x60
 c002cda:	4b2e      	ldr	r3, [pc, #184]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 c002cde:	f003 0301 	and.w	r3, r3, #1
 c002ce2:	60fb      	str	r3, [r7, #12]
 c002ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c002ce6:	4b2b      	ldr	r3, [pc, #172]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c002cea:	4a2a      	ldr	r2, [pc, #168]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c002cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 c002cf2:	4b28      	ldr	r3, [pc, #160]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c002cfa:	60bb      	str	r3, [r7, #8]
 c002cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c002cfe:	4b25      	ldr	r3, [pc, #148]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c002d02:	4a24      	ldr	r2, [pc, #144]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002d04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 c002d08:	6493      	str	r3, [r2, #72]	@ 0x48
 c002d0a:	4b22      	ldr	r3, [pc, #136]	@ (c002d94 <HAL_MspInit+0xcc>)
 c002d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c002d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 c002d12:	607b      	str	r3, [r7, #4]
 c002d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c002d16:	2200      	movs	r2, #0
 c002d18:	2100      	movs	r1, #0
 c002d1a:	2008      	movs	r0, #8
 c002d1c:	f002 ff1b 	bl	c005b56 <HAL_NVIC_SetPriority>
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c002d20:	2008      	movs	r0, #8
 c002d22:	f002 ff32 	bl	c005b8a <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c002d26:	f003 fc3b 	bl	c0065a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /** PWR Non-Privilege/Non-Secure Items Configurations
  */
  HAL_PWR_ConfigAttributes(PWR_WKUP1, PWR_NSEC |PWR_NPRIV);
 c002d2a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d2e:	2001      	movs	r0, #1
 c002d30:	f003 fb76 	bl	c006420 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP2, PWR_NSEC |PWR_NPRIV);
 c002d34:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d38:	2002      	movs	r0, #2
 c002d3a:	f003 fb71 	bl	c006420 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP3, PWR_NSEC |PWR_NPRIV);
 c002d3e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d42:	2004      	movs	r0, #4
 c002d44:	f003 fb6c 	bl	c006420 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP4, PWR_NSEC |PWR_NPRIV);
 c002d48:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d4c:	2008      	movs	r0, #8
 c002d4e:	f003 fb67 	bl	c006420 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP5, PWR_NSEC |PWR_NPRIV);
 c002d52:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d56:	2010      	movs	r0, #16
 c002d58:	f003 fb62 	bl	c006420 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VDM, PWR_NSEC |PWR_NPRIV);
 c002d5c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d60:	f44f 7000 	mov.w	r0, #512	@ 0x200
 c002d64:	f003 fb5c 	bl	c006420 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_APC, PWR_NSEC |PWR_NPRIV);
 c002d68:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d6c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 c002d70:	f003 fb56 	bl	c006420 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_LPM, PWR_NSEC |PWR_NPRIV);
 c002d74:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d78:	f44f 7080 	mov.w	r0, #256	@ 0x100
 c002d7c:	f003 fb50 	bl	c006420 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c002d80:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c002d84:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 c002d88:	f003 fb4a 	bl	c006420 <HAL_PWR_ConfigAttributes>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c002d8c:	bf00      	nop
 c002d8e:	3710      	adds	r7, #16
 c002d90:	46bd      	mov	sp, r7
 c002d92:	bd80      	pop	{r7, pc}
 c002d94:	50021000 	.word	0x50021000

0c002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c002d98:	b480      	push	{r7}
 c002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c002d9c:	bf00      	nop
 c002d9e:	e7fd      	b.n	c002d9c <NMI_Handler+0x4>

0c002da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c002da0:	b480      	push	{r7}
 c002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c002da4:	bf00      	nop
 c002da6:	e7fd      	b.n	c002da4 <HardFault_Handler+0x4>

0c002da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c002da8:	b480      	push	{r7}
 c002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c002dac:	bf00      	nop
 c002dae:	e7fd      	b.n	c002dac <MemManage_Handler+0x4>

0c002db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c002db0:	b480      	push	{r7}
 c002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c002db4:	bf00      	nop
 c002db6:	e7fd      	b.n	c002db4 <BusFault_Handler+0x4>

0c002db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c002db8:	b480      	push	{r7}
 c002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c002dbc:	bf00      	nop
 c002dbe:	e7fd      	b.n	c002dbc <UsageFault_Handler+0x4>

0c002dc0 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c002dc0:	b480      	push	{r7}
 c002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c002dc4:	bf00      	nop
 c002dc6:	e7fd      	b.n	c002dc4 <SecureFault_Handler+0x4>

0c002dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c002dc8:	b480      	push	{r7}
 c002dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c002dcc:	bf00      	nop
 c002dce:	46bd      	mov	sp, r7
 c002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002dd4:	4770      	bx	lr

0c002dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c002dd6:	b480      	push	{r7}
 c002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c002dda:	bf00      	nop
 c002ddc:	46bd      	mov	sp, r7
 c002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002de2:	4770      	bx	lr

0c002de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c002de4:	b480      	push	{r7}
 c002de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c002de8:	bf00      	nop
 c002dea:	46bd      	mov	sp, r7
 c002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002df0:	4770      	bx	lr

0c002df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c002df2:	b580      	push	{r7, lr}
 c002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c002df6:	f002 fdb3 	bl	c005960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c002dfa:	bf00      	nop
 c002dfc:	bd80      	pop	{r7, pc}

0c002dfe <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c002dfe:	b580      	push	{r7, lr}
 c002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c002e02:	f003 fa7f 	bl	c006304 <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c002e06:	bf00      	nop
 c002e08:	bd80      	pop	{r7, pc}

0c002e0a <_getpid>:
 c002e0a:	b480      	push	{r7}
 c002e0c:	af00      	add	r7, sp, #0
 c002e0e:	2301      	movs	r3, #1
 c002e10:	4618      	mov	r0, r3
 c002e12:	46bd      	mov	sp, r7
 c002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e18:	4770      	bx	lr

0c002e1a <_kill>:
 c002e1a:	b580      	push	{r7, lr}
 c002e1c:	b082      	sub	sp, #8
 c002e1e:	af00      	add	r7, sp, #0
 c002e20:	6078      	str	r0, [r7, #4]
 c002e22:	6039      	str	r1, [r7, #0]
 c002e24:	f006 f97e 	bl	c009124 <__errno>
 c002e28:	4603      	mov	r3, r0
 c002e2a:	2216      	movs	r2, #22
 c002e2c:	601a      	str	r2, [r3, #0]
 c002e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c002e32:	4618      	mov	r0, r3
 c002e34:	3708      	adds	r7, #8
 c002e36:	46bd      	mov	sp, r7
 c002e38:	bd80      	pop	{r7, pc}

0c002e3a <_exit>:
 c002e3a:	b580      	push	{r7, lr}
 c002e3c:	b082      	sub	sp, #8
 c002e3e:	af00      	add	r7, sp, #0
 c002e40:	6078      	str	r0, [r7, #4]
 c002e42:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 c002e46:	6878      	ldr	r0, [r7, #4]
 c002e48:	f7ff ffe7 	bl	c002e1a <_kill>
 c002e4c:	bf00      	nop
 c002e4e:	e7fd      	b.n	c002e4c <_exit+0x12>

0c002e50 <_read>:
 c002e50:	b580      	push	{r7, lr}
 c002e52:	b086      	sub	sp, #24
 c002e54:	af00      	add	r7, sp, #0
 c002e56:	60f8      	str	r0, [r7, #12]
 c002e58:	60b9      	str	r1, [r7, #8]
 c002e5a:	607a      	str	r2, [r7, #4]
 c002e5c:	2300      	movs	r3, #0
 c002e5e:	617b      	str	r3, [r7, #20]
 c002e60:	e00a      	b.n	c002e78 <_read+0x28>
 c002e62:	f3af 8000 	nop.w
 c002e66:	4601      	mov	r1, r0
 c002e68:	68bb      	ldr	r3, [r7, #8]
 c002e6a:	1c5a      	adds	r2, r3, #1
 c002e6c:	60ba      	str	r2, [r7, #8]
 c002e6e:	b2ca      	uxtb	r2, r1
 c002e70:	701a      	strb	r2, [r3, #0]
 c002e72:	697b      	ldr	r3, [r7, #20]
 c002e74:	3301      	adds	r3, #1
 c002e76:	617b      	str	r3, [r7, #20]
 c002e78:	697a      	ldr	r2, [r7, #20]
 c002e7a:	687b      	ldr	r3, [r7, #4]
 c002e7c:	429a      	cmp	r2, r3
 c002e7e:	dbf0      	blt.n	c002e62 <_read+0x12>
 c002e80:	687b      	ldr	r3, [r7, #4]
 c002e82:	4618      	mov	r0, r3
 c002e84:	3718      	adds	r7, #24
 c002e86:	46bd      	mov	sp, r7
 c002e88:	bd80      	pop	{r7, pc}

0c002e8a <_write>:
 c002e8a:	b580      	push	{r7, lr}
 c002e8c:	b086      	sub	sp, #24
 c002e8e:	af00      	add	r7, sp, #0
 c002e90:	60f8      	str	r0, [r7, #12]
 c002e92:	60b9      	str	r1, [r7, #8]
 c002e94:	607a      	str	r2, [r7, #4]
 c002e96:	2300      	movs	r3, #0
 c002e98:	617b      	str	r3, [r7, #20]
 c002e9a:	e009      	b.n	c002eb0 <_write+0x26>
 c002e9c:	68bb      	ldr	r3, [r7, #8]
 c002e9e:	1c5a      	adds	r2, r3, #1
 c002ea0:	60ba      	str	r2, [r7, #8]
 c002ea2:	781b      	ldrb	r3, [r3, #0]
 c002ea4:	4618      	mov	r0, r3
 c002ea6:	f3af 8000 	nop.w
 c002eaa:	697b      	ldr	r3, [r7, #20]
 c002eac:	3301      	adds	r3, #1
 c002eae:	617b      	str	r3, [r7, #20]
 c002eb0:	697a      	ldr	r2, [r7, #20]
 c002eb2:	687b      	ldr	r3, [r7, #4]
 c002eb4:	429a      	cmp	r2, r3
 c002eb6:	dbf1      	blt.n	c002e9c <_write+0x12>
 c002eb8:	687b      	ldr	r3, [r7, #4]
 c002eba:	4618      	mov	r0, r3
 c002ebc:	3718      	adds	r7, #24
 c002ebe:	46bd      	mov	sp, r7
 c002ec0:	bd80      	pop	{r7, pc}

0c002ec2 <_close>:
 c002ec2:	b480      	push	{r7}
 c002ec4:	b083      	sub	sp, #12
 c002ec6:	af00      	add	r7, sp, #0
 c002ec8:	6078      	str	r0, [r7, #4]
 c002eca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c002ece:	4618      	mov	r0, r3
 c002ed0:	370c      	adds	r7, #12
 c002ed2:	46bd      	mov	sp, r7
 c002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ed8:	4770      	bx	lr

0c002eda <_fstat>:
 c002eda:	b480      	push	{r7}
 c002edc:	b083      	sub	sp, #12
 c002ede:	af00      	add	r7, sp, #0
 c002ee0:	6078      	str	r0, [r7, #4]
 c002ee2:	6039      	str	r1, [r7, #0]
 c002ee4:	683b      	ldr	r3, [r7, #0]
 c002ee6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 c002eea:	605a      	str	r2, [r3, #4]
 c002eec:	2300      	movs	r3, #0
 c002eee:	4618      	mov	r0, r3
 c002ef0:	370c      	adds	r7, #12
 c002ef2:	46bd      	mov	sp, r7
 c002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ef8:	4770      	bx	lr

0c002efa <_isatty>:
 c002efa:	b480      	push	{r7}
 c002efc:	b083      	sub	sp, #12
 c002efe:	af00      	add	r7, sp, #0
 c002f00:	6078      	str	r0, [r7, #4]
 c002f02:	2301      	movs	r3, #1
 c002f04:	4618      	mov	r0, r3
 c002f06:	370c      	adds	r7, #12
 c002f08:	46bd      	mov	sp, r7
 c002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f0e:	4770      	bx	lr

0c002f10 <_lseek>:
 c002f10:	b480      	push	{r7}
 c002f12:	b085      	sub	sp, #20
 c002f14:	af00      	add	r7, sp, #0
 c002f16:	60f8      	str	r0, [r7, #12]
 c002f18:	60b9      	str	r1, [r7, #8]
 c002f1a:	607a      	str	r2, [r7, #4]
 c002f1c:	2300      	movs	r3, #0
 c002f1e:	4618      	mov	r0, r3
 c002f20:	3714      	adds	r7, #20
 c002f22:	46bd      	mov	sp, r7
 c002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f28:	4770      	bx	lr
	...

0c002f2c <_sbrk>:
 c002f2c:	b580      	push	{r7, lr}
 c002f2e:	b086      	sub	sp, #24
 c002f30:	af00      	add	r7, sp, #0
 c002f32:	6078      	str	r0, [r7, #4]
 c002f34:	4a14      	ldr	r2, [pc, #80]	@ (c002f88 <_sbrk+0x5c>)
 c002f36:	4b15      	ldr	r3, [pc, #84]	@ (c002f8c <_sbrk+0x60>)
 c002f38:	1ad3      	subs	r3, r2, r3
 c002f3a:	617b      	str	r3, [r7, #20]
 c002f3c:	697b      	ldr	r3, [r7, #20]
 c002f3e:	613b      	str	r3, [r7, #16]
 c002f40:	4b13      	ldr	r3, [pc, #76]	@ (c002f90 <_sbrk+0x64>)
 c002f42:	681b      	ldr	r3, [r3, #0]
 c002f44:	2b00      	cmp	r3, #0
 c002f46:	d102      	bne.n	c002f4e <_sbrk+0x22>
 c002f48:	4b11      	ldr	r3, [pc, #68]	@ (c002f90 <_sbrk+0x64>)
 c002f4a:	4a12      	ldr	r2, [pc, #72]	@ (c002f94 <_sbrk+0x68>)
 c002f4c:	601a      	str	r2, [r3, #0]
 c002f4e:	4b10      	ldr	r3, [pc, #64]	@ (c002f90 <_sbrk+0x64>)
 c002f50:	681a      	ldr	r2, [r3, #0]
 c002f52:	687b      	ldr	r3, [r7, #4]
 c002f54:	4413      	add	r3, r2
 c002f56:	693a      	ldr	r2, [r7, #16]
 c002f58:	429a      	cmp	r2, r3
 c002f5a:	d207      	bcs.n	c002f6c <_sbrk+0x40>
 c002f5c:	f006 f8e2 	bl	c009124 <__errno>
 c002f60:	4603      	mov	r3, r0
 c002f62:	220c      	movs	r2, #12
 c002f64:	601a      	str	r2, [r3, #0]
 c002f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c002f6a:	e009      	b.n	c002f80 <_sbrk+0x54>
 c002f6c:	4b08      	ldr	r3, [pc, #32]	@ (c002f90 <_sbrk+0x64>)
 c002f6e:	681b      	ldr	r3, [r3, #0]
 c002f70:	60fb      	str	r3, [r7, #12]
 c002f72:	4b07      	ldr	r3, [pc, #28]	@ (c002f90 <_sbrk+0x64>)
 c002f74:	681a      	ldr	r2, [r3, #0]
 c002f76:	687b      	ldr	r3, [r7, #4]
 c002f78:	4413      	add	r3, r2
 c002f7a:	4a05      	ldr	r2, [pc, #20]	@ (c002f90 <_sbrk+0x64>)
 c002f7c:	6013      	str	r3, [r2, #0]
 c002f7e:	68fb      	ldr	r3, [r7, #12]
 c002f80:	4618      	mov	r0, r3
 c002f82:	3718      	adds	r7, #24
 c002f84:	46bd      	mov	sp, r7
 c002f86:	bd80      	pop	{r7, pc}
 c002f88:	30018000 	.word	0x30018000
 c002f8c:	00000400 	.word	0x00000400
 c002f90:	30000a74 	.word	0x30000a74
 c002f94:	30000c58 	.word	0x30000c58

0c002f98 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c002f98:	b480      	push	{r7}
 c002f9a:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c002f9c:	4b2f      	ldr	r3, [pc, #188]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002f9e:	2200      	movs	r2, #0
 c002fa0:	609a      	str	r2, [r3, #8]
 c002fa2:	4b2e      	ldr	r3, [pc, #184]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fa4:	4a2e      	ldr	r2, [pc, #184]	@ (c003060 <TZ_SAU_Setup+0xc8>)
 c002fa6:	60da      	str	r2, [r3, #12]
 c002fa8:	4b2c      	ldr	r3, [pc, #176]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002faa:	4a2e      	ldr	r2, [pc, #184]	@ (c003064 <TZ_SAU_Setup+0xcc>)
 c002fac:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c002fae:	4b2b      	ldr	r3, [pc, #172]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fb0:	2201      	movs	r2, #1
 c002fb2:	609a      	str	r2, [r3, #8]
 c002fb4:	4b29      	ldr	r3, [pc, #164]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fb6:	4a2c      	ldr	r2, [pc, #176]	@ (c003068 <TZ_SAU_Setup+0xd0>)
 c002fb8:	60da      	str	r2, [r3, #12]
 c002fba:	4b28      	ldr	r3, [pc, #160]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fbc:	4a2b      	ldr	r2, [pc, #172]	@ (c00306c <TZ_SAU_Setup+0xd4>)
 c002fbe:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c002fc0:	4b26      	ldr	r3, [pc, #152]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fc2:	2202      	movs	r2, #2
 c002fc4:	609a      	str	r2, [r3, #8]
 c002fc6:	4b25      	ldr	r3, [pc, #148]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fc8:	4a29      	ldr	r2, [pc, #164]	@ (c003070 <TZ_SAU_Setup+0xd8>)
 c002fca:	60da      	str	r2, [r3, #12]
 c002fcc:	4b23      	ldr	r3, [pc, #140]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fce:	4a29      	ldr	r2, [pc, #164]	@ (c003074 <TZ_SAU_Setup+0xdc>)
 c002fd0:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c002fd2:	4b22      	ldr	r3, [pc, #136]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fd4:	2203      	movs	r2, #3
 c002fd6:	609a      	str	r2, [r3, #8]
 c002fd8:	4b20      	ldr	r3, [pc, #128]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 c002fde:	60da      	str	r2, [r3, #12]
 c002fe0:	4b1e      	ldr	r3, [pc, #120]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fe2:	4a25      	ldr	r2, [pc, #148]	@ (c003078 <TZ_SAU_Setup+0xe0>)
 c002fe4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fe8:	2204      	movs	r2, #4
 c002fea:	609a      	str	r2, [r3, #8]
 c002fec:	4b1b      	ldr	r3, [pc, #108]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002fee:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 c002ff2:	60da      	str	r2, [r3, #12]
 c002ff4:	4b19      	ldr	r3, [pc, #100]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002ff6:	4a21      	ldr	r2, [pc, #132]	@ (c00307c <TZ_SAU_Setup+0xe4>)
 c002ff8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c002ffa:	4b18      	ldr	r3, [pc, #96]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c002ffc:	2205      	movs	r2, #5
 c002ffe:	609a      	str	r2, [r3, #8]
 c003000:	4b16      	ldr	r3, [pc, #88]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c003002:	4a1f      	ldr	r2, [pc, #124]	@ (c003080 <TZ_SAU_Setup+0xe8>)
 c003004:	60da      	str	r2, [r3, #12]
 c003006:	4b15      	ldr	r3, [pc, #84]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c003008:	4a1e      	ldr	r2, [pc, #120]	@ (c003084 <TZ_SAU_Setup+0xec>)
 c00300a:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c00300c:	4b13      	ldr	r3, [pc, #76]	@ (c00305c <TZ_SAU_Setup+0xc4>)
 c00300e:	2201      	movs	r2, #1
 c003010:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c003012:	4b1d      	ldr	r3, [pc, #116]	@ (c003088 <TZ_SAU_Setup+0xf0>)
 c003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c003018:	4a1b      	ldr	r2, [pc, #108]	@ (c003088 <TZ_SAU_Setup+0xf0>)
 c00301a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 c00301e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c003022:	4b1a      	ldr	r3, [pc, #104]	@ (c00308c <TZ_SAU_Setup+0xf4>)
 c003024:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c003026:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00302a:	4a18      	ldr	r2, [pc, #96]	@ (c00308c <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c00302c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c003030:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c003032:	4b17      	ldr	r3, [pc, #92]	@ (c003090 <TZ_SAU_Setup+0xf8>)
 c003034:	2200      	movs	r2, #0
 c003036:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c00303a:	4b15      	ldr	r3, [pc, #84]	@ (c003090 <TZ_SAU_Setup+0xf8>)
 c00303c:	2200      	movs	r2, #0
 c00303e:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c003042:	4b13      	ldr	r3, [pc, #76]	@ (c003090 <TZ_SAU_Setup+0xf8>)
 c003044:	2200      	movs	r2, #0
 c003046:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c00304a:	4b11      	ldr	r3, [pc, #68]	@ (c003090 <TZ_SAU_Setup+0xf8>)
 c00304c:	2200      	movs	r2, #0
 c00304e:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

}
 c003052:	bf00      	nop
 c003054:	46bd      	mov	sp, r7
 c003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00305a:	4770      	bx	lr
 c00305c:	e000edd0 	.word	0xe000edd0
 c003060:	0c03e000 	.word	0x0c03e000
 c003064:	0c03ffe3 	.word	0x0c03ffe3
 c003068:	08040000 	.word	0x08040000
 c00306c:	0807ffe1 	.word	0x0807ffe1
 c003070:	20018000 	.word	0x20018000
 c003074:	2003ffe1 	.word	0x2003ffe1
 c003078:	4fffffe1 	.word	0x4fffffe1
 c00307c:	9fffffe1 	.word	0x9fffffe1
 c003080:	0bf90000 	.word	0x0bf90000
 c003084:	0bfa8fe1 	.word	0x0bfa8fe1
 c003088:	e000ed00 	.word	0xe000ed00
 c00308c:	e000ef30 	.word	0xe000ef30
 c003090:	e000e100 	.word	0xe000e100

0c003094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c003094:	b580      	push	{r7, lr}
 c003096:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c003098:	f7ff ff7e 	bl	c002f98 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c00309c:	4b08      	ldr	r3, [pc, #32]	@ (c0030c0 <SystemInit+0x2c>)
 c00309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0030a2:	4a07      	ldr	r2, [pc, #28]	@ (c0030c0 <SystemInit+0x2c>)
 c0030a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c0030a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0030ac:	4b05      	ldr	r3, [pc, #20]	@ (c0030c4 <SystemInit+0x30>)
 c0030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0030b2:	4a04      	ldr	r2, [pc, #16]	@ (c0030c4 <SystemInit+0x30>)
 c0030b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c0030b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 c0030bc:	bf00      	nop
 c0030be:	bd80      	pop	{r7, pc}
 c0030c0:	e000ed00 	.word	0xe000ed00
 c0030c4:	e002ed00 	.word	0xe002ed00

0c0030c8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0030c8:	b480      	push	{r7}
 c0030ca:	b087      	sub	sp, #28
 c0030cc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0030ce:	4b4f      	ldr	r3, [pc, #316]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c0030d0:	681b      	ldr	r3, [r3, #0]
 c0030d2:	f003 0308 	and.w	r3, r3, #8
 c0030d6:	2b00      	cmp	r3, #0
 c0030d8:	d107      	bne.n	c0030ea <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0030da:	4b4c      	ldr	r3, [pc, #304]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c0030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0030e0:	0a1b      	lsrs	r3, r3, #8
 c0030e2:	f003 030f 	and.w	r3, r3, #15
 c0030e6:	617b      	str	r3, [r7, #20]
 c0030e8:	e005      	b.n	c0030f6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0030ea:	4b48      	ldr	r3, [pc, #288]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c0030ec:	681b      	ldr	r3, [r3, #0]
 c0030ee:	091b      	lsrs	r3, r3, #4
 c0030f0:	f003 030f 	and.w	r3, r3, #15
 c0030f4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0030f6:	4a46      	ldr	r2, [pc, #280]	@ (c003210 <SystemCoreClockUpdate+0x148>)
 c0030f8:	697b      	ldr	r3, [r7, #20]
 c0030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0030fe:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c003100:	4b42      	ldr	r3, [pc, #264]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c003102:	689b      	ldr	r3, [r3, #8]
 c003104:	f003 030c 	and.w	r3, r3, #12
 c003108:	2b0c      	cmp	r3, #12
 c00310a:	d866      	bhi.n	c0031da <SystemCoreClockUpdate+0x112>
 c00310c:	a201      	add	r2, pc, #4	@ (adr r2, c003114 <SystemCoreClockUpdate+0x4c>)
 c00310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003112:	bf00      	nop
 c003114:	0c003149 	.word	0x0c003149
 c003118:	0c0031db 	.word	0x0c0031db
 c00311c:	0c0031db 	.word	0x0c0031db
 c003120:	0c0031db 	.word	0x0c0031db
 c003124:	0c003151 	.word	0x0c003151
 c003128:	0c0031db 	.word	0x0c0031db
 c00312c:	0c0031db 	.word	0x0c0031db
 c003130:	0c0031db 	.word	0x0c0031db
 c003134:	0c003159 	.word	0x0c003159
 c003138:	0c0031db 	.word	0x0c0031db
 c00313c:	0c0031db 	.word	0x0c0031db
 c003140:	0c0031db 	.word	0x0c0031db
 c003144:	0c003161 	.word	0x0c003161
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c003148:	4a32      	ldr	r2, [pc, #200]	@ (c003214 <SystemCoreClockUpdate+0x14c>)
 c00314a:	697b      	ldr	r3, [r7, #20]
 c00314c:	6013      	str	r3, [r2, #0]
      break;
 c00314e:	e048      	b.n	c0031e2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c003150:	4b30      	ldr	r3, [pc, #192]	@ (c003214 <SystemCoreClockUpdate+0x14c>)
 c003152:	4a31      	ldr	r2, [pc, #196]	@ (c003218 <SystemCoreClockUpdate+0x150>)
 c003154:	601a      	str	r2, [r3, #0]
      break;
 c003156:	e044      	b.n	c0031e2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c003158:	4b2e      	ldr	r3, [pc, #184]	@ (c003214 <SystemCoreClockUpdate+0x14c>)
 c00315a:	4a2f      	ldr	r2, [pc, #188]	@ (c003218 <SystemCoreClockUpdate+0x150>)
 c00315c:	601a      	str	r2, [r3, #0]
      break;
 c00315e:	e040      	b.n	c0031e2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c003160:	4b2a      	ldr	r3, [pc, #168]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c003162:	68db      	ldr	r3, [r3, #12]
 c003164:	f003 0303 	and.w	r3, r3, #3
 c003168:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c00316a:	4b28      	ldr	r3, [pc, #160]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c00316c:	68db      	ldr	r3, [r3, #12]
 c00316e:	091b      	lsrs	r3, r3, #4
 c003170:	f003 030f 	and.w	r3, r3, #15
 c003174:	3301      	adds	r3, #1
 c003176:	60bb      	str	r3, [r7, #8]
 c003178:	68fb      	ldr	r3, [r7, #12]
 c00317a:	2b02      	cmp	r3, #2
 c00317c:	d003      	beq.n	c003186 <SystemCoreClockUpdate+0xbe>
 c00317e:	68fb      	ldr	r3, [r7, #12]
 c003180:	2b03      	cmp	r3, #3
 c003182:	d006      	beq.n	c003192 <SystemCoreClockUpdate+0xca>
 c003184:	e00b      	b.n	c00319e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c003186:	4a24      	ldr	r2, [pc, #144]	@ (c003218 <SystemCoreClockUpdate+0x150>)
 c003188:	68bb      	ldr	r3, [r7, #8]
 c00318a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00318e:	613b      	str	r3, [r7, #16]
          break;
 c003190:	e00b      	b.n	c0031aa <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c003192:	4a21      	ldr	r2, [pc, #132]	@ (c003218 <SystemCoreClockUpdate+0x150>)
 c003194:	68bb      	ldr	r3, [r7, #8]
 c003196:	fbb2 f3f3 	udiv	r3, r2, r3
 c00319a:	613b      	str	r3, [r7, #16]
          break;
 c00319c:	e005      	b.n	c0031aa <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c00319e:	697a      	ldr	r2, [r7, #20]
 c0031a0:	68bb      	ldr	r3, [r7, #8]
 c0031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0031a6:	613b      	str	r3, [r7, #16]
          break;
 c0031a8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0031aa:	4b18      	ldr	r3, [pc, #96]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c0031ac:	68db      	ldr	r3, [r3, #12]
 c0031ae:	0a1b      	lsrs	r3, r3, #8
 c0031b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 c0031b4:	693b      	ldr	r3, [r7, #16]
 c0031b6:	fb02 f303 	mul.w	r3, r2, r3
 c0031ba:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0031bc:	4b13      	ldr	r3, [pc, #76]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c0031be:	68db      	ldr	r3, [r3, #12]
 c0031c0:	0e5b      	lsrs	r3, r3, #25
 c0031c2:	f003 0303 	and.w	r3, r3, #3
 c0031c6:	3301      	adds	r3, #1
 c0031c8:	005b      	lsls	r3, r3, #1
 c0031ca:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0031cc:	693a      	ldr	r2, [r7, #16]
 c0031ce:	687b      	ldr	r3, [r7, #4]
 c0031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0031d4:	4a0f      	ldr	r2, [pc, #60]	@ (c003214 <SystemCoreClockUpdate+0x14c>)
 c0031d6:	6013      	str	r3, [r2, #0]
      break;
 c0031d8:	e003      	b.n	c0031e2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c0031da:	4a0e      	ldr	r2, [pc, #56]	@ (c003214 <SystemCoreClockUpdate+0x14c>)
 c0031dc:	697b      	ldr	r3, [r7, #20]
 c0031de:	6013      	str	r3, [r2, #0]
      break;
 c0031e0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0031e2:	4b0a      	ldr	r3, [pc, #40]	@ (c00320c <SystemCoreClockUpdate+0x144>)
 c0031e4:	689b      	ldr	r3, [r3, #8]
 c0031e6:	091b      	lsrs	r3, r3, #4
 c0031e8:	f003 030f 	and.w	r3, r3, #15
 c0031ec:	4a0b      	ldr	r2, [pc, #44]	@ (c00321c <SystemCoreClockUpdate+0x154>)
 c0031ee:	5cd3      	ldrb	r3, [r2, r3]
 c0031f0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c0031f2:	4b08      	ldr	r3, [pc, #32]	@ (c003214 <SystemCoreClockUpdate+0x14c>)
 c0031f4:	681a      	ldr	r2, [r3, #0]
 c0031f6:	683b      	ldr	r3, [r7, #0]
 c0031f8:	fa22 f303 	lsr.w	r3, r2, r3
 c0031fc:	4a05      	ldr	r2, [pc, #20]	@ (c003214 <SystemCoreClockUpdate+0x14c>)
 c0031fe:	6013      	str	r3, [r2, #0]
}
 c003200:	bf00      	nop
 c003202:	371c      	adds	r7, #28
 c003204:	46bd      	mov	sp, r7
 c003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00320a:	4770      	bx	lr
 c00320c:	50021000 	.word	0x50021000
 c003210:	0c009e5c 	.word	0x0c009e5c
 c003214:	30000610 	.word	0x30000610
 c003218:	00f42400 	.word	0x00f42400
 c00321c:	0c009e44 	.word	0x0c009e44

0c003220 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c003220:	b580      	push	{r7, lr}
 c003222:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c003224:	f7ff ff50 	bl	c0030c8 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c003228:	4b1c      	ldr	r3, [pc, #112]	@ (c00329c <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c00322a:	681b      	ldr	r3, [r3, #0]
}
 c00322c:	4618      	mov	r0, r3
 c00322e:	46bd      	mov	sp, r7
 c003230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c003234:	4671      	mov	r1, lr
 c003236:	4672      	mov	r2, lr
 c003238:	4673      	mov	r3, lr
 c00323a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c00323e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c003242:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c003246:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c00324a:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c00324e:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c003252:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c003256:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c00325a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c00325e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c003262:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c003266:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c00326a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c00326e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c003272:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c003276:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c00327a:	f38e 8c00 	msr	CPSR_fs, lr
 c00327e:	b410      	push	{r4}
 c003280:	eef1 ca10 	vmrs	ip, fpscr
 c003284:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c003288:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c00328c:	ea0c 0c04 	and.w	ip, ip, r4
 c003290:	eee1 ca10 	vmsr	fpscr, ip
 c003294:	bc10      	pop	{r4}
 c003296:	46f4      	mov	ip, lr
 c003298:	4774      	bxns	lr
 c00329a:	bf00      	nop
 c00329c:	30000610 	.word	0x30000610

0c0032a0 <default_RNG>:
 c0032a0:	b580      	push	{r7, lr}
 c0032a2:	b084      	sub	sp, #16
 c0032a4:	af00      	add	r7, sp, #0
 c0032a6:	6078      	str	r0, [r7, #4]
 c0032a8:	6039      	str	r1, [r7, #0]
 c0032aa:	2300      	movs	r3, #0
 c0032ac:	60fb      	str	r3, [r7, #12]
 c0032ae:	e00a      	b.n	c0032c6 <default_RNG+0x26>
 c0032b0:	f005 fda6 	bl	c008e00 <rand>
 c0032b4:	4601      	mov	r1, r0
 c0032b6:	687a      	ldr	r2, [r7, #4]
 c0032b8:	68fb      	ldr	r3, [r7, #12]
 c0032ba:	4413      	add	r3, r2
 c0032bc:	b2ca      	uxtb	r2, r1
 c0032be:	701a      	strb	r2, [r3, #0]
 c0032c0:	68fb      	ldr	r3, [r7, #12]
 c0032c2:	3301      	adds	r3, #1
 c0032c4:	60fb      	str	r3, [r7, #12]
 c0032c6:	68fa      	ldr	r2, [r7, #12]
 c0032c8:	683b      	ldr	r3, [r7, #0]
 c0032ca:	429a      	cmp	r2, r3
 c0032cc:	d3f0      	bcc.n	c0032b0 <default_RNG+0x10>
 c0032ce:	2301      	movs	r3, #1
 c0032d0:	4618      	mov	r0, r3
 c0032d2:	3710      	adds	r7, #16
 c0032d4:	46bd      	mov	sp, r7
 c0032d6:	bd80      	pop	{r7, pc}
	...

0c0032e0 <uECC_vli_add>:
 c0032e0:	b4f0      	push	{r4, r5, r6, r7}
 c0032e2:	b088      	sub	sp, #32
 c0032e4:	af00      	add	r7, sp, #0
 c0032e6:	60f8      	str	r0, [r7, #12]
 c0032e8:	60b9      	str	r1, [r7, #8]
 c0032ea:	607a      	str	r2, [r7, #4]
 c0032ec:	70fb      	strb	r3, [r7, #3]
 c0032ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0032f2:	f1c3 0308 	rsb	r3, r3, #8
 c0032f6:	00db      	lsls	r3, r3, #3
 c0032f8:	3301      	adds	r3, #1
 c0032fa:	61fb      	str	r3, [r7, #28]
 c0032fc:	68f8      	ldr	r0, [r7, #12]
 c0032fe:	68b9      	ldr	r1, [r7, #8]
 c003300:	687a      	ldr	r2, [r7, #4]
 c003302:	69fb      	ldr	r3, [r7, #28]
 c003304:	2600      	movs	r6, #0
 c003306:	a505      	add	r5, pc, #20	@ (adr r5, c00331c <uECC_vli_add+0x3c>)
 c003308:	f3af 8000 	nop.w
 c00330c:	f3af 8000 	nop.w
 c003310:	195b      	adds	r3, r3, r5
 c003312:	c920      	ldmia	r1!, {r5}
 c003314:	ca10      	ldmia	r2!, {r4}
 c003316:	192d      	adds	r5, r5, r4
 c003318:	c020      	stmia	r0!, {r5}
 c00331a:	4718      	bx	r3
 c00331c:	c920      	ldmia	r1!, {r5}
 c00331e:	ca10      	ldmia	r2!, {r4}
 c003320:	4165      	adcs	r5, r4
 c003322:	c020      	stmia	r0!, {r5}
 c003324:	c920      	ldmia	r1!, {r5}
 c003326:	ca10      	ldmia	r2!, {r4}
 c003328:	4165      	adcs	r5, r4
 c00332a:	c020      	stmia	r0!, {r5}
 c00332c:	c920      	ldmia	r1!, {r5}
 c00332e:	ca10      	ldmia	r2!, {r4}
 c003330:	4165      	adcs	r5, r4
 c003332:	c020      	stmia	r0!, {r5}
 c003334:	c920      	ldmia	r1!, {r5}
 c003336:	ca10      	ldmia	r2!, {r4}
 c003338:	4165      	adcs	r5, r4
 c00333a:	c020      	stmia	r0!, {r5}
 c00333c:	c920      	ldmia	r1!, {r5}
 c00333e:	ca10      	ldmia	r2!, {r4}
 c003340:	4165      	adcs	r5, r4
 c003342:	c020      	stmia	r0!, {r5}
 c003344:	c920      	ldmia	r1!, {r5}
 c003346:	ca10      	ldmia	r2!, {r4}
 c003348:	4165      	adcs	r5, r4
 c00334a:	c020      	stmia	r0!, {r5}
 c00334c:	c920      	ldmia	r1!, {r5}
 c00334e:	ca10      	ldmia	r2!, {r4}
 c003350:	4165      	adcs	r5, r4
 c003352:	c020      	stmia	r0!, {r5}
 c003354:	4176      	adcs	r6, r6
 c003356:	60f8      	str	r0, [r7, #12]
 c003358:	60b9      	str	r1, [r7, #8]
 c00335a:	607a      	str	r2, [r7, #4]
 c00335c:	61fb      	str	r3, [r7, #28]
 c00335e:	61be      	str	r6, [r7, #24]
 c003360:	617d      	str	r5, [r7, #20]
 c003362:	613c      	str	r4, [r7, #16]
 c003364:	69bb      	ldr	r3, [r7, #24]
 c003366:	4618      	mov	r0, r3
 c003368:	3720      	adds	r7, #32
 c00336a:	46bd      	mov	sp, r7
 c00336c:	bcf0      	pop	{r4, r5, r6, r7}
 c00336e:	4770      	bx	lr

0c003370 <uECC_vli_sub>:
 c003370:	b4f0      	push	{r4, r5, r6, r7}
 c003372:	b088      	sub	sp, #32
 c003374:	af00      	add	r7, sp, #0
 c003376:	60f8      	str	r0, [r7, #12]
 c003378:	60b9      	str	r1, [r7, #8]
 c00337a:	607a      	str	r2, [r7, #4]
 c00337c:	70fb      	strb	r3, [r7, #3]
 c00337e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003382:	f1c3 0308 	rsb	r3, r3, #8
 c003386:	00db      	lsls	r3, r3, #3
 c003388:	3301      	adds	r3, #1
 c00338a:	61fb      	str	r3, [r7, #28]
 c00338c:	68f8      	ldr	r0, [r7, #12]
 c00338e:	68b9      	ldr	r1, [r7, #8]
 c003390:	687a      	ldr	r2, [r7, #4]
 c003392:	69fb      	ldr	r3, [r7, #28]
 c003394:	2600      	movs	r6, #0
 c003396:	a505      	add	r5, pc, #20	@ (adr r5, c0033ac <uECC_vli_sub+0x3c>)
 c003398:	f3af 8000 	nop.w
 c00339c:	f3af 8000 	nop.w
 c0033a0:	195b      	adds	r3, r3, r5
 c0033a2:	c920      	ldmia	r1!, {r5}
 c0033a4:	ca10      	ldmia	r2!, {r4}
 c0033a6:	1b2d      	subs	r5, r5, r4
 c0033a8:	c020      	stmia	r0!, {r5}
 c0033aa:	4718      	bx	r3
 c0033ac:	c920      	ldmia	r1!, {r5}
 c0033ae:	ca10      	ldmia	r2!, {r4}
 c0033b0:	41a5      	sbcs	r5, r4
 c0033b2:	c020      	stmia	r0!, {r5}
 c0033b4:	c920      	ldmia	r1!, {r5}
 c0033b6:	ca10      	ldmia	r2!, {r4}
 c0033b8:	41a5      	sbcs	r5, r4
 c0033ba:	c020      	stmia	r0!, {r5}
 c0033bc:	c920      	ldmia	r1!, {r5}
 c0033be:	ca10      	ldmia	r2!, {r4}
 c0033c0:	41a5      	sbcs	r5, r4
 c0033c2:	c020      	stmia	r0!, {r5}
 c0033c4:	c920      	ldmia	r1!, {r5}
 c0033c6:	ca10      	ldmia	r2!, {r4}
 c0033c8:	41a5      	sbcs	r5, r4
 c0033ca:	c020      	stmia	r0!, {r5}
 c0033cc:	c920      	ldmia	r1!, {r5}
 c0033ce:	ca10      	ldmia	r2!, {r4}
 c0033d0:	41a5      	sbcs	r5, r4
 c0033d2:	c020      	stmia	r0!, {r5}
 c0033d4:	c920      	ldmia	r1!, {r5}
 c0033d6:	ca10      	ldmia	r2!, {r4}
 c0033d8:	41a5      	sbcs	r5, r4
 c0033da:	c020      	stmia	r0!, {r5}
 c0033dc:	c920      	ldmia	r1!, {r5}
 c0033de:	ca10      	ldmia	r2!, {r4}
 c0033e0:	41a5      	sbcs	r5, r4
 c0033e2:	c020      	stmia	r0!, {r5}
 c0033e4:	4176      	adcs	r6, r6
 c0033e6:	60f8      	str	r0, [r7, #12]
 c0033e8:	60b9      	str	r1, [r7, #8]
 c0033ea:	607a      	str	r2, [r7, #4]
 c0033ec:	61fb      	str	r3, [r7, #28]
 c0033ee:	61be      	str	r6, [r7, #24]
 c0033f0:	617d      	str	r5, [r7, #20]
 c0033f2:	613c      	str	r4, [r7, #16]
 c0033f4:	69bb      	ldr	r3, [r7, #24]
 c0033f6:	2b00      	cmp	r3, #0
 c0033f8:	bf0c      	ite	eq
 c0033fa:	2301      	moveq	r3, #1
 c0033fc:	2300      	movne	r3, #0
 c0033fe:	b2db      	uxtb	r3, r3
 c003400:	4618      	mov	r0, r3
 c003402:	3720      	adds	r7, #32
 c003404:	46bd      	mov	sp, r7
 c003406:	bcf0      	pop	{r4, r5, r6, r7}
 c003408:	4770      	bx	lr
 c00340a:	bf00      	nop

0c00340c <uECC_vli_mult>:
 c00340c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c003410:	b08d      	sub	sp, #52	@ 0x34
 c003412:	af00      	add	r7, sp, #0
 c003414:	60f8      	str	r0, [r7, #12]
 c003416:	60b9      	str	r1, [r7, #8]
 c003418:	607a      	str	r2, [r7, #4]
 c00341a:	70fb      	strb	r3, [r7, #3]
 c00341c:	2300      	movs	r3, #0
 c00341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c003420:	2300      	movs	r3, #0
 c003422:	62bb      	str	r3, [r7, #40]	@ 0x28
 c003424:	2300      	movs	r3, #0
 c003426:	627b      	str	r3, [r7, #36]	@ 0x24
 c003428:	2300      	movs	r3, #0
 c00342a:	623b      	str	r3, [r7, #32]
 c00342c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003430:	3b01      	subs	r3, #1
 c003432:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 c003436:	68fc      	ldr	r4, [r7, #12]
 c003438:	68bd      	ldr	r5, [r7, #8]
 c00343a:	687e      	ldr	r6, [r7, #4]
 c00343c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 c00343e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 c003440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 c003442:	6a3b      	ldr	r3, [r7, #32]
 c003444:	f05f 0e00 	movs.w	lr, #0
 c003448:	e003      	b.n	c003452 <uECC_vli_mult+0x46>
 c00344a:	ea5f 0e03 	movs.w	lr, r3
 c00344e:	ebbe 0e0c 	subs.w	lr, lr, ip
 c003452:	ebb3 080e 	subs.w	r8, r3, lr
 c003456:	f856 9008 	ldr.w	r9, [r6, r8]
 c00345a:	f855 800e 	ldr.w	r8, [r5, lr]
 c00345e:	fba8 8909 	umull	r8, r9, r8, r9
 c003462:	eb10 0008 	adds.w	r0, r0, r8
 c003466:	eb51 0109 	adcs.w	r1, r1, r9
 c00346a:	f152 0200 	adcs.w	r2, r2, #0
 c00346e:	f11e 0e04 	adds.w	lr, lr, #4
 c003472:	45e6      	cmp	lr, ip
 c003474:	dc01      	bgt.n	c00347a <uECC_vli_mult+0x6e>
 c003476:	459e      	cmp	lr, r3
 c003478:	ddeb      	ble.n	c003452 <uECC_vli_mult+0x46>
 c00347a:	50e0      	str	r0, [r4, r3]
 c00347c:	4608      	mov	r0, r1
 c00347e:	4611      	mov	r1, r2
 c003480:	2200      	movs	r2, #0
 c003482:	3304      	adds	r3, #4
 c003484:	4563      	cmp	r3, ip
 c003486:	dddd      	ble.n	c003444 <uECC_vli_mult+0x38>
 c003488:	ebb3 0f4c 	cmp.w	r3, ip, lsl #1
 c00348c:	dddd      	ble.n	c00344a <uECC_vli_mult+0x3e>
 c00348e:	50e0      	str	r0, [r4, r3]
 c003490:	464c      	mov	r4, r9
 c003492:	4645      	mov	r5, r8
 c003494:	4676      	mov	r6, lr
 c003496:	62f8      	str	r0, [r7, #44]	@ 0x2c
 c003498:	62b9      	str	r1, [r7, #40]	@ 0x28
 c00349a:	627a      	str	r2, [r7, #36]	@ 0x24
 c00349c:	623b      	str	r3, [r7, #32]
 c00349e:	61fe      	str	r6, [r7, #28]
 c0034a0:	61bd      	str	r5, [r7, #24]
 c0034a2:	617c      	str	r4, [r7, #20]
 c0034a4:	bf00      	nop
 c0034a6:	3734      	adds	r7, #52	@ 0x34
 c0034a8:	46bd      	mov	sp, r7
 c0034aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0c0034ae <uECC_vli_clear>:
 c0034ae:	b480      	push	{r7}
 c0034b0:	b085      	sub	sp, #20
 c0034b2:	af00      	add	r7, sp, #0
 c0034b4:	6078      	str	r0, [r7, #4]
 c0034b6:	460b      	mov	r3, r1
 c0034b8:	70fb      	strb	r3, [r7, #3]
 c0034ba:	2300      	movs	r3, #0
 c0034bc:	73fb      	strb	r3, [r7, #15]
 c0034be:	e00a      	b.n	c0034d6 <uECC_vli_clear+0x28>
 c0034c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0034c4:	009b      	lsls	r3, r3, #2
 c0034c6:	687a      	ldr	r2, [r7, #4]
 c0034c8:	4413      	add	r3, r2
 c0034ca:	2200      	movs	r2, #0
 c0034cc:	601a      	str	r2, [r3, #0]
 c0034ce:	7bfb      	ldrb	r3, [r7, #15]
 c0034d0:	3301      	adds	r3, #1
 c0034d2:	b2db      	uxtb	r3, r3
 c0034d4:	73fb      	strb	r3, [r7, #15]
 c0034d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 c0034da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0034de:	429a      	cmp	r2, r3
 c0034e0:	dbee      	blt.n	c0034c0 <uECC_vli_clear+0x12>
 c0034e2:	bf00      	nop
 c0034e4:	bf00      	nop
 c0034e6:	3714      	adds	r7, #20
 c0034e8:	46bd      	mov	sp, r7
 c0034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0034ee:	4770      	bx	lr

0c0034f0 <uECC_vli_isZero>:
 c0034f0:	b480      	push	{r7}
 c0034f2:	b085      	sub	sp, #20
 c0034f4:	af00      	add	r7, sp, #0
 c0034f6:	6078      	str	r0, [r7, #4]
 c0034f8:	460b      	mov	r3, r1
 c0034fa:	70fb      	strb	r3, [r7, #3]
 c0034fc:	2300      	movs	r3, #0
 c0034fe:	60fb      	str	r3, [r7, #12]
 c003500:	2300      	movs	r3, #0
 c003502:	72fb      	strb	r3, [r7, #11]
 c003504:	e00c      	b.n	c003520 <uECC_vli_isZero+0x30>
 c003506:	f997 300b 	ldrsb.w	r3, [r7, #11]
 c00350a:	009b      	lsls	r3, r3, #2
 c00350c:	687a      	ldr	r2, [r7, #4]
 c00350e:	4413      	add	r3, r2
 c003510:	681b      	ldr	r3, [r3, #0]
 c003512:	68fa      	ldr	r2, [r7, #12]
 c003514:	4313      	orrs	r3, r2
 c003516:	60fb      	str	r3, [r7, #12]
 c003518:	7afb      	ldrb	r3, [r7, #11]
 c00351a:	3301      	adds	r3, #1
 c00351c:	b2db      	uxtb	r3, r3
 c00351e:	72fb      	strb	r3, [r7, #11]
 c003520:	f997 200b 	ldrsb.w	r2, [r7, #11]
 c003524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003528:	429a      	cmp	r2, r3
 c00352a:	dbec      	blt.n	c003506 <uECC_vli_isZero+0x16>
 c00352c:	68fb      	ldr	r3, [r7, #12]
 c00352e:	2b00      	cmp	r3, #0
 c003530:	bf0c      	ite	eq
 c003532:	2301      	moveq	r3, #1
 c003534:	2300      	movne	r3, #0
 c003536:	b2db      	uxtb	r3, r3
 c003538:	4618      	mov	r0, r3
 c00353a:	3714      	adds	r7, #20
 c00353c:	46bd      	mov	sp, r7
 c00353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003542:	4770      	bx	lr

0c003544 <uECC_vli_testBit>:
 c003544:	b480      	push	{r7}
 c003546:	b083      	sub	sp, #12
 c003548:	af00      	add	r7, sp, #0
 c00354a:	6078      	str	r0, [r7, #4]
 c00354c:	460b      	mov	r3, r1
 c00354e:	807b      	strh	r3, [r7, #2]
 c003550:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 c003554:	115b      	asrs	r3, r3, #5
 c003556:	b21b      	sxth	r3, r3
 c003558:	009b      	lsls	r3, r3, #2
 c00355a:	687a      	ldr	r2, [r7, #4]
 c00355c:	4413      	add	r3, r2
 c00355e:	681a      	ldr	r2, [r3, #0]
 c003560:	887b      	ldrh	r3, [r7, #2]
 c003562:	f003 031f 	and.w	r3, r3, #31
 c003566:	2101      	movs	r1, #1
 c003568:	fa01 f303 	lsl.w	r3, r1, r3
 c00356c:	4013      	ands	r3, r2
 c00356e:	4618      	mov	r0, r3
 c003570:	370c      	adds	r7, #12
 c003572:	46bd      	mov	sp, r7
 c003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003578:	4770      	bx	lr

0c00357a <vli_numDigits>:
 c00357a:	b480      	push	{r7}
 c00357c:	b085      	sub	sp, #20
 c00357e:	af00      	add	r7, sp, #0
 c003580:	6078      	str	r0, [r7, #4]
 c003582:	460b      	mov	r3, r1
 c003584:	70fb      	strb	r3, [r7, #3]
 c003586:	78fb      	ldrb	r3, [r7, #3]
 c003588:	3b01      	subs	r3, #1
 c00358a:	b2db      	uxtb	r3, r3
 c00358c:	73fb      	strb	r3, [r7, #15]
 c00358e:	e003      	b.n	c003598 <vli_numDigits+0x1e>
 c003590:	7bfb      	ldrb	r3, [r7, #15]
 c003592:	3b01      	subs	r3, #1
 c003594:	b2db      	uxtb	r3, r3
 c003596:	73fb      	strb	r3, [r7, #15]
 c003598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00359c:	2b00      	cmp	r3, #0
 c00359e:	db07      	blt.n	c0035b0 <vli_numDigits+0x36>
 c0035a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0035a4:	009b      	lsls	r3, r3, #2
 c0035a6:	687a      	ldr	r2, [r7, #4]
 c0035a8:	4413      	add	r3, r2
 c0035aa:	681b      	ldr	r3, [r3, #0]
 c0035ac:	2b00      	cmp	r3, #0
 c0035ae:	d0ef      	beq.n	c003590 <vli_numDigits+0x16>
 c0035b0:	7bfb      	ldrb	r3, [r7, #15]
 c0035b2:	3301      	adds	r3, #1
 c0035b4:	b2db      	uxtb	r3, r3
 c0035b6:	b25b      	sxtb	r3, r3
 c0035b8:	4618      	mov	r0, r3
 c0035ba:	3714      	adds	r7, #20
 c0035bc:	46bd      	mov	sp, r7
 c0035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0035c2:	4770      	bx	lr

0c0035c4 <uECC_vli_numBits>:
 c0035c4:	b580      	push	{r7, lr}
 c0035c6:	b086      	sub	sp, #24
 c0035c8:	af00      	add	r7, sp, #0
 c0035ca:	6078      	str	r0, [r7, #4]
 c0035cc:	460b      	mov	r3, r1
 c0035ce:	70fb      	strb	r3, [r7, #3]
 c0035d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0035d4:	4619      	mov	r1, r3
 c0035d6:	6878      	ldr	r0, [r7, #4]
 c0035d8:	f7ff ffcf 	bl	c00357a <vli_numDigits>
 c0035dc:	4603      	mov	r3, r0
 c0035de:	73fb      	strb	r3, [r7, #15]
 c0035e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0035e4:	2b00      	cmp	r3, #0
 c0035e6:	d101      	bne.n	c0035ec <uECC_vli_numBits+0x28>
 c0035e8:	2300      	movs	r3, #0
 c0035ea:	e021      	b.n	c003630 <uECC_vli_numBits+0x6c>
 c0035ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0035f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c0035f4:	3b01      	subs	r3, #1
 c0035f6:	009b      	lsls	r3, r3, #2
 c0035f8:	687a      	ldr	r2, [r7, #4]
 c0035fa:	4413      	add	r3, r2
 c0035fc:	681b      	ldr	r3, [r3, #0]
 c0035fe:	613b      	str	r3, [r7, #16]
 c003600:	2300      	movs	r3, #0
 c003602:	617b      	str	r3, [r7, #20]
 c003604:	e005      	b.n	c003612 <uECC_vli_numBits+0x4e>
 c003606:	693b      	ldr	r3, [r7, #16]
 c003608:	085b      	lsrs	r3, r3, #1
 c00360a:	613b      	str	r3, [r7, #16]
 c00360c:	697b      	ldr	r3, [r7, #20]
 c00360e:	3301      	adds	r3, #1
 c003610:	617b      	str	r3, [r7, #20]
 c003612:	693b      	ldr	r3, [r7, #16]
 c003614:	2b00      	cmp	r3, #0
 c003616:	d1f6      	bne.n	c003606 <uECC_vli_numBits+0x42>
 c003618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00361c:	b29b      	uxth	r3, r3
 c00361e:	3b01      	subs	r3, #1
 c003620:	b29b      	uxth	r3, r3
 c003622:	015b      	lsls	r3, r3, #5
 c003624:	b29a      	uxth	r2, r3
 c003626:	697b      	ldr	r3, [r7, #20]
 c003628:	b29b      	uxth	r3, r3
 c00362a:	4413      	add	r3, r2
 c00362c:	b29b      	uxth	r3, r3
 c00362e:	b21b      	sxth	r3, r3
 c003630:	4618      	mov	r0, r3
 c003632:	3718      	adds	r7, #24
 c003634:	46bd      	mov	sp, r7
 c003636:	bd80      	pop	{r7, pc}

0c003638 <uECC_vli_set>:
 c003638:	b480      	push	{r7}
 c00363a:	b087      	sub	sp, #28
 c00363c:	af00      	add	r7, sp, #0
 c00363e:	60f8      	str	r0, [r7, #12]
 c003640:	60b9      	str	r1, [r7, #8]
 c003642:	4613      	mov	r3, r2
 c003644:	71fb      	strb	r3, [r7, #7]
 c003646:	2300      	movs	r3, #0
 c003648:	75fb      	strb	r3, [r7, #23]
 c00364a:	e00f      	b.n	c00366c <uECC_vli_set+0x34>
 c00364c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003650:	009b      	lsls	r3, r3, #2
 c003652:	68ba      	ldr	r2, [r7, #8]
 c003654:	441a      	add	r2, r3
 c003656:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c00365a:	009b      	lsls	r3, r3, #2
 c00365c:	68f9      	ldr	r1, [r7, #12]
 c00365e:	440b      	add	r3, r1
 c003660:	6812      	ldr	r2, [r2, #0]
 c003662:	601a      	str	r2, [r3, #0]
 c003664:	7dfb      	ldrb	r3, [r7, #23]
 c003666:	3301      	adds	r3, #1
 c003668:	b2db      	uxtb	r3, r3
 c00366a:	75fb      	strb	r3, [r7, #23]
 c00366c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 c003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003674:	429a      	cmp	r2, r3
 c003676:	dbe9      	blt.n	c00364c <uECC_vli_set+0x14>
 c003678:	bf00      	nop
 c00367a:	bf00      	nop
 c00367c:	371c      	adds	r7, #28
 c00367e:	46bd      	mov	sp, r7
 c003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003684:	4770      	bx	lr

0c003686 <uECC_vli_cmp_unsafe>:
 c003686:	b480      	push	{r7}
 c003688:	b087      	sub	sp, #28
 c00368a:	af00      	add	r7, sp, #0
 c00368c:	60f8      	str	r0, [r7, #12]
 c00368e:	60b9      	str	r1, [r7, #8]
 c003690:	4613      	mov	r3, r2
 c003692:	71fb      	strb	r3, [r7, #7]
 c003694:	79fb      	ldrb	r3, [r7, #7]
 c003696:	3b01      	subs	r3, #1
 c003698:	b2db      	uxtb	r3, r3
 c00369a:	75fb      	strb	r3, [r7, #23]
 c00369c:	e024      	b.n	c0036e8 <uECC_vli_cmp_unsafe+0x62>
 c00369e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0036a2:	009b      	lsls	r3, r3, #2
 c0036a4:	68fa      	ldr	r2, [r7, #12]
 c0036a6:	4413      	add	r3, r2
 c0036a8:	681a      	ldr	r2, [r3, #0]
 c0036aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0036ae:	009b      	lsls	r3, r3, #2
 c0036b0:	68b9      	ldr	r1, [r7, #8]
 c0036b2:	440b      	add	r3, r1
 c0036b4:	681b      	ldr	r3, [r3, #0]
 c0036b6:	429a      	cmp	r2, r3
 c0036b8:	d901      	bls.n	c0036be <uECC_vli_cmp_unsafe+0x38>
 c0036ba:	2301      	movs	r3, #1
 c0036bc:	e019      	b.n	c0036f2 <uECC_vli_cmp_unsafe+0x6c>
 c0036be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0036c2:	009b      	lsls	r3, r3, #2
 c0036c4:	68fa      	ldr	r2, [r7, #12]
 c0036c6:	4413      	add	r3, r2
 c0036c8:	681a      	ldr	r2, [r3, #0]
 c0036ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0036ce:	009b      	lsls	r3, r3, #2
 c0036d0:	68b9      	ldr	r1, [r7, #8]
 c0036d2:	440b      	add	r3, r1
 c0036d4:	681b      	ldr	r3, [r3, #0]
 c0036d6:	429a      	cmp	r2, r3
 c0036d8:	d202      	bcs.n	c0036e0 <uECC_vli_cmp_unsafe+0x5a>
 c0036da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c0036de:	e008      	b.n	c0036f2 <uECC_vli_cmp_unsafe+0x6c>
 c0036e0:	7dfb      	ldrb	r3, [r7, #23]
 c0036e2:	3b01      	subs	r3, #1
 c0036e4:	b2db      	uxtb	r3, r3
 c0036e6:	75fb      	strb	r3, [r7, #23]
 c0036e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0036ec:	2b00      	cmp	r3, #0
 c0036ee:	dad6      	bge.n	c00369e <uECC_vli_cmp_unsafe+0x18>
 c0036f0:	2300      	movs	r3, #0
 c0036f2:	4618      	mov	r0, r3
 c0036f4:	371c      	adds	r7, #28
 c0036f6:	46bd      	mov	sp, r7
 c0036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0036fc:	4770      	bx	lr

0c0036fe <uECC_vli_equal>:
 c0036fe:	b480      	push	{r7}
 c003700:	b087      	sub	sp, #28
 c003702:	af00      	add	r7, sp, #0
 c003704:	60f8      	str	r0, [r7, #12]
 c003706:	60b9      	str	r1, [r7, #8]
 c003708:	4613      	mov	r3, r2
 c00370a:	71fb      	strb	r3, [r7, #7]
 c00370c:	2300      	movs	r3, #0
 c00370e:	617b      	str	r3, [r7, #20]
 c003710:	79fb      	ldrb	r3, [r7, #7]
 c003712:	3b01      	subs	r3, #1
 c003714:	b2db      	uxtb	r3, r3
 c003716:	74fb      	strb	r3, [r7, #19]
 c003718:	e013      	b.n	c003742 <uECC_vli_equal+0x44>
 c00371a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c00371e:	009b      	lsls	r3, r3, #2
 c003720:	68fa      	ldr	r2, [r7, #12]
 c003722:	4413      	add	r3, r2
 c003724:	681a      	ldr	r2, [r3, #0]
 c003726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c00372a:	009b      	lsls	r3, r3, #2
 c00372c:	68b9      	ldr	r1, [r7, #8]
 c00372e:	440b      	add	r3, r1
 c003730:	681b      	ldr	r3, [r3, #0]
 c003732:	4053      	eors	r3, r2
 c003734:	697a      	ldr	r2, [r7, #20]
 c003736:	4313      	orrs	r3, r2
 c003738:	617b      	str	r3, [r7, #20]
 c00373a:	7cfb      	ldrb	r3, [r7, #19]
 c00373c:	3b01      	subs	r3, #1
 c00373e:	b2db      	uxtb	r3, r3
 c003740:	74fb      	strb	r3, [r7, #19]
 c003742:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c003746:	2b00      	cmp	r3, #0
 c003748:	dae7      	bge.n	c00371a <uECC_vli_equal+0x1c>
 c00374a:	697b      	ldr	r3, [r7, #20]
 c00374c:	2b00      	cmp	r3, #0
 c00374e:	bf0c      	ite	eq
 c003750:	2301      	moveq	r3, #1
 c003752:	2300      	movne	r3, #0
 c003754:	b2db      	uxtb	r3, r3
 c003756:	4618      	mov	r0, r3
 c003758:	371c      	adds	r7, #28
 c00375a:	46bd      	mov	sp, r7
 c00375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003760:	4770      	bx	lr

0c003762 <uECC_vli_cmp>:
 c003762:	b580      	push	{r7, lr}
 c003764:	b08e      	sub	sp, #56	@ 0x38
 c003766:	af00      	add	r7, sp, #0
 c003768:	60f8      	str	r0, [r7, #12]
 c00376a:	60b9      	str	r1, [r7, #8]
 c00376c:	4613      	mov	r3, r2
 c00376e:	71fb      	strb	r3, [r7, #7]
 c003770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003774:	f107 0010 	add.w	r0, r7, #16
 c003778:	68ba      	ldr	r2, [r7, #8]
 c00377a:	68f9      	ldr	r1, [r7, #12]
 c00377c:	f7ff fdf8 	bl	c003370 <uECC_vli_sub>
 c003780:	4603      	mov	r3, r0
 c003782:	2b00      	cmp	r3, #0
 c003784:	bf14      	ite	ne
 c003786:	2301      	movne	r3, #1
 c003788:	2300      	moveq	r3, #0
 c00378a:	b2db      	uxtb	r3, r3
 c00378c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00378e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 c003792:	f107 0310 	add.w	r3, r7, #16
 c003796:	4611      	mov	r1, r2
 c003798:	4618      	mov	r0, r3
 c00379a:	f7ff fea9 	bl	c0034f0 <uECC_vli_isZero>
 c00379e:	6338      	str	r0, [r7, #48]	@ 0x30
 c0037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0037a2:	2b00      	cmp	r3, #0
 c0037a4:	bf0c      	ite	eq
 c0037a6:	2301      	moveq	r3, #1
 c0037a8:	2300      	movne	r3, #0
 c0037aa:	b2db      	uxtb	r3, r3
 c0037ac:	461a      	mov	r2, r3
 c0037ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c0037b0:	b2db      	uxtb	r3, r3
 c0037b2:	005b      	lsls	r3, r3, #1
 c0037b4:	b2db      	uxtb	r3, r3
 c0037b6:	1ad3      	subs	r3, r2, r3
 c0037b8:	b2db      	uxtb	r3, r3
 c0037ba:	b25b      	sxtb	r3, r3
 c0037bc:	4618      	mov	r0, r3
 c0037be:	3738      	adds	r7, #56	@ 0x38
 c0037c0:	46bd      	mov	sp, r7
 c0037c2:	bd80      	pop	{r7, pc}

0c0037c4 <uECC_vli_rshift1>:
 c0037c4:	b480      	push	{r7}
 c0037c6:	b087      	sub	sp, #28
 c0037c8:	af00      	add	r7, sp, #0
 c0037ca:	6078      	str	r0, [r7, #4]
 c0037cc:	460b      	mov	r3, r1
 c0037ce:	70fb      	strb	r3, [r7, #3]
 c0037d0:	687b      	ldr	r3, [r7, #4]
 c0037d2:	613b      	str	r3, [r7, #16]
 c0037d4:	2300      	movs	r3, #0
 c0037d6:	617b      	str	r3, [r7, #20]
 c0037d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0037dc:	009b      	lsls	r3, r3, #2
 c0037de:	687a      	ldr	r2, [r7, #4]
 c0037e0:	4413      	add	r3, r2
 c0037e2:	607b      	str	r3, [r7, #4]
 c0037e4:	e00b      	b.n	c0037fe <uECC_vli_rshift1+0x3a>
 c0037e6:	687b      	ldr	r3, [r7, #4]
 c0037e8:	681b      	ldr	r3, [r3, #0]
 c0037ea:	60fb      	str	r3, [r7, #12]
 c0037ec:	68fb      	ldr	r3, [r7, #12]
 c0037ee:	085a      	lsrs	r2, r3, #1
 c0037f0:	697b      	ldr	r3, [r7, #20]
 c0037f2:	431a      	orrs	r2, r3
 c0037f4:	687b      	ldr	r3, [r7, #4]
 c0037f6:	601a      	str	r2, [r3, #0]
 c0037f8:	68fb      	ldr	r3, [r7, #12]
 c0037fa:	07db      	lsls	r3, r3, #31
 c0037fc:	617b      	str	r3, [r7, #20]
 c0037fe:	687b      	ldr	r3, [r7, #4]
 c003800:	1f1a      	subs	r2, r3, #4
 c003802:	607a      	str	r2, [r7, #4]
 c003804:	693a      	ldr	r2, [r7, #16]
 c003806:	429a      	cmp	r2, r3
 c003808:	d3ed      	bcc.n	c0037e6 <uECC_vli_rshift1+0x22>
 c00380a:	bf00      	nop
 c00380c:	bf00      	nop
 c00380e:	371c      	adds	r7, #28
 c003810:	46bd      	mov	sp, r7
 c003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003816:	4770      	bx	lr

0c003818 <uECC_vli_modAdd>:
 c003818:	b580      	push	{r7, lr}
 c00381a:	b086      	sub	sp, #24
 c00381c:	af00      	add	r7, sp, #0
 c00381e:	60f8      	str	r0, [r7, #12]
 c003820:	60b9      	str	r1, [r7, #8]
 c003822:	607a      	str	r2, [r7, #4]
 c003824:	603b      	str	r3, [r7, #0]
 c003826:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c00382a:	687a      	ldr	r2, [r7, #4]
 c00382c:	68b9      	ldr	r1, [r7, #8]
 c00382e:	68f8      	ldr	r0, [r7, #12]
 c003830:	f7ff fd56 	bl	c0032e0 <uECC_vli_add>
 c003834:	6178      	str	r0, [r7, #20]
 c003836:	697b      	ldr	r3, [r7, #20]
 c003838:	2b00      	cmp	r3, #0
 c00383a:	d109      	bne.n	c003850 <uECC_vli_modAdd+0x38>
 c00383c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003840:	461a      	mov	r2, r3
 c003842:	68f9      	ldr	r1, [r7, #12]
 c003844:	6838      	ldr	r0, [r7, #0]
 c003846:	f7ff ff1e 	bl	c003686 <uECC_vli_cmp_unsafe>
 c00384a:	4603      	mov	r3, r0
 c00384c:	2b01      	cmp	r3, #1
 c00384e:	d006      	beq.n	c00385e <uECC_vli_modAdd+0x46>
 c003850:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003854:	683a      	ldr	r2, [r7, #0]
 c003856:	68f9      	ldr	r1, [r7, #12]
 c003858:	68f8      	ldr	r0, [r7, #12]
 c00385a:	f7ff fd89 	bl	c003370 <uECC_vli_sub>
 c00385e:	bf00      	nop
 c003860:	3718      	adds	r7, #24
 c003862:	46bd      	mov	sp, r7
 c003864:	bd80      	pop	{r7, pc}

0c003866 <uECC_vli_modSub>:
 c003866:	b580      	push	{r7, lr}
 c003868:	b086      	sub	sp, #24
 c00386a:	af00      	add	r7, sp, #0
 c00386c:	60f8      	str	r0, [r7, #12]
 c00386e:	60b9      	str	r1, [r7, #8]
 c003870:	607a      	str	r2, [r7, #4]
 c003872:	603b      	str	r3, [r7, #0]
 c003874:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003878:	687a      	ldr	r2, [r7, #4]
 c00387a:	68b9      	ldr	r1, [r7, #8]
 c00387c:	68f8      	ldr	r0, [r7, #12]
 c00387e:	f7ff fd77 	bl	c003370 <uECC_vli_sub>
 c003882:	6178      	str	r0, [r7, #20]
 c003884:	697b      	ldr	r3, [r7, #20]
 c003886:	2b00      	cmp	r3, #0
 c003888:	d006      	beq.n	c003898 <uECC_vli_modSub+0x32>
 c00388a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c00388e:	683a      	ldr	r2, [r7, #0]
 c003890:	68f9      	ldr	r1, [r7, #12]
 c003892:	68f8      	ldr	r0, [r7, #12]
 c003894:	f7ff fd24 	bl	c0032e0 <uECC_vli_add>
 c003898:	bf00      	nop
 c00389a:	3718      	adds	r7, #24
 c00389c:	46bd      	mov	sp, r7
 c00389e:	bd80      	pop	{r7, pc}

0c0038a0 <uECC_vli_mmod>:
 c0038a0:	b590      	push	{r4, r7, lr}
 c0038a2:	b0ad      	sub	sp, #180	@ 0xb4
 c0038a4:	af00      	add	r7, sp, #0
 c0038a6:	60f8      	str	r0, [r7, #12]
 c0038a8:	60b9      	str	r1, [r7, #8]
 c0038aa:	607a      	str	r2, [r7, #4]
 c0038ac:	70fb      	strb	r3, [r7, #3]
 c0038ae:	f107 0318 	add.w	r3, r7, #24
 c0038b2:	613b      	str	r3, [r7, #16]
 c0038b4:	68bb      	ldr	r3, [r7, #8]
 c0038b6:	617b      	str	r3, [r7, #20]
 c0038b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0038bc:	b29b      	uxth	r3, r3
 c0038be:	019b      	lsls	r3, r3, #6
 c0038c0:	b29c      	uxth	r4, r3
 c0038c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0038c6:	4619      	mov	r1, r3
 c0038c8:	6878      	ldr	r0, [r7, #4]
 c0038ca:	f7ff fe7b 	bl	c0035c4 <uECC_vli_numBits>
 c0038ce:	4603      	mov	r3, r0
 c0038d0:	b29b      	uxth	r3, r3
 c0038d2:	1ae3      	subs	r3, r4, r3
 c0038d4:	b29b      	uxth	r3, r3
 c0038d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 c0038da:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 c0038de:	2b00      	cmp	r3, #0
 c0038e0:	da00      	bge.n	c0038e4 <uECC_vli_mmod+0x44>
 c0038e2:	331f      	adds	r3, #31
 c0038e4:	115b      	asrs	r3, r3, #5
 c0038e6:	b21b      	sxth	r3, r3
 c0038e8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 c0038ec:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 c0038f0:	425a      	negs	r2, r3
 c0038f2:	f003 031f 	and.w	r3, r3, #31
 c0038f6:	f002 021f 	and.w	r2, r2, #31
 c0038fa:	bf58      	it	pl
 c0038fc:	4253      	negpl	r3, r2
 c0038fe:	b21b      	sxth	r3, r3
 c003900:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 c003904:	2300      	movs	r3, #0
 c003906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 c00390a:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 c00390e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 c003912:	4611      	mov	r1, r2
 c003914:	4618      	mov	r0, r3
 c003916:	f7ff fdca 	bl	c0034ae <uECC_vli_clear>
 c00391a:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 c00391e:	2b00      	cmp	r3, #0
 c003920:	dd34      	ble.n	c00398c <uECC_vli_mmod+0xec>
 c003922:	2300      	movs	r3, #0
 c003924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c003928:	e029      	b.n	c00397e <uECC_vli_mmod+0xde>
 c00392a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c00392e:	009b      	lsls	r3, r3, #2
 c003930:	687a      	ldr	r2, [r7, #4]
 c003932:	4413      	add	r3, r2
 c003934:	681a      	ldr	r2, [r3, #0]
 c003936:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 c00393a:	fa02 f103 	lsl.w	r1, r2, r3
 c00393e:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 c003942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c003946:	4413      	add	r3, r2
 c003948:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 c00394c:	430a      	orrs	r2, r1
 c00394e:	009b      	lsls	r3, r3, #2
 c003950:	33b0      	adds	r3, #176	@ 0xb0
 c003952:	443b      	add	r3, r7
 c003954:	f843 2c58 	str.w	r2, [r3, #-88]
 c003958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c00395c:	009b      	lsls	r3, r3, #2
 c00395e:	687a      	ldr	r2, [r7, #4]
 c003960:	4413      	add	r3, r2
 c003962:	681a      	ldr	r2, [r3, #0]
 c003964:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 c003968:	f1c3 0320 	rsb	r3, r3, #32
 c00396c:	fa22 f303 	lsr.w	r3, r2, r3
 c003970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 c003974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c003978:	3301      	adds	r3, #1
 c00397a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c00397e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003982:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 c003986:	429a      	cmp	r2, r3
 c003988:	d3cf      	bcc.n	c00392a <uECC_vli_mmod+0x8a>
 c00398a:	e00b      	b.n	c0039a4 <uECC_vli_mmod+0x104>
 c00398c:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 c003990:	009b      	lsls	r3, r3, #2
 c003992:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 c003996:	4413      	add	r3, r2
 c003998:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c00399c:	6879      	ldr	r1, [r7, #4]
 c00399e:	4618      	mov	r0, r3
 c0039a0:	f7ff fe4a 	bl	c003638 <uECC_vli_set>
 c0039a4:	2301      	movs	r3, #1
 c0039a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c0039aa:	e09f      	b.n	c003aec <uECC_vli_mmod+0x24c>
 c0039ac:	2300      	movs	r3, #0
 c0039ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 c0039b2:	2300      	movs	r3, #0
 c0039b4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 c0039b8:	e053      	b.n	c003a62 <uECC_vli_mmod+0x1c2>
 c0039ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c0039be:	009b      	lsls	r3, r3, #2
 c0039c0:	33b0      	adds	r3, #176	@ 0xb0
 c0039c2:	443b      	add	r3, r7
 c0039c4:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c0039c8:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 c0039cc:	009b      	lsls	r3, r3, #2
 c0039ce:	4413      	add	r3, r2
 c0039d0:	681a      	ldr	r2, [r3, #0]
 c0039d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 c0039d6:	009b      	lsls	r3, r3, #2
 c0039d8:	33b0      	adds	r3, #176	@ 0xb0
 c0039da:	443b      	add	r3, r7
 c0039dc:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c0039e0:	1ad2      	subs	r2, r2, r3
 c0039e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 c0039e6:	1ad3      	subs	r3, r2, r3
 c0039e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 c0039ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c0039f0:	009b      	lsls	r3, r3, #2
 c0039f2:	33b0      	adds	r3, #176	@ 0xb0
 c0039f4:	443b      	add	r3, r7
 c0039f6:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c0039fa:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 c0039fe:	009b      	lsls	r3, r3, #2
 c003a00:	4413      	add	r3, r2
 c003a02:	681b      	ldr	r3, [r3, #0]
 c003a04:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 c003a08:	429a      	cmp	r2, r3
 c003a0a:	d014      	beq.n	c003a36 <uECC_vli_mmod+0x196>
 c003a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c003a10:	009b      	lsls	r3, r3, #2
 c003a12:	33b0      	adds	r3, #176	@ 0xb0
 c003a14:	443b      	add	r3, r7
 c003a16:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c003a1a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 c003a1e:	009b      	lsls	r3, r3, #2
 c003a20:	4413      	add	r3, r2
 c003a22:	681b      	ldr	r3, [r3, #0]
 c003a24:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 c003a28:	429a      	cmp	r2, r3
 c003a2a:	bf8c      	ite	hi
 c003a2c:	2301      	movhi	r3, #1
 c003a2e:	2300      	movls	r3, #0
 c003a30:	b2db      	uxtb	r3, r3
 c003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 c003a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c003a3a:	f1c3 0301 	rsb	r3, r3, #1
 c003a3e:	009b      	lsls	r3, r3, #2
 c003a40:	33b0      	adds	r3, #176	@ 0xb0
 c003a42:	443b      	add	r3, r7
 c003a44:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c003a48:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 c003a4c:	009b      	lsls	r3, r3, #2
 c003a4e:	4413      	add	r3, r2
 c003a50:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 c003a54:	601a      	str	r2, [r3, #0]
 c003a56:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 c003a5a:	3301      	adds	r3, #1
 c003a5c:	b2db      	uxtb	r3, r3
 c003a5e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 c003a62:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 c003a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003a6a:	005b      	lsls	r3, r3, #1
 c003a6c:	429a      	cmp	r2, r3
 c003a6e:	dba4      	blt.n	c0039ba <uECC_vli_mmod+0x11a>
 c003a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 c003a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 c003a78:	429a      	cmp	r2, r3
 c003a7a:	bf0c      	ite	eq
 c003a7c:	2301      	moveq	r3, #1
 c003a7e:	2300      	movne	r3, #0
 c003a80:	b2db      	uxtb	r3, r3
 c003a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c003a86:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003a8a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 c003a8e:	4611      	mov	r1, r2
 c003a90:	4618      	mov	r0, r3
 c003a92:	f7ff fe97 	bl	c0037c4 <uECC_vli_rshift1>
 c003a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003a9a:	3b01      	subs	r3, #1
 c003a9c:	009b      	lsls	r3, r3, #2
 c003a9e:	33b0      	adds	r3, #176	@ 0xb0
 c003aa0:	443b      	add	r3, r7
 c003aa2:	f853 1c58 	ldr.w	r1, [r3, #-88]
 c003aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003aaa:	009b      	lsls	r3, r3, #2
 c003aac:	33b0      	adds	r3, #176	@ 0xb0
 c003aae:	443b      	add	r3, r7
 c003ab0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c003ab4:	07da      	lsls	r2, r3, #31
 c003ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003aba:	3b01      	subs	r3, #1
 c003abc:	430a      	orrs	r2, r1
 c003abe:	009b      	lsls	r3, r3, #2
 c003ac0:	33b0      	adds	r3, #176	@ 0xb0
 c003ac2:	443b      	add	r3, r7
 c003ac4:	f843 2c58 	str.w	r2, [r3, #-88]
 c003ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003acc:	009b      	lsls	r3, r3, #2
 c003ace:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 c003ad2:	4413      	add	r3, r2
 c003ad4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003ad8:	4611      	mov	r1, r2
 c003ada:	4618      	mov	r0, r3
 c003adc:	f7ff fe72 	bl	c0037c4 <uECC_vli_rshift1>
 c003ae0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 c003ae4:	3b01      	subs	r3, #1
 c003ae6:	b29b      	uxth	r3, r3
 c003ae8:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 c003aec:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 c003af0:	2b00      	cmp	r3, #0
 c003af2:	f6bf af5b 	bge.w	c0039ac <uECC_vli_mmod+0x10c>
 c003af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 c003afa:	009b      	lsls	r3, r3, #2
 c003afc:	33b0      	adds	r3, #176	@ 0xb0
 c003afe:	443b      	add	r3, r7
 c003b00:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 c003b04:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003b08:	4619      	mov	r1, r3
 c003b0a:	68f8      	ldr	r0, [r7, #12]
 c003b0c:	f7ff fd94 	bl	c003638 <uECC_vli_set>
 c003b10:	bf00      	nop
 c003b12:	37b4      	adds	r7, #180	@ 0xb4
 c003b14:	46bd      	mov	sp, r7
 c003b16:	bd90      	pop	{r4, r7, pc}

0c003b18 <uECC_vli_modMult>:
 c003b18:	b580      	push	{r7, lr}
 c003b1a:	b094      	sub	sp, #80	@ 0x50
 c003b1c:	af00      	add	r7, sp, #0
 c003b1e:	60f8      	str	r0, [r7, #12]
 c003b20:	60b9      	str	r1, [r7, #8]
 c003b22:	607a      	str	r2, [r7, #4]
 c003b24:	603b      	str	r3, [r7, #0]
 c003b26:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 c003b2a:	f107 0010 	add.w	r0, r7, #16
 c003b2e:	687a      	ldr	r2, [r7, #4]
 c003b30:	68b9      	ldr	r1, [r7, #8]
 c003b32:	f7ff fc6b 	bl	c00340c <uECC_vli_mult>
 c003b36:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 c003b3a:	f107 0110 	add.w	r1, r7, #16
 c003b3e:	683a      	ldr	r2, [r7, #0]
 c003b40:	68f8      	ldr	r0, [r7, #12]
 c003b42:	f7ff fead 	bl	c0038a0 <uECC_vli_mmod>
 c003b46:	bf00      	nop
 c003b48:	3750      	adds	r7, #80	@ 0x50
 c003b4a:	46bd      	mov	sp, r7
 c003b4c:	bd80      	pop	{r7, pc}

0c003b4e <uECC_vli_modMult_fast>:
 c003b4e:	b580      	push	{r7, lr}
 c003b50:	b094      	sub	sp, #80	@ 0x50
 c003b52:	af00      	add	r7, sp, #0
 c003b54:	60f8      	str	r0, [r7, #12]
 c003b56:	60b9      	str	r1, [r7, #8]
 c003b58:	607a      	str	r2, [r7, #4]
 c003b5a:	603b      	str	r3, [r7, #0]
 c003b5c:	683b      	ldr	r3, [r7, #0]
 c003b5e:	f993 3000 	ldrsb.w	r3, [r3]
 c003b62:	f107 0010 	add.w	r0, r7, #16
 c003b66:	687a      	ldr	r2, [r7, #4]
 c003b68:	68b9      	ldr	r1, [r7, #8]
 c003b6a:	f7ff fc4f 	bl	c00340c <uECC_vli_mult>
 c003b6e:	683b      	ldr	r3, [r7, #0]
 c003b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c003b74:	f107 0210 	add.w	r2, r7, #16
 c003b78:	4611      	mov	r1, r2
 c003b7a:	68f8      	ldr	r0, [r7, #12]
 c003b7c:	4798      	blx	r3
 c003b7e:	bf00      	nop
 c003b80:	3750      	adds	r7, #80	@ 0x50
 c003b82:	46bd      	mov	sp, r7
 c003b84:	bd80      	pop	{r7, pc}

0c003b86 <uECC_vli_modSquare_fast>:
 c003b86:	b580      	push	{r7, lr}
 c003b88:	b084      	sub	sp, #16
 c003b8a:	af00      	add	r7, sp, #0
 c003b8c:	60f8      	str	r0, [r7, #12]
 c003b8e:	60b9      	str	r1, [r7, #8]
 c003b90:	607a      	str	r2, [r7, #4]
 c003b92:	687b      	ldr	r3, [r7, #4]
 c003b94:	68ba      	ldr	r2, [r7, #8]
 c003b96:	68b9      	ldr	r1, [r7, #8]
 c003b98:	68f8      	ldr	r0, [r7, #12]
 c003b9a:	f7ff ffd8 	bl	c003b4e <uECC_vli_modMult_fast>
 c003b9e:	bf00      	nop
 c003ba0:	3710      	adds	r7, #16
 c003ba2:	46bd      	mov	sp, r7
 c003ba4:	bd80      	pop	{r7, pc}

0c003ba6 <vli_modInv_update>:
 c003ba6:	b580      	push	{r7, lr}
 c003ba8:	b086      	sub	sp, #24
 c003baa:	af00      	add	r7, sp, #0
 c003bac:	60f8      	str	r0, [r7, #12]
 c003bae:	60b9      	str	r1, [r7, #8]
 c003bb0:	4613      	mov	r3, r2
 c003bb2:	71fb      	strb	r3, [r7, #7]
 c003bb4:	2300      	movs	r3, #0
 c003bb6:	617b      	str	r3, [r7, #20]
 c003bb8:	68fb      	ldr	r3, [r7, #12]
 c003bba:	681b      	ldr	r3, [r3, #0]
 c003bbc:	f003 0301 	and.w	r3, r3, #1
 c003bc0:	2b00      	cmp	r3, #0
 c003bc2:	d007      	beq.n	c003bd4 <vli_modInv_update+0x2e>
 c003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003bc8:	68ba      	ldr	r2, [r7, #8]
 c003bca:	68f9      	ldr	r1, [r7, #12]
 c003bcc:	68f8      	ldr	r0, [r7, #12]
 c003bce:	f7ff fb87 	bl	c0032e0 <uECC_vli_add>
 c003bd2:	6178      	str	r0, [r7, #20]
 c003bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003bd8:	4619      	mov	r1, r3
 c003bda:	68f8      	ldr	r0, [r7, #12]
 c003bdc:	f7ff fdf2 	bl	c0037c4 <uECC_vli_rshift1>
 c003be0:	697b      	ldr	r3, [r7, #20]
 c003be2:	2b00      	cmp	r3, #0
 c003be4:	d013      	beq.n	c003c0e <vli_modInv_update+0x68>
 c003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003bea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c003bee:	3b01      	subs	r3, #1
 c003bf0:	009b      	lsls	r3, r3, #2
 c003bf2:	68fa      	ldr	r2, [r7, #12]
 c003bf4:	4413      	add	r3, r2
 c003bf6:	681a      	ldr	r2, [r3, #0]
 c003bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003bfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c003c00:	3b01      	subs	r3, #1
 c003c02:	009b      	lsls	r3, r3, #2
 c003c04:	68f9      	ldr	r1, [r7, #12]
 c003c06:	440b      	add	r3, r1
 c003c08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 c003c0c:	601a      	str	r2, [r3, #0]
 c003c0e:	bf00      	nop
 c003c10:	3718      	adds	r7, #24
 c003c12:	46bd      	mov	sp, r7
 c003c14:	bd80      	pop	{r7, pc}

0c003c16 <uECC_vli_modInv>:
 c003c16:	b580      	push	{r7, lr}
 c003c18:	b0a6      	sub	sp, #152	@ 0x98
 c003c1a:	af00      	add	r7, sp, #0
 c003c1c:	60f8      	str	r0, [r7, #12]
 c003c1e:	60b9      	str	r1, [r7, #8]
 c003c20:	607a      	str	r2, [r7, #4]
 c003c22:	70fb      	strb	r3, [r7, #3]
 c003c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003c28:	4619      	mov	r1, r3
 c003c2a:	68b8      	ldr	r0, [r7, #8]
 c003c2c:	f7ff fc60 	bl	c0034f0 <uECC_vli_isZero>
 c003c30:	4603      	mov	r3, r0
 c003c32:	2b00      	cmp	r3, #0
 c003c34:	d006      	beq.n	c003c44 <uECC_vli_modInv+0x2e>
 c003c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003c3a:	4619      	mov	r1, r3
 c003c3c:	68f8      	ldr	r0, [r7, #12]
 c003c3e:	f7ff fc36 	bl	c0034ae <uECC_vli_clear>
 c003c42:	e0de      	b.n	c003e02 <uECC_vli_modInv+0x1ec>
 c003c44:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003c48:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 c003c4c:	68b9      	ldr	r1, [r7, #8]
 c003c4e:	4618      	mov	r0, r3
 c003c50:	f7ff fcf2 	bl	c003638 <uECC_vli_set>
 c003c54:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003c58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 c003c5c:	6879      	ldr	r1, [r7, #4]
 c003c5e:	4618      	mov	r0, r3
 c003c60:	f7ff fcea 	bl	c003638 <uECC_vli_set>
 c003c64:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003c68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 c003c6c:	4611      	mov	r1, r2
 c003c6e:	4618      	mov	r0, r3
 c003c70:	f7ff fc1d 	bl	c0034ae <uECC_vli_clear>
 c003c74:	2301      	movs	r3, #1
 c003c76:	637b      	str	r3, [r7, #52]	@ 0x34
 c003c78:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003c7c:	f107 0314 	add.w	r3, r7, #20
 c003c80:	4611      	mov	r1, r2
 c003c82:	4618      	mov	r0, r3
 c003c84:	f7ff fc13 	bl	c0034ae <uECC_vli_clear>
 c003c88:	e0a2      	b.n	c003dd0 <uECC_vli_modInv+0x1ba>
 c003c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 c003c8c:	f003 0301 	and.w	r3, r3, #1
 c003c90:	2b00      	cmp	r3, #0
 c003c92:	d110      	bne.n	c003cb6 <uECC_vli_modInv+0xa0>
 c003c94:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003c98:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 c003c9c:	4611      	mov	r1, r2
 c003c9e:	4618      	mov	r0, r3
 c003ca0:	f7ff fd90 	bl	c0037c4 <uECC_vli_rshift1>
 c003ca4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003ca8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 c003cac:	6879      	ldr	r1, [r7, #4]
 c003cae:	4618      	mov	r0, r3
 c003cb0:	f7ff ff79 	bl	c003ba6 <vli_modInv_update>
 c003cb4:	e08c      	b.n	c003dd0 <uECC_vli_modInv+0x1ba>
 c003cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c003cb8:	f003 0301 	and.w	r3, r3, #1
 c003cbc:	2b00      	cmp	r3, #0
 c003cbe:	d110      	bne.n	c003ce2 <uECC_vli_modInv+0xcc>
 c003cc0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003cc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 c003cc8:	4611      	mov	r1, r2
 c003cca:	4618      	mov	r0, r3
 c003ccc:	f7ff fd7a 	bl	c0037c4 <uECC_vli_rshift1>
 c003cd0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003cd4:	f107 0314 	add.w	r3, r7, #20
 c003cd8:	6879      	ldr	r1, [r7, #4]
 c003cda:	4618      	mov	r0, r3
 c003cdc:	f7ff ff63 	bl	c003ba6 <vli_modInv_update>
 c003ce0:	e076      	b.n	c003dd0 <uECC_vli_modInv+0x1ba>
 c003ce2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 c003ce6:	2b00      	cmp	r3, #0
 c003ce8:	dd39      	ble.n	c003d5e <uECC_vli_modInv+0x148>
 c003cea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003cee:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 c003cf2:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 c003cf6:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 c003cfa:	f7ff fb39 	bl	c003370 <uECC_vli_sub>
 c003cfe:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003d02:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 c003d06:	4611      	mov	r1, r2
 c003d08:	4618      	mov	r0, r3
 c003d0a:	f7ff fd5b 	bl	c0037c4 <uECC_vli_rshift1>
 c003d0e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003d12:	f107 0114 	add.w	r1, r7, #20
 c003d16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 c003d1a:	4618      	mov	r0, r3
 c003d1c:	f7ff fcb3 	bl	c003686 <uECC_vli_cmp_unsafe>
 c003d20:	4603      	mov	r3, r0
 c003d22:	2b00      	cmp	r3, #0
 c003d24:	da08      	bge.n	c003d38 <uECC_vli_modInv+0x122>
 c003d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003d2a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 c003d2e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 c003d32:	687a      	ldr	r2, [r7, #4]
 c003d34:	f7ff fad4 	bl	c0032e0 <uECC_vli_add>
 c003d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003d3c:	f107 0214 	add.w	r2, r7, #20
 c003d40:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 c003d44:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 c003d48:	f7ff fb12 	bl	c003370 <uECC_vli_sub>
 c003d4c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003d50:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 c003d54:	6879      	ldr	r1, [r7, #4]
 c003d56:	4618      	mov	r0, r3
 c003d58:	f7ff ff25 	bl	c003ba6 <vli_modInv_update>
 c003d5c:	e038      	b.n	c003dd0 <uECC_vli_modInv+0x1ba>
 c003d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003d62:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 c003d66:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 c003d6a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 c003d6e:	f7ff faff 	bl	c003370 <uECC_vli_sub>
 c003d72:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003d76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 c003d7a:	4611      	mov	r1, r2
 c003d7c:	4618      	mov	r0, r3
 c003d7e:	f7ff fd21 	bl	c0037c4 <uECC_vli_rshift1>
 c003d82:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003d86:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 c003d8a:	f107 0314 	add.w	r3, r7, #20
 c003d8e:	4618      	mov	r0, r3
 c003d90:	f7ff fc79 	bl	c003686 <uECC_vli_cmp_unsafe>
 c003d94:	4603      	mov	r3, r0
 c003d96:	2b00      	cmp	r3, #0
 c003d98:	da08      	bge.n	c003dac <uECC_vli_modInv+0x196>
 c003d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003d9e:	f107 0114 	add.w	r1, r7, #20
 c003da2:	f107 0014 	add.w	r0, r7, #20
 c003da6:	687a      	ldr	r2, [r7, #4]
 c003da8:	f7ff fa9a 	bl	c0032e0 <uECC_vli_add>
 c003dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003db0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 c003db4:	f107 0114 	add.w	r1, r7, #20
 c003db8:	f107 0014 	add.w	r0, r7, #20
 c003dbc:	f7ff fad8 	bl	c003370 <uECC_vli_sub>
 c003dc0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003dc4:	f107 0314 	add.w	r3, r7, #20
 c003dc8:	6879      	ldr	r1, [r7, #4]
 c003dca:	4618      	mov	r0, r3
 c003dcc:	f7ff feeb 	bl	c003ba6 <vli_modInv_update>
 c003dd0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003dd4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 c003dd8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 c003ddc:	4618      	mov	r0, r3
 c003dde:	f7ff fc52 	bl	c003686 <uECC_vli_cmp_unsafe>
 c003de2:	4603      	mov	r3, r0
 c003de4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 c003de8:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 c003dec:	2b00      	cmp	r3, #0
 c003dee:	f47f af4c 	bne.w	c003c8a <uECC_vli_modInv+0x74>
 c003df2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003df6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 c003dfa:	4619      	mov	r1, r3
 c003dfc:	68f8      	ldr	r0, [r7, #12]
 c003dfe:	f7ff fc1b 	bl	c003638 <uECC_vli_set>
 c003e02:	3798      	adds	r7, #152	@ 0x98
 c003e04:	46bd      	mov	sp, r7
 c003e06:	bd80      	pop	{r7, pc}

0c003e08 <double_jacobian_default>:
 c003e08:	b580      	push	{r7, lr}
 c003e0a:	b098      	sub	sp, #96	@ 0x60
 c003e0c:	af02      	add	r7, sp, #8
 c003e0e:	60f8      	str	r0, [r7, #12]
 c003e10:	60b9      	str	r1, [r7, #8]
 c003e12:	607a      	str	r2, [r7, #4]
 c003e14:	603b      	str	r3, [r7, #0]
 c003e16:	683b      	ldr	r3, [r7, #0]
 c003e18:	781b      	ldrb	r3, [r3, #0]
 c003e1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 c003e1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003e22:	4619      	mov	r1, r3
 c003e24:	6878      	ldr	r0, [r7, #4]
 c003e26:	f7ff fb63 	bl	c0034f0 <uECC_vli_isZero>
 c003e2a:	4603      	mov	r3, r0
 c003e2c:	2b00      	cmp	r3, #0
 c003e2e:	f040 80e6 	bne.w	c003ffe <double_jacobian_default+0x1f6>
 c003e32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 c003e36:	683a      	ldr	r2, [r7, #0]
 c003e38:	68b9      	ldr	r1, [r7, #8]
 c003e3a:	4618      	mov	r0, r3
 c003e3c:	f7ff fea3 	bl	c003b86 <uECC_vli_modSquare_fast>
 c003e40:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c003e44:	f107 0010 	add.w	r0, r7, #16
 c003e48:	683b      	ldr	r3, [r7, #0]
 c003e4a:	68f9      	ldr	r1, [r7, #12]
 c003e4c:	f7ff fe7f 	bl	c003b4e <uECC_vli_modMult_fast>
 c003e50:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 c003e54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 c003e58:	683a      	ldr	r2, [r7, #0]
 c003e5a:	4618      	mov	r0, r3
 c003e5c:	f7ff fe93 	bl	c003b86 <uECC_vli_modSquare_fast>
 c003e60:	683b      	ldr	r3, [r7, #0]
 c003e62:	687a      	ldr	r2, [r7, #4]
 c003e64:	68b9      	ldr	r1, [r7, #8]
 c003e66:	68b8      	ldr	r0, [r7, #8]
 c003e68:	f7ff fe71 	bl	c003b4e <uECC_vli_modMult_fast>
 c003e6c:	683a      	ldr	r2, [r7, #0]
 c003e6e:	6879      	ldr	r1, [r7, #4]
 c003e70:	6878      	ldr	r0, [r7, #4]
 c003e72:	f7ff fe88 	bl	c003b86 <uECC_vli_modSquare_fast>
 c003e76:	683b      	ldr	r3, [r7, #0]
 c003e78:	1d1a      	adds	r2, r3, #4
 c003e7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003e7e:	9300      	str	r3, [sp, #0]
 c003e80:	4613      	mov	r3, r2
 c003e82:	687a      	ldr	r2, [r7, #4]
 c003e84:	68f9      	ldr	r1, [r7, #12]
 c003e86:	68f8      	ldr	r0, [r7, #12]
 c003e88:	f7ff fcc6 	bl	c003818 <uECC_vli_modAdd>
 c003e8c:	683b      	ldr	r3, [r7, #0]
 c003e8e:	1d1a      	adds	r2, r3, #4
 c003e90:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003e94:	9300      	str	r3, [sp, #0]
 c003e96:	4613      	mov	r3, r2
 c003e98:	687a      	ldr	r2, [r7, #4]
 c003e9a:	6879      	ldr	r1, [r7, #4]
 c003e9c:	6878      	ldr	r0, [r7, #4]
 c003e9e:	f7ff fcbb 	bl	c003818 <uECC_vli_modAdd>
 c003ea2:	683b      	ldr	r3, [r7, #0]
 c003ea4:	1d1a      	adds	r2, r3, #4
 c003ea6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003eaa:	9300      	str	r3, [sp, #0]
 c003eac:	4613      	mov	r3, r2
 c003eae:	687a      	ldr	r2, [r7, #4]
 c003eb0:	68f9      	ldr	r1, [r7, #12]
 c003eb2:	6878      	ldr	r0, [r7, #4]
 c003eb4:	f7ff fcd7 	bl	c003866 <uECC_vli_modSub>
 c003eb8:	683b      	ldr	r3, [r7, #0]
 c003eba:	687a      	ldr	r2, [r7, #4]
 c003ebc:	68f9      	ldr	r1, [r7, #12]
 c003ebe:	68f8      	ldr	r0, [r7, #12]
 c003ec0:	f7ff fe45 	bl	c003b4e <uECC_vli_modMult_fast>
 c003ec4:	683b      	ldr	r3, [r7, #0]
 c003ec6:	1d1a      	adds	r2, r3, #4
 c003ec8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003ecc:	9300      	str	r3, [sp, #0]
 c003ece:	4613      	mov	r3, r2
 c003ed0:	68fa      	ldr	r2, [r7, #12]
 c003ed2:	68f9      	ldr	r1, [r7, #12]
 c003ed4:	6878      	ldr	r0, [r7, #4]
 c003ed6:	f7ff fc9f 	bl	c003818 <uECC_vli_modAdd>
 c003eda:	683b      	ldr	r3, [r7, #0]
 c003edc:	1d1a      	adds	r2, r3, #4
 c003ede:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003ee2:	9300      	str	r3, [sp, #0]
 c003ee4:	4613      	mov	r3, r2
 c003ee6:	687a      	ldr	r2, [r7, #4]
 c003ee8:	68f9      	ldr	r1, [r7, #12]
 c003eea:	68f8      	ldr	r0, [r7, #12]
 c003eec:	f7ff fc94 	bl	c003818 <uECC_vli_modAdd>
 c003ef0:	2100      	movs	r1, #0
 c003ef2:	68f8      	ldr	r0, [r7, #12]
 c003ef4:	f7ff fb26 	bl	c003544 <uECC_vli_testBit>
 c003ef8:	4603      	mov	r3, r0
 c003efa:	2b00      	cmp	r3, #0
 c003efc:	d024      	beq.n	c003f48 <double_jacobian_default+0x140>
 c003efe:	683b      	ldr	r3, [r7, #0]
 c003f00:	1d1a      	adds	r2, r3, #4
 c003f02:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003f06:	68f9      	ldr	r1, [r7, #12]
 c003f08:	68f8      	ldr	r0, [r7, #12]
 c003f0a:	f7ff f9e9 	bl	c0032e0 <uECC_vli_add>
 c003f0e:	6538      	str	r0, [r7, #80]	@ 0x50
 c003f10:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003f14:	4619      	mov	r1, r3
 c003f16:	68f8      	ldr	r0, [r7, #12]
 c003f18:	f7ff fc54 	bl	c0037c4 <uECC_vli_rshift1>
 c003f1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003f20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c003f24:	3b01      	subs	r3, #1
 c003f26:	009b      	lsls	r3, r3, #2
 c003f28:	68fa      	ldr	r2, [r7, #12]
 c003f2a:	4413      	add	r3, r2
 c003f2c:	6819      	ldr	r1, [r3, #0]
 c003f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 c003f30:	07da      	lsls	r2, r3, #31
 c003f32:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003f36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c003f3a:	3b01      	subs	r3, #1
 c003f3c:	009b      	lsls	r3, r3, #2
 c003f3e:	68f8      	ldr	r0, [r7, #12]
 c003f40:	4403      	add	r3, r0
 c003f42:	430a      	orrs	r2, r1
 c003f44:	601a      	str	r2, [r3, #0]
 c003f46:	e005      	b.n	c003f54 <double_jacobian_default+0x14c>
 c003f48:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003f4c:	4619      	mov	r1, r3
 c003f4e:	68f8      	ldr	r0, [r7, #12]
 c003f50:	f7ff fc38 	bl	c0037c4 <uECC_vli_rshift1>
 c003f54:	683a      	ldr	r2, [r7, #0]
 c003f56:	68f9      	ldr	r1, [r7, #12]
 c003f58:	6878      	ldr	r0, [r7, #4]
 c003f5a:	f7ff fe14 	bl	c003b86 <uECC_vli_modSquare_fast>
 c003f5e:	683b      	ldr	r3, [r7, #0]
 c003f60:	1d19      	adds	r1, r3, #4
 c003f62:	f107 0210 	add.w	r2, r7, #16
 c003f66:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003f6a:	9300      	str	r3, [sp, #0]
 c003f6c:	460b      	mov	r3, r1
 c003f6e:	6879      	ldr	r1, [r7, #4]
 c003f70:	6878      	ldr	r0, [r7, #4]
 c003f72:	f7ff fc78 	bl	c003866 <uECC_vli_modSub>
 c003f76:	683b      	ldr	r3, [r7, #0]
 c003f78:	1d19      	adds	r1, r3, #4
 c003f7a:	f107 0210 	add.w	r2, r7, #16
 c003f7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003f82:	9300      	str	r3, [sp, #0]
 c003f84:	460b      	mov	r3, r1
 c003f86:	6879      	ldr	r1, [r7, #4]
 c003f88:	6878      	ldr	r0, [r7, #4]
 c003f8a:	f7ff fc6c 	bl	c003866 <uECC_vli_modSub>
 c003f8e:	683b      	ldr	r3, [r7, #0]
 c003f90:	1d1a      	adds	r2, r3, #4
 c003f92:	f107 0110 	add.w	r1, r7, #16
 c003f96:	f107 0010 	add.w	r0, r7, #16
 c003f9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003f9e:	9300      	str	r3, [sp, #0]
 c003fa0:	4613      	mov	r3, r2
 c003fa2:	687a      	ldr	r2, [r7, #4]
 c003fa4:	f7ff fc5f 	bl	c003866 <uECC_vli_modSub>
 c003fa8:	f107 0210 	add.w	r2, r7, #16
 c003fac:	683b      	ldr	r3, [r7, #0]
 c003fae:	68f9      	ldr	r1, [r7, #12]
 c003fb0:	68f8      	ldr	r0, [r7, #12]
 c003fb2:	f7ff fdcc 	bl	c003b4e <uECC_vli_modMult_fast>
 c003fb6:	683b      	ldr	r3, [r7, #0]
 c003fb8:	1d19      	adds	r1, r3, #4
 c003fba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c003fbe:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 c003fc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003fc6:	9300      	str	r3, [sp, #0]
 c003fc8:	460b      	mov	r3, r1
 c003fca:	68f9      	ldr	r1, [r7, #12]
 c003fcc:	f7ff fc4b 	bl	c003866 <uECC_vli_modSub>
 c003fd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003fd4:	461a      	mov	r2, r3
 c003fd6:	6879      	ldr	r1, [r7, #4]
 c003fd8:	68f8      	ldr	r0, [r7, #12]
 c003fda:	f7ff fb2d 	bl	c003638 <uECC_vli_set>
 c003fde:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 c003fe2:	461a      	mov	r2, r3
 c003fe4:	68b9      	ldr	r1, [r7, #8]
 c003fe6:	6878      	ldr	r0, [r7, #4]
 c003fe8:	f7ff fb26 	bl	c003638 <uECC_vli_set>
 c003fec:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 c003ff0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 c003ff4:	4619      	mov	r1, r3
 c003ff6:	68b8      	ldr	r0, [r7, #8]
 c003ff8:	f7ff fb1e 	bl	c003638 <uECC_vli_set>
 c003ffc:	e000      	b.n	c004000 <double_jacobian_default+0x1f8>
 c003ffe:	bf00      	nop
 c004000:	3758      	adds	r7, #88	@ 0x58
 c004002:	46bd      	mov	sp, r7
 c004004:	bd80      	pop	{r7, pc}

0c004006 <x_side_default>:
 c004006:	b580      	push	{r7, lr}
 c004008:	b090      	sub	sp, #64	@ 0x40
 c00400a:	af02      	add	r7, sp, #8
 c00400c:	60f8      	str	r0, [r7, #12]
 c00400e:	60b9      	str	r1, [r7, #8]
 c004010:	607a      	str	r2, [r7, #4]
 c004012:	f107 0314 	add.w	r3, r7, #20
 c004016:	2220      	movs	r2, #32
 c004018:	2100      	movs	r1, #0
 c00401a:	4618      	mov	r0, r3
 c00401c:	f005 f833 	bl	c009086 <memset>
 c004020:	2303      	movs	r3, #3
 c004022:	617b      	str	r3, [r7, #20]
 c004024:	687b      	ldr	r3, [r7, #4]
 c004026:	781b      	ldrb	r3, [r3, #0]
 c004028:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 c00402c:	687a      	ldr	r2, [r7, #4]
 c00402e:	68b9      	ldr	r1, [r7, #8]
 c004030:	68f8      	ldr	r0, [r7, #12]
 c004032:	f7ff fda8 	bl	c003b86 <uECC_vli_modSquare_fast>
 c004036:	687b      	ldr	r3, [r7, #4]
 c004038:	1d19      	adds	r1, r3, #4
 c00403a:	f107 0214 	add.w	r2, r7, #20
 c00403e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c004042:	9300      	str	r3, [sp, #0]
 c004044:	460b      	mov	r3, r1
 c004046:	68f9      	ldr	r1, [r7, #12]
 c004048:	68f8      	ldr	r0, [r7, #12]
 c00404a:	f7ff fc0c 	bl	c003866 <uECC_vli_modSub>
 c00404e:	687b      	ldr	r3, [r7, #4]
 c004050:	68ba      	ldr	r2, [r7, #8]
 c004052:	68f9      	ldr	r1, [r7, #12]
 c004054:	68f8      	ldr	r0, [r7, #12]
 c004056:	f7ff fd7a 	bl	c003b4e <uECC_vli_modMult_fast>
 c00405a:	687b      	ldr	r3, [r7, #4]
 c00405c:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 c004060:	687b      	ldr	r3, [r7, #4]
 c004062:	1d19      	adds	r1, r3, #4
 c004064:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c004068:	9300      	str	r3, [sp, #0]
 c00406a:	460b      	mov	r3, r1
 c00406c:	68f9      	ldr	r1, [r7, #12]
 c00406e:	68f8      	ldr	r0, [r7, #12]
 c004070:	f7ff fbd2 	bl	c003818 <uECC_vli_modAdd>
 c004074:	bf00      	nop
 c004076:	3738      	adds	r7, #56	@ 0x38
 c004078:	46bd      	mov	sp, r7
 c00407a:	bd80      	pop	{r7, pc}

0c00407c <mod_sqrt_default>:
 c00407c:	b580      	push	{r7, lr}
 c00407e:	b094      	sub	sp, #80	@ 0x50
 c004080:	af00      	add	r7, sp, #0
 c004082:	6078      	str	r0, [r7, #4]
 c004084:	6039      	str	r1, [r7, #0]
 c004086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 c00408a:	2220      	movs	r2, #32
 c00408c:	2100      	movs	r1, #0
 c00408e:	4618      	mov	r0, r3
 c004090:	f004 fff9 	bl	c009086 <memset>
 c004094:	2301      	movs	r3, #1
 c004096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c004098:	f107 030c 	add.w	r3, r7, #12
 c00409c:	2220      	movs	r2, #32
 c00409e:	2100      	movs	r1, #0
 c0040a0:	4618      	mov	r0, r3
 c0040a2:	f004 fff0 	bl	c009086 <memset>
 c0040a6:	2301      	movs	r3, #1
 c0040a8:	60fb      	str	r3, [r7, #12]
 c0040aa:	683b      	ldr	r3, [r7, #0]
 c0040ac:	781b      	ldrb	r3, [r3, #0]
 c0040ae:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 c0040b2:	683b      	ldr	r3, [r7, #0]
 c0040b4:	1d19      	adds	r1, r3, #4
 c0040b6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 c0040ba:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 c0040be:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 c0040c2:	f7ff f90d 	bl	c0032e0 <uECC_vli_add>
 c0040c6:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 c0040ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 c0040ce:	4611      	mov	r1, r2
 c0040d0:	4618      	mov	r0, r3
 c0040d2:	f7ff fa77 	bl	c0035c4 <uECC_vli_numBits>
 c0040d6:	4603      	mov	r3, r0
 c0040d8:	b29b      	uxth	r3, r3
 c0040da:	3b01      	subs	r3, #1
 c0040dc:	b29b      	uxth	r3, r3
 c0040de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 c0040e2:	e020      	b.n	c004126 <mod_sqrt_default+0xaa>
 c0040e4:	f107 010c 	add.w	r1, r7, #12
 c0040e8:	f107 030c 	add.w	r3, r7, #12
 c0040ec:	683a      	ldr	r2, [r7, #0]
 c0040ee:	4618      	mov	r0, r3
 c0040f0:	f7ff fd49 	bl	c003b86 <uECC_vli_modSquare_fast>
 c0040f4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 c0040f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 c0040fc:	4611      	mov	r1, r2
 c0040fe:	4618      	mov	r0, r3
 c004100:	f7ff fa20 	bl	c003544 <uECC_vli_testBit>
 c004104:	4603      	mov	r3, r0
 c004106:	2b00      	cmp	r3, #0
 c004108:	d007      	beq.n	c00411a <mod_sqrt_default+0x9e>
 c00410a:	f107 010c 	add.w	r1, r7, #12
 c00410e:	f107 000c 	add.w	r0, r7, #12
 c004112:	683b      	ldr	r3, [r7, #0]
 c004114:	687a      	ldr	r2, [r7, #4]
 c004116:	f7ff fd1a 	bl	c003b4e <uECC_vli_modMult_fast>
 c00411a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 c00411e:	3b01      	subs	r3, #1
 c004120:	b29b      	uxth	r3, r3
 c004122:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 c004126:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 c00412a:	2b01      	cmp	r3, #1
 c00412c:	dcda      	bgt.n	c0040e4 <mod_sqrt_default+0x68>
 c00412e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 c004132:	f107 030c 	add.w	r3, r7, #12
 c004136:	4619      	mov	r1, r3
 c004138:	6878      	ldr	r0, [r7, #4]
 c00413a:	f7ff fa7d 	bl	c003638 <uECC_vli_set>
 c00413e:	bf00      	nop
 c004140:	3750      	adds	r7, #80	@ 0x50
 c004142:	46bd      	mov	sp, r7
 c004144:	bd80      	pop	{r7, pc}
	...

0c004148 <uECC_secp256r1>:
 c004148:	b480      	push	{r7}
 c00414a:	af00      	add	r7, sp, #0
 c00414c:	4b02      	ldr	r3, [pc, #8]	@ (c004158 <uECC_secp256r1+0x10>)
 c00414e:	4618      	mov	r0, r3
 c004150:	46bd      	mov	sp, r7
 c004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004156:	4770      	bx	lr
 c004158:	0c009e9c 	.word	0x0c009e9c

0c00415c <vli_mmod_fast_secp256r1>:
 c00415c:	b580      	push	{r7, lr}
 c00415e:	b08c      	sub	sp, #48	@ 0x30
 c004160:	af00      	add	r7, sp, #0
 c004162:	6078      	str	r0, [r7, #4]
 c004164:	6039      	str	r1, [r7, #0]
 c004166:	2208      	movs	r2, #8
 c004168:	6839      	ldr	r1, [r7, #0]
 c00416a:	6878      	ldr	r0, [r7, #4]
 c00416c:	f7ff fa64 	bl	c003638 <uECC_vli_set>
 c004170:	2300      	movs	r3, #0
 c004172:	617b      	str	r3, [r7, #20]
 c004174:	697b      	ldr	r3, [r7, #20]
 c004176:	613b      	str	r3, [r7, #16]
 c004178:	693b      	ldr	r3, [r7, #16]
 c00417a:	60fb      	str	r3, [r7, #12]
 c00417c:	683b      	ldr	r3, [r7, #0]
 c00417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c004180:	61bb      	str	r3, [r7, #24]
 c004182:	683b      	ldr	r3, [r7, #0]
 c004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c004186:	61fb      	str	r3, [r7, #28]
 c004188:	683b      	ldr	r3, [r7, #0]
 c00418a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00418c:	623b      	str	r3, [r7, #32]
 c00418e:	683b      	ldr	r3, [r7, #0]
 c004190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c004192:	627b      	str	r3, [r7, #36]	@ 0x24
 c004194:	683b      	ldr	r3, [r7, #0]
 c004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c004198:	62bb      	str	r3, [r7, #40]	@ 0x28
 c00419a:	f107 020c 	add.w	r2, r7, #12
 c00419e:	f107 010c 	add.w	r1, r7, #12
 c0041a2:	f107 000c 	add.w	r0, r7, #12
 c0041a6:	2308      	movs	r3, #8
 c0041a8:	f7ff f89a 	bl	c0032e0 <uECC_vli_add>
 c0041ac:	4603      	mov	r3, r0
 c0041ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c0041b0:	f107 020c 	add.w	r2, r7, #12
 c0041b4:	2308      	movs	r3, #8
 c0041b6:	6879      	ldr	r1, [r7, #4]
 c0041b8:	6878      	ldr	r0, [r7, #4]
 c0041ba:	f7ff f891 	bl	c0032e0 <uECC_vli_add>
 c0041be:	4602      	mov	r2, r0
 c0041c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0041c2:	4413      	add	r3, r2
 c0041c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c0041c6:	683b      	ldr	r3, [r7, #0]
 c0041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c0041ca:	61bb      	str	r3, [r7, #24]
 c0041cc:	683b      	ldr	r3, [r7, #0]
 c0041ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0041d0:	61fb      	str	r3, [r7, #28]
 c0041d2:	683b      	ldr	r3, [r7, #0]
 c0041d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0041d6:	623b      	str	r3, [r7, #32]
 c0041d8:	683b      	ldr	r3, [r7, #0]
 c0041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0041dc:	627b      	str	r3, [r7, #36]	@ 0x24
 c0041de:	2300      	movs	r3, #0
 c0041e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 c0041e2:	f107 020c 	add.w	r2, r7, #12
 c0041e6:	f107 010c 	add.w	r1, r7, #12
 c0041ea:	f107 000c 	add.w	r0, r7, #12
 c0041ee:	2308      	movs	r3, #8
 c0041f0:	f7ff f876 	bl	c0032e0 <uECC_vli_add>
 c0041f4:	4602      	mov	r2, r0
 c0041f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0041f8:	4413      	add	r3, r2
 c0041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c0041fc:	f107 020c 	add.w	r2, r7, #12
 c004200:	2308      	movs	r3, #8
 c004202:	6879      	ldr	r1, [r7, #4]
 c004204:	6878      	ldr	r0, [r7, #4]
 c004206:	f7ff f86b 	bl	c0032e0 <uECC_vli_add>
 c00420a:	4602      	mov	r2, r0
 c00420c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00420e:	4413      	add	r3, r2
 c004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c004212:	683b      	ldr	r3, [r7, #0]
 c004214:	6a1b      	ldr	r3, [r3, #32]
 c004216:	60fb      	str	r3, [r7, #12]
 c004218:	683b      	ldr	r3, [r7, #0]
 c00421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00421c:	613b      	str	r3, [r7, #16]
 c00421e:	683b      	ldr	r3, [r7, #0]
 c004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004222:	617b      	str	r3, [r7, #20]
 c004224:	2300      	movs	r3, #0
 c004226:	623b      	str	r3, [r7, #32]
 c004228:	6a3b      	ldr	r3, [r7, #32]
 c00422a:	61fb      	str	r3, [r7, #28]
 c00422c:	69fb      	ldr	r3, [r7, #28]
 c00422e:	61bb      	str	r3, [r7, #24]
 c004230:	683b      	ldr	r3, [r7, #0]
 c004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c004234:	627b      	str	r3, [r7, #36]	@ 0x24
 c004236:	683b      	ldr	r3, [r7, #0]
 c004238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00423a:	62bb      	str	r3, [r7, #40]	@ 0x28
 c00423c:	f107 020c 	add.w	r2, r7, #12
 c004240:	2308      	movs	r3, #8
 c004242:	6879      	ldr	r1, [r7, #4]
 c004244:	6878      	ldr	r0, [r7, #4]
 c004246:	f7ff f84b 	bl	c0032e0 <uECC_vli_add>
 c00424a:	4602      	mov	r2, r0
 c00424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00424e:	4413      	add	r3, r2
 c004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c004252:	683b      	ldr	r3, [r7, #0]
 c004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c004256:	60fb      	str	r3, [r7, #12]
 c004258:	683b      	ldr	r3, [r7, #0]
 c00425a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00425c:	613b      	str	r3, [r7, #16]
 c00425e:	683b      	ldr	r3, [r7, #0]
 c004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c004262:	617b      	str	r3, [r7, #20]
 c004264:	683b      	ldr	r3, [r7, #0]
 c004266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c004268:	61bb      	str	r3, [r7, #24]
 c00426a:	683b      	ldr	r3, [r7, #0]
 c00426c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00426e:	61fb      	str	r3, [r7, #28]
 c004270:	683b      	ldr	r3, [r7, #0]
 c004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c004274:	623b      	str	r3, [r7, #32]
 c004276:	683b      	ldr	r3, [r7, #0]
 c004278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00427a:	627b      	str	r3, [r7, #36]	@ 0x24
 c00427c:	683b      	ldr	r3, [r7, #0]
 c00427e:	6a1b      	ldr	r3, [r3, #32]
 c004280:	62bb      	str	r3, [r7, #40]	@ 0x28
 c004282:	f107 020c 	add.w	r2, r7, #12
 c004286:	2308      	movs	r3, #8
 c004288:	6879      	ldr	r1, [r7, #4]
 c00428a:	6878      	ldr	r0, [r7, #4]
 c00428c:	f7ff f828 	bl	c0032e0 <uECC_vli_add>
 c004290:	4602      	mov	r2, r0
 c004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c004294:	4413      	add	r3, r2
 c004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c004298:	683b      	ldr	r3, [r7, #0]
 c00429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00429c:	60fb      	str	r3, [r7, #12]
 c00429e:	683b      	ldr	r3, [r7, #0]
 c0042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c0042a2:	613b      	str	r3, [r7, #16]
 c0042a4:	683b      	ldr	r3, [r7, #0]
 c0042a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0042a8:	617b      	str	r3, [r7, #20]
 c0042aa:	2300      	movs	r3, #0
 c0042ac:	623b      	str	r3, [r7, #32]
 c0042ae:	6a3b      	ldr	r3, [r7, #32]
 c0042b0:	61fb      	str	r3, [r7, #28]
 c0042b2:	69fb      	ldr	r3, [r7, #28]
 c0042b4:	61bb      	str	r3, [r7, #24]
 c0042b6:	683b      	ldr	r3, [r7, #0]
 c0042b8:	6a1b      	ldr	r3, [r3, #32]
 c0042ba:	627b      	str	r3, [r7, #36]	@ 0x24
 c0042bc:	683b      	ldr	r3, [r7, #0]
 c0042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 c0042c2:	f107 020c 	add.w	r2, r7, #12
 c0042c6:	2308      	movs	r3, #8
 c0042c8:	6879      	ldr	r1, [r7, #4]
 c0042ca:	6878      	ldr	r0, [r7, #4]
 c0042cc:	f7ff f850 	bl	c003370 <uECC_vli_sub>
 c0042d0:	4602      	mov	r2, r0
 c0042d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0042d4:	1a9b      	subs	r3, r3, r2
 c0042d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c0042d8:	683b      	ldr	r3, [r7, #0]
 c0042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c0042dc:	60fb      	str	r3, [r7, #12]
 c0042de:	683b      	ldr	r3, [r7, #0]
 c0042e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0042e2:	613b      	str	r3, [r7, #16]
 c0042e4:	683b      	ldr	r3, [r7, #0]
 c0042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0042e8:	617b      	str	r3, [r7, #20]
 c0042ea:	683b      	ldr	r3, [r7, #0]
 c0042ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0042ee:	61bb      	str	r3, [r7, #24]
 c0042f0:	2300      	movs	r3, #0
 c0042f2:	623b      	str	r3, [r7, #32]
 c0042f4:	6a3b      	ldr	r3, [r7, #32]
 c0042f6:	61fb      	str	r3, [r7, #28]
 c0042f8:	683b      	ldr	r3, [r7, #0]
 c0042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0042fc:	627b      	str	r3, [r7, #36]	@ 0x24
 c0042fe:	683b      	ldr	r3, [r7, #0]
 c004300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c004302:	62bb      	str	r3, [r7, #40]	@ 0x28
 c004304:	f107 020c 	add.w	r2, r7, #12
 c004308:	2308      	movs	r3, #8
 c00430a:	6879      	ldr	r1, [r7, #4]
 c00430c:	6878      	ldr	r0, [r7, #4]
 c00430e:	f7ff f82f 	bl	c003370 <uECC_vli_sub>
 c004312:	4602      	mov	r2, r0
 c004314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c004316:	1a9b      	subs	r3, r3, r2
 c004318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c00431a:	683b      	ldr	r3, [r7, #0]
 c00431c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00431e:	60fb      	str	r3, [r7, #12]
 c004320:	683b      	ldr	r3, [r7, #0]
 c004322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c004324:	613b      	str	r3, [r7, #16]
 c004326:	683b      	ldr	r3, [r7, #0]
 c004328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00432a:	617b      	str	r3, [r7, #20]
 c00432c:	683b      	ldr	r3, [r7, #0]
 c00432e:	6a1b      	ldr	r3, [r3, #32]
 c004330:	61bb      	str	r3, [r7, #24]
 c004332:	683b      	ldr	r3, [r7, #0]
 c004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c004336:	61fb      	str	r3, [r7, #28]
 c004338:	683b      	ldr	r3, [r7, #0]
 c00433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00433c:	623b      	str	r3, [r7, #32]
 c00433e:	2300      	movs	r3, #0
 c004340:	627b      	str	r3, [r7, #36]	@ 0x24
 c004342:	683b      	ldr	r3, [r7, #0]
 c004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c004346:	62bb      	str	r3, [r7, #40]	@ 0x28
 c004348:	f107 020c 	add.w	r2, r7, #12
 c00434c:	2308      	movs	r3, #8
 c00434e:	6879      	ldr	r1, [r7, #4]
 c004350:	6878      	ldr	r0, [r7, #4]
 c004352:	f7ff f80d 	bl	c003370 <uECC_vli_sub>
 c004356:	4602      	mov	r2, r0
 c004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00435a:	1a9b      	subs	r3, r3, r2
 c00435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c00435e:	683b      	ldr	r3, [r7, #0]
 c004360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c004362:	60fb      	str	r3, [r7, #12]
 c004364:	683b      	ldr	r3, [r7, #0]
 c004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c004368:	613b      	str	r3, [r7, #16]
 c00436a:	2300      	movs	r3, #0
 c00436c:	617b      	str	r3, [r7, #20]
 c00436e:	683b      	ldr	r3, [r7, #0]
 c004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c004372:	61bb      	str	r3, [r7, #24]
 c004374:	683b      	ldr	r3, [r7, #0]
 c004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004378:	61fb      	str	r3, [r7, #28]
 c00437a:	683b      	ldr	r3, [r7, #0]
 c00437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00437e:	623b      	str	r3, [r7, #32]
 c004380:	2300      	movs	r3, #0
 c004382:	627b      	str	r3, [r7, #36]	@ 0x24
 c004384:	683b      	ldr	r3, [r7, #0]
 c004386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c004388:	62bb      	str	r3, [r7, #40]	@ 0x28
 c00438a:	f107 020c 	add.w	r2, r7, #12
 c00438e:	2308      	movs	r3, #8
 c004390:	6879      	ldr	r1, [r7, #4]
 c004392:	6878      	ldr	r0, [r7, #4]
 c004394:	f7fe ffec 	bl	c003370 <uECC_vli_sub>
 c004398:	4602      	mov	r2, r0
 c00439a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00439c:	1a9b      	subs	r3, r3, r2
 c00439e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c0043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0043a2:	2b00      	cmp	r3, #0
 c0043a4:	da17      	bge.n	c0043d6 <vli_mmod_fast_secp256r1+0x27a>
 c0043a6:	2308      	movs	r3, #8
 c0043a8:	4a12      	ldr	r2, [pc, #72]	@ (c0043f4 <vli_mmod_fast_secp256r1+0x298>)
 c0043aa:	6879      	ldr	r1, [r7, #4]
 c0043ac:	6878      	ldr	r0, [r7, #4]
 c0043ae:	f7fe ff97 	bl	c0032e0 <uECC_vli_add>
 c0043b2:	4602      	mov	r2, r0
 c0043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0043b6:	4413      	add	r3, r2
 c0043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c0043ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0043bc:	2b00      	cmp	r3, #0
 c0043be:	dbf2      	blt.n	c0043a6 <vli_mmod_fast_secp256r1+0x24a>
 c0043c0:	e014      	b.n	c0043ec <vli_mmod_fast_secp256r1+0x290>
 c0043c2:	2308      	movs	r3, #8
 c0043c4:	4a0b      	ldr	r2, [pc, #44]	@ (c0043f4 <vli_mmod_fast_secp256r1+0x298>)
 c0043c6:	6879      	ldr	r1, [r7, #4]
 c0043c8:	6878      	ldr	r0, [r7, #4]
 c0043ca:	f7fe ffd1 	bl	c003370 <uECC_vli_sub>
 c0043ce:	4602      	mov	r2, r0
 c0043d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0043d2:	1a9b      	subs	r3, r3, r2
 c0043d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c0043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0043d8:	2b00      	cmp	r3, #0
 c0043da:	d1f2      	bne.n	c0043c2 <vli_mmod_fast_secp256r1+0x266>
 c0043dc:	2208      	movs	r2, #8
 c0043de:	6879      	ldr	r1, [r7, #4]
 c0043e0:	4804      	ldr	r0, [pc, #16]	@ (c0043f4 <vli_mmod_fast_secp256r1+0x298>)
 c0043e2:	f7ff f950 	bl	c003686 <uECC_vli_cmp_unsafe>
 c0043e6:	4603      	mov	r3, r0
 c0043e8:	2b01      	cmp	r3, #1
 c0043ea:	d1ea      	bne.n	c0043c2 <vli_mmod_fast_secp256r1+0x266>
 c0043ec:	bf00      	nop
 c0043ee:	3730      	adds	r7, #48	@ 0x30
 c0043f0:	46bd      	mov	sp, r7
 c0043f2:	bd80      	pop	{r7, pc}
 c0043f4:	0c009ea0 	.word	0x0c009ea0

0c0043f8 <apply_z>:
 c0043f8:	b580      	push	{r7, lr}
 c0043fa:	b08c      	sub	sp, #48	@ 0x30
 c0043fc:	af00      	add	r7, sp, #0
 c0043fe:	60f8      	str	r0, [r7, #12]
 c004400:	60b9      	str	r1, [r7, #8]
 c004402:	607a      	str	r2, [r7, #4]
 c004404:	603b      	str	r3, [r7, #0]
 c004406:	f107 0310 	add.w	r3, r7, #16
 c00440a:	683a      	ldr	r2, [r7, #0]
 c00440c:	6879      	ldr	r1, [r7, #4]
 c00440e:	4618      	mov	r0, r3
 c004410:	f7ff fbb9 	bl	c003b86 <uECC_vli_modSquare_fast>
 c004414:	f107 0210 	add.w	r2, r7, #16
 c004418:	683b      	ldr	r3, [r7, #0]
 c00441a:	68f9      	ldr	r1, [r7, #12]
 c00441c:	68f8      	ldr	r0, [r7, #12]
 c00441e:	f7ff fb96 	bl	c003b4e <uECC_vli_modMult_fast>
 c004422:	f107 0110 	add.w	r1, r7, #16
 c004426:	f107 0010 	add.w	r0, r7, #16
 c00442a:	683b      	ldr	r3, [r7, #0]
 c00442c:	687a      	ldr	r2, [r7, #4]
 c00442e:	f7ff fb8e 	bl	c003b4e <uECC_vli_modMult_fast>
 c004432:	f107 0210 	add.w	r2, r7, #16
 c004436:	683b      	ldr	r3, [r7, #0]
 c004438:	68b9      	ldr	r1, [r7, #8]
 c00443a:	68b8      	ldr	r0, [r7, #8]
 c00443c:	f7ff fb87 	bl	c003b4e <uECC_vli_modMult_fast>
 c004440:	bf00      	nop
 c004442:	3730      	adds	r7, #48	@ 0x30
 c004444:	46bd      	mov	sp, r7
 c004446:	bd80      	pop	{r7, pc}

0c004448 <XYcZ_initial_double>:
 c004448:	b590      	push	{r4, r7, lr}
 c00444a:	b08f      	sub	sp, #60	@ 0x3c
 c00444c:	af00      	add	r7, sp, #0
 c00444e:	60f8      	str	r0, [r7, #12]
 c004450:	60b9      	str	r1, [r7, #8]
 c004452:	607a      	str	r2, [r7, #4]
 c004454:	603b      	str	r3, [r7, #0]
 c004456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c004458:	781b      	ldrb	r3, [r3, #0]
 c00445a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 c00445e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c004460:	2b00      	cmp	r3, #0
 c004462:	d008      	beq.n	c004476 <XYcZ_initial_double+0x2e>
 c004464:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 c004468:	f107 0314 	add.w	r3, r7, #20
 c00446c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 c00446e:	4618      	mov	r0, r3
 c004470:	f7ff f8e2 	bl	c003638 <uECC_vli_set>
 c004474:	e009      	b.n	c00448a <XYcZ_initial_double+0x42>
 c004476:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 c00447a:	f107 0314 	add.w	r3, r7, #20
 c00447e:	4611      	mov	r1, r2
 c004480:	4618      	mov	r0, r3
 c004482:	f7ff f814 	bl	c0034ae <uECC_vli_clear>
 c004486:	2301      	movs	r3, #1
 c004488:	617b      	str	r3, [r7, #20]
 c00448a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c00448e:	461a      	mov	r2, r3
 c004490:	68f9      	ldr	r1, [r7, #12]
 c004492:	6878      	ldr	r0, [r7, #4]
 c004494:	f7ff f8d0 	bl	c003638 <uECC_vli_set>
 c004498:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c00449c:	461a      	mov	r2, r3
 c00449e:	68b9      	ldr	r1, [r7, #8]
 c0044a0:	6838      	ldr	r0, [r7, #0]
 c0044a2:	f7ff f8c9 	bl	c003638 <uECC_vli_set>
 c0044a6:	f107 0214 	add.w	r2, r7, #20
 c0044aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0044ac:	68b9      	ldr	r1, [r7, #8]
 c0044ae:	68f8      	ldr	r0, [r7, #12]
 c0044b0:	f7ff ffa2 	bl	c0043f8 <apply_z>
 c0044b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0044b6:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 c0044ba:	f107 0214 	add.w	r2, r7, #20
 c0044be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0044c0:	68b9      	ldr	r1, [r7, #8]
 c0044c2:	68f8      	ldr	r0, [r7, #12]
 c0044c4:	47a0      	blx	r4
 c0044c6:	f107 0214 	add.w	r2, r7, #20
 c0044ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0044cc:	6839      	ldr	r1, [r7, #0]
 c0044ce:	6878      	ldr	r0, [r7, #4]
 c0044d0:	f7ff ff92 	bl	c0043f8 <apply_z>
 c0044d4:	bf00      	nop
 c0044d6:	373c      	adds	r7, #60	@ 0x3c
 c0044d8:	46bd      	mov	sp, r7
 c0044da:	bd90      	pop	{r4, r7, pc}

0c0044dc <XYcZ_add>:
 c0044dc:	b580      	push	{r7, lr}
 c0044de:	b090      	sub	sp, #64	@ 0x40
 c0044e0:	af02      	add	r7, sp, #8
 c0044e2:	60f8      	str	r0, [r7, #12]
 c0044e4:	60b9      	str	r1, [r7, #8]
 c0044e6:	607a      	str	r2, [r7, #4]
 c0044e8:	603b      	str	r3, [r7, #0]
 c0044ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0044ec:	781b      	ldrb	r3, [r3, #0]
 c0044ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 c0044f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0044f4:	1d1a      	adds	r2, r3, #4
 c0044f6:	f107 0014 	add.w	r0, r7, #20
 c0044fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c0044fe:	9300      	str	r3, [sp, #0]
 c004500:	4613      	mov	r3, r2
 c004502:	68fa      	ldr	r2, [r7, #12]
 c004504:	6879      	ldr	r1, [r7, #4]
 c004506:	f7ff f9ae 	bl	c003866 <uECC_vli_modSub>
 c00450a:	f107 0114 	add.w	r1, r7, #20
 c00450e:	f107 0314 	add.w	r3, r7, #20
 c004512:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 c004514:	4618      	mov	r0, r3
 c004516:	f7ff fb36 	bl	c003b86 <uECC_vli_modSquare_fast>
 c00451a:	f107 0214 	add.w	r2, r7, #20
 c00451e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c004520:	68f9      	ldr	r1, [r7, #12]
 c004522:	68f8      	ldr	r0, [r7, #12]
 c004524:	f7ff fb13 	bl	c003b4e <uECC_vli_modMult_fast>
 c004528:	f107 0214 	add.w	r2, r7, #20
 c00452c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00452e:	6879      	ldr	r1, [r7, #4]
 c004530:	6878      	ldr	r0, [r7, #4]
 c004532:	f7ff fb0c 	bl	c003b4e <uECC_vli_modMult_fast>
 c004536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c004538:	1d1a      	adds	r2, r3, #4
 c00453a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c00453e:	9300      	str	r3, [sp, #0]
 c004540:	4613      	mov	r3, r2
 c004542:	68ba      	ldr	r2, [r7, #8]
 c004544:	6839      	ldr	r1, [r7, #0]
 c004546:	6838      	ldr	r0, [r7, #0]
 c004548:	f7ff f98d 	bl	c003866 <uECC_vli_modSub>
 c00454c:	f107 0314 	add.w	r3, r7, #20
 c004550:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 c004552:	6839      	ldr	r1, [r7, #0]
 c004554:	4618      	mov	r0, r3
 c004556:	f7ff fb16 	bl	c003b86 <uECC_vli_modSquare_fast>
 c00455a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00455c:	1d1a      	adds	r2, r3, #4
 c00455e:	f107 0114 	add.w	r1, r7, #20
 c004562:	f107 0014 	add.w	r0, r7, #20
 c004566:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c00456a:	9300      	str	r3, [sp, #0]
 c00456c:	4613      	mov	r3, r2
 c00456e:	68fa      	ldr	r2, [r7, #12]
 c004570:	f7ff f979 	bl	c003866 <uECC_vli_modSub>
 c004574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c004576:	1d1a      	adds	r2, r3, #4
 c004578:	f107 0114 	add.w	r1, r7, #20
 c00457c:	f107 0014 	add.w	r0, r7, #20
 c004580:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c004584:	9300      	str	r3, [sp, #0]
 c004586:	4613      	mov	r3, r2
 c004588:	687a      	ldr	r2, [r7, #4]
 c00458a:	f7ff f96c 	bl	c003866 <uECC_vli_modSub>
 c00458e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c004590:	1d1a      	adds	r2, r3, #4
 c004592:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c004596:	9300      	str	r3, [sp, #0]
 c004598:	4613      	mov	r3, r2
 c00459a:	68fa      	ldr	r2, [r7, #12]
 c00459c:	6879      	ldr	r1, [r7, #4]
 c00459e:	6878      	ldr	r0, [r7, #4]
 c0045a0:	f7ff f961 	bl	c003866 <uECC_vli_modSub>
 c0045a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0045a6:	687a      	ldr	r2, [r7, #4]
 c0045a8:	68b9      	ldr	r1, [r7, #8]
 c0045aa:	68b8      	ldr	r0, [r7, #8]
 c0045ac:	f7ff facf 	bl	c003b4e <uECC_vli_modMult_fast>
 c0045b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0045b2:	1d19      	adds	r1, r3, #4
 c0045b4:	f107 0214 	add.w	r2, r7, #20
 c0045b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c0045bc:	9300      	str	r3, [sp, #0]
 c0045be:	460b      	mov	r3, r1
 c0045c0:	68f9      	ldr	r1, [r7, #12]
 c0045c2:	6878      	ldr	r0, [r7, #4]
 c0045c4:	f7ff f94f 	bl	c003866 <uECC_vli_modSub>
 c0045c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0045ca:	687a      	ldr	r2, [r7, #4]
 c0045cc:	6839      	ldr	r1, [r7, #0]
 c0045ce:	6838      	ldr	r0, [r7, #0]
 c0045d0:	f7ff fabd 	bl	c003b4e <uECC_vli_modMult_fast>
 c0045d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0045d6:	1d1a      	adds	r2, r3, #4
 c0045d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 c0045dc:	9300      	str	r3, [sp, #0]
 c0045de:	4613      	mov	r3, r2
 c0045e0:	68ba      	ldr	r2, [r7, #8]
 c0045e2:	6839      	ldr	r1, [r7, #0]
 c0045e4:	6838      	ldr	r0, [r7, #0]
 c0045e6:	f7ff f93e 	bl	c003866 <uECC_vli_modSub>
 c0045ea:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 c0045ee:	f107 0314 	add.w	r3, r7, #20
 c0045f2:	4619      	mov	r1, r3
 c0045f4:	6878      	ldr	r0, [r7, #4]
 c0045f6:	f7ff f81f 	bl	c003638 <uECC_vli_set>
 c0045fa:	bf00      	nop
 c0045fc:	3738      	adds	r7, #56	@ 0x38
 c0045fe:	46bd      	mov	sp, r7
 c004600:	bd80      	pop	{r7, pc}

0c004602 <XYcZ_addC>:
 c004602:	b590      	push	{r4, r7, lr}
 c004604:	b0a1      	sub	sp, #132	@ 0x84
 c004606:	af02      	add	r7, sp, #8
 c004608:	60f8      	str	r0, [r7, #12]
 c00460a:	60b9      	str	r1, [r7, #8]
 c00460c:	607a      	str	r2, [r7, #4]
 c00460e:	603b      	str	r3, [r7, #0]
 c004610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c004614:	781b      	ldrb	r3, [r3, #0]
 c004616:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 c00461a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c00461e:	1d1a      	adds	r2, r3, #4
 c004620:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 c004624:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c004628:	9300      	str	r3, [sp, #0]
 c00462a:	4613      	mov	r3, r2
 c00462c:	68fa      	ldr	r2, [r7, #12]
 c00462e:	6879      	ldr	r1, [r7, #4]
 c004630:	f7ff f919 	bl	c003866 <uECC_vli_modSub>
 c004634:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 c004638:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 c00463c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 c004640:	4618      	mov	r0, r3
 c004642:	f7ff faa0 	bl	c003b86 <uECC_vli_modSquare_fast>
 c004646:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 c00464a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c00464e:	68f9      	ldr	r1, [r7, #12]
 c004650:	68f8      	ldr	r0, [r7, #12]
 c004652:	f7ff fa7c 	bl	c003b4e <uECC_vli_modMult_fast>
 c004656:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 c00465a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c00465e:	6879      	ldr	r1, [r7, #4]
 c004660:	6878      	ldr	r0, [r7, #4]
 c004662:	f7ff fa74 	bl	c003b4e <uECC_vli_modMult_fast>
 c004666:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c00466a:	1d1a      	adds	r2, r3, #4
 c00466c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 c004670:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c004674:	9300      	str	r3, [sp, #0]
 c004676:	4613      	mov	r3, r2
 c004678:	68ba      	ldr	r2, [r7, #8]
 c00467a:	6839      	ldr	r1, [r7, #0]
 c00467c:	f7ff f8cc 	bl	c003818 <uECC_vli_modAdd>
 c004680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c004684:	1d1a      	adds	r2, r3, #4
 c004686:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c00468a:	9300      	str	r3, [sp, #0]
 c00468c:	4613      	mov	r3, r2
 c00468e:	68ba      	ldr	r2, [r7, #8]
 c004690:	6839      	ldr	r1, [r7, #0]
 c004692:	6838      	ldr	r0, [r7, #0]
 c004694:	f7ff f8e7 	bl	c003866 <uECC_vli_modSub>
 c004698:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c00469c:	1d1a      	adds	r2, r3, #4
 c00469e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 c0046a2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c0046a6:	9300      	str	r3, [sp, #0]
 c0046a8:	4613      	mov	r3, r2
 c0046aa:	68fa      	ldr	r2, [r7, #12]
 c0046ac:	6879      	ldr	r1, [r7, #4]
 c0046ae:	f7ff f8da 	bl	c003866 <uECC_vli_modSub>
 c0046b2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 c0046b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c0046ba:	68b9      	ldr	r1, [r7, #8]
 c0046bc:	68b8      	ldr	r0, [r7, #8]
 c0046be:	f7ff fa46 	bl	c003b4e <uECC_vli_modMult_fast>
 c0046c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c0046c6:	1d1a      	adds	r2, r3, #4
 c0046c8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 c0046cc:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c0046d0:	9300      	str	r3, [sp, #0]
 c0046d2:	4613      	mov	r3, r2
 c0046d4:	687a      	ldr	r2, [r7, #4]
 c0046d6:	68f9      	ldr	r1, [r7, #12]
 c0046d8:	f7ff f89e 	bl	c003818 <uECC_vli_modAdd>
 c0046dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 c0046e0:	6839      	ldr	r1, [r7, #0]
 c0046e2:	6878      	ldr	r0, [r7, #4]
 c0046e4:	f7ff fa4f 	bl	c003b86 <uECC_vli_modSquare_fast>
 c0046e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c0046ec:	1d19      	adds	r1, r3, #4
 c0046ee:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 c0046f2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c0046f6:	9300      	str	r3, [sp, #0]
 c0046f8:	460b      	mov	r3, r1
 c0046fa:	6879      	ldr	r1, [r7, #4]
 c0046fc:	6878      	ldr	r0, [r7, #4]
 c0046fe:	f7ff f8b2 	bl	c003866 <uECC_vli_modSub>
 c004702:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c004706:	1d1a      	adds	r2, r3, #4
 c004708:	f107 0014 	add.w	r0, r7, #20
 c00470c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c004710:	9300      	str	r3, [sp, #0]
 c004712:	4613      	mov	r3, r2
 c004714:	687a      	ldr	r2, [r7, #4]
 c004716:	68f9      	ldr	r1, [r7, #12]
 c004718:	f7ff f8a5 	bl	c003866 <uECC_vli_modSub>
 c00471c:	f107 0214 	add.w	r2, r7, #20
 c004720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c004724:	6839      	ldr	r1, [r7, #0]
 c004726:	6838      	ldr	r0, [r7, #0]
 c004728:	f7ff fa11 	bl	c003b4e <uECC_vli_modMult_fast>
 c00472c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c004730:	1d1a      	adds	r2, r3, #4
 c004732:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c004736:	9300      	str	r3, [sp, #0]
 c004738:	4613      	mov	r3, r2
 c00473a:	68ba      	ldr	r2, [r7, #8]
 c00473c:	6839      	ldr	r1, [r7, #0]
 c00473e:	6838      	ldr	r0, [r7, #0]
 c004740:	f7ff f891 	bl	c003866 <uECC_vli_modSub>
 c004744:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 c004748:	f107 0314 	add.w	r3, r7, #20
 c00474c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 c004750:	4618      	mov	r0, r3
 c004752:	f7ff fa18 	bl	c003b86 <uECC_vli_modSquare_fast>
 c004756:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c00475a:	1d1c      	adds	r4, r3, #4
 c00475c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 c004760:	f107 0114 	add.w	r1, r7, #20
 c004764:	f107 0014 	add.w	r0, r7, #20
 c004768:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c00476c:	9300      	str	r3, [sp, #0]
 c00476e:	4623      	mov	r3, r4
 c004770:	f7ff f879 	bl	c003866 <uECC_vli_modSub>
 c004774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c004778:	1d1a      	adds	r2, r3, #4
 c00477a:	f107 0114 	add.w	r1, r7, #20
 c00477e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 c004782:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c004786:	9300      	str	r3, [sp, #0]
 c004788:	4613      	mov	r3, r2
 c00478a:	68fa      	ldr	r2, [r7, #12]
 c00478c:	f7ff f86b 	bl	c003866 <uECC_vli_modSub>
 c004790:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 c004794:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 c004798:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 c00479c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c0047a0:	f7ff f9d5 	bl	c003b4e <uECC_vli_modMult_fast>
 c0047a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 c0047a8:	1d1a      	adds	r2, r3, #4
 c0047aa:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 c0047ae:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 c0047b2:	9300      	str	r3, [sp, #0]
 c0047b4:	4613      	mov	r3, r2
 c0047b6:	68ba      	ldr	r2, [r7, #8]
 c0047b8:	68b8      	ldr	r0, [r7, #8]
 c0047ba:	f7ff f854 	bl	c003866 <uECC_vli_modSub>
 c0047be:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 c0047c2:	f107 0314 	add.w	r3, r7, #20
 c0047c6:	4619      	mov	r1, r3
 c0047c8:	68f8      	ldr	r0, [r7, #12]
 c0047ca:	f7fe ff35 	bl	c003638 <uECC_vli_set>
 c0047ce:	bf00      	nop
 c0047d0:	377c      	adds	r7, #124	@ 0x7c
 c0047d2:	46bd      	mov	sp, r7
 c0047d4:	bd90      	pop	{r4, r7, pc}

0c0047d6 <EccPoint_mult>:
 c0047d6:	b590      	push	{r4, r7, lr}
 c0047d8:	b0b1      	sub	sp, #196	@ 0xc4
 c0047da:	af02      	add	r7, sp, #8
 c0047dc:	60f8      	str	r0, [r7, #12]
 c0047de:	60b9      	str	r1, [r7, #8]
 c0047e0:	607a      	str	r2, [r7, #4]
 c0047e2:	603b      	str	r3, [r7, #0]
 c0047e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0047e8:	781b      	ldrb	r3, [r3, #0]
 c0047ea:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
 c0047ee:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 c0047f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 c0047f6:	3320      	adds	r3, #32
 c0047f8:	68b9      	ldr	r1, [r7, #8]
 c0047fa:	4618      	mov	r0, r3
 c0047fc:	f7fe ff1c 	bl	c003638 <uECC_vli_set>
 c004800:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 c004804:	009b      	lsls	r3, r3, #2
 c004806:	68ba      	ldr	r2, [r7, #8]
 c004808:	18d1      	adds	r1, r2, r3
 c00480a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 c00480e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 c004812:	3320      	adds	r3, #32
 c004814:	4618      	mov	r0, r3
 c004816:	f7fe ff0f 	bl	c003638 <uECC_vli_set>
 c00481a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 c00481e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c004822:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 c004826:	f103 0120 	add.w	r1, r3, #32
 c00482a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 c00482e:	f103 0020 	add.w	r0, r3, #32
 c004832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004836:	9301      	str	r3, [sp, #4]
 c004838:	683b      	ldr	r3, [r7, #0]
 c00483a:	9300      	str	r3, [sp, #0]
 c00483c:	4623      	mov	r3, r4
 c00483e:	f7ff fe03 	bl	c004448 <XYcZ_initial_double>
 c004842:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 c004846:	3b02      	subs	r3, #2
 c004848:	b29b      	uxth	r3, r3
 c00484a:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 c00484e:	e059      	b.n	c004904 <EccPoint_mult+0x12e>
 c004850:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 c004854:	4619      	mov	r1, r3
 c004856:	6878      	ldr	r0, [r7, #4]
 c004858:	f7fe fe74 	bl	c003544 <uECC_vli_testBit>
 c00485c:	4603      	mov	r3, r0
 c00485e:	2b00      	cmp	r3, #0
 c004860:	bf0c      	ite	eq
 c004862:	2301      	moveq	r3, #1
 c004864:	2300      	movne	r3, #0
 c004866:	b2db      	uxtb	r3, r3
 c004868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 c00486c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004870:	f1c3 0301 	rsb	r3, r3, #1
 c004874:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c004878:	015b      	lsls	r3, r3, #5
 c00487a:	18d0      	adds	r0, r2, r3
 c00487c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004880:	f1c3 0301 	rsb	r3, r3, #1
 c004884:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c004888:	015b      	lsls	r3, r3, #5
 c00488a:	18d1      	adds	r1, r2, r3
 c00488c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c004890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004894:	015b      	lsls	r3, r3, #5
 c004896:	18d4      	adds	r4, r2, r3
 c004898:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c00489c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c0048a0:	015b      	lsls	r3, r3, #5
 c0048a2:	441a      	add	r2, r3
 c0048a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0048a8:	9300      	str	r3, [sp, #0]
 c0048aa:	4613      	mov	r3, r2
 c0048ac:	4622      	mov	r2, r4
 c0048ae:	f7ff fea8 	bl	c004602 <XYcZ_addC>
 c0048b2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c0048b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c0048ba:	015b      	lsls	r3, r3, #5
 c0048bc:	18d0      	adds	r0, r2, r3
 c0048be:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c0048c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c0048c6:	015b      	lsls	r3, r3, #5
 c0048c8:	18d1      	adds	r1, r2, r3
 c0048ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c0048ce:	f1c3 0301 	rsb	r3, r3, #1
 c0048d2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c0048d6:	015b      	lsls	r3, r3, #5
 c0048d8:	18d4      	adds	r4, r2, r3
 c0048da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c0048de:	f1c3 0301 	rsb	r3, r3, #1
 c0048e2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c0048e6:	015b      	lsls	r3, r3, #5
 c0048e8:	441a      	add	r2, r3
 c0048ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0048ee:	9300      	str	r3, [sp, #0]
 c0048f0:	4613      	mov	r3, r2
 c0048f2:	4622      	mov	r2, r4
 c0048f4:	f7ff fdf2 	bl	c0044dc <XYcZ_add>
 c0048f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 c0048fc:	3b01      	subs	r3, #1
 c0048fe:	b29b      	uxth	r3, r3
 c004900:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 c004904:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 c004908:	2b00      	cmp	r3, #0
 c00490a:	dca1      	bgt.n	c004850 <EccPoint_mult+0x7a>
 c00490c:	2100      	movs	r1, #0
 c00490e:	6878      	ldr	r0, [r7, #4]
 c004910:	f7fe fe18 	bl	c003544 <uECC_vli_testBit>
 c004914:	4603      	mov	r3, r0
 c004916:	2b00      	cmp	r3, #0
 c004918:	bf0c      	ite	eq
 c00491a:	2301      	moveq	r3, #1
 c00491c:	2300      	movne	r3, #0
 c00491e:	b2db      	uxtb	r3, r3
 c004920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 c004924:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004928:	f1c3 0301 	rsb	r3, r3, #1
 c00492c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c004930:	015b      	lsls	r3, r3, #5
 c004932:	18d0      	adds	r0, r2, r3
 c004934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004938:	f1c3 0301 	rsb	r3, r3, #1
 c00493c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c004940:	015b      	lsls	r3, r3, #5
 c004942:	18d1      	adds	r1, r2, r3
 c004944:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c004948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c00494c:	015b      	lsls	r3, r3, #5
 c00494e:	18d4      	adds	r4, r2, r3
 c004950:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c004954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004958:	015b      	lsls	r3, r3, #5
 c00495a:	441a      	add	r2, r3
 c00495c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004960:	9300      	str	r3, [sp, #0]
 c004962:	4613      	mov	r3, r2
 c004964:	4622      	mov	r2, r4
 c004966:	f7ff fe4c 	bl	c004602 <XYcZ_addC>
 c00496a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c00496e:	1d1c      	adds	r4, r3, #4
 c004970:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c004974:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 c004978:	f103 0120 	add.w	r1, r3, #32
 c00497c:	f107 0010 	add.w	r0, r7, #16
 c004980:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 c004984:	9300      	str	r3, [sp, #0]
 c004986:	4623      	mov	r3, r4
 c004988:	f7fe ff6d 	bl	c003866 <uECC_vli_modSub>
 c00498c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004990:	f1c3 0301 	rsb	r3, r3, #1
 c004994:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c004998:	015b      	lsls	r3, r3, #5
 c00499a:	441a      	add	r2, r3
 c00499c:	f107 0110 	add.w	r1, r7, #16
 c0049a0:	f107 0010 	add.w	r0, r7, #16
 c0049a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0049a8:	f7ff f8d1 	bl	c003b4e <uECC_vli_modMult_fast>
 c0049ac:	f107 0110 	add.w	r1, r7, #16
 c0049b0:	f107 0010 	add.w	r0, r7, #16
 c0049b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0049b8:	68ba      	ldr	r2, [r7, #8]
 c0049ba:	f7ff f8c8 	bl	c003b4e <uECC_vli_modMult_fast>
 c0049be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0049c2:	1d1a      	adds	r2, r3, #4
 c0049c4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 c0049c8:	f107 0110 	add.w	r1, r7, #16
 c0049cc:	f107 0010 	add.w	r0, r7, #16
 c0049d0:	f7ff f921 	bl	c003c16 <uECC_vli_modInv>
 c0049d4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 c0049d8:	009b      	lsls	r3, r3, #2
 c0049da:	68ba      	ldr	r2, [r7, #8]
 c0049dc:	441a      	add	r2, r3
 c0049de:	f107 0110 	add.w	r1, r7, #16
 c0049e2:	f107 0010 	add.w	r0, r7, #16
 c0049e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c0049ea:	f7ff f8b0 	bl	c003b4e <uECC_vli_modMult_fast>
 c0049ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c0049f2:	f1c3 0301 	rsb	r3, r3, #1
 c0049f6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c0049fa:	015b      	lsls	r3, r3, #5
 c0049fc:	441a      	add	r2, r3
 c0049fe:	f107 0110 	add.w	r1, r7, #16
 c004a02:	f107 0010 	add.w	r0, r7, #16
 c004a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004a0a:	f7ff f8a0 	bl	c003b4e <uECC_vli_modMult_fast>
 c004a0e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c004a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004a16:	015b      	lsls	r3, r3, #5
 c004a18:	18d0      	adds	r0, r2, r3
 c004a1a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c004a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004a22:	015b      	lsls	r3, r3, #5
 c004a24:	18d1      	adds	r1, r2, r3
 c004a26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004a2a:	f1c3 0301 	rsb	r3, r3, #1
 c004a2e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 c004a32:	015b      	lsls	r3, r3, #5
 c004a34:	18d4      	adds	r4, r2, r3
 c004a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 c004a3a:	f1c3 0301 	rsb	r3, r3, #1
 c004a3e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 c004a42:	015b      	lsls	r3, r3, #5
 c004a44:	441a      	add	r2, r3
 c004a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004a4a:	9300      	str	r3, [sp, #0]
 c004a4c:	4613      	mov	r3, r2
 c004a4e:	4622      	mov	r2, r4
 c004a50:	f7ff fd44 	bl	c0044dc <XYcZ_add>
 c004a54:	f107 0210 	add.w	r2, r7, #16
 c004a58:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 c004a5c:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 c004a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 c004a64:	f7ff fcc8 	bl	c0043f8 <apply_z>
 c004a68:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 c004a6c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 c004a70:	4619      	mov	r1, r3
 c004a72:	68f8      	ldr	r0, [r7, #12]
 c004a74:	f7fe fde0 	bl	c003638 <uECC_vli_set>
 c004a78:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 c004a7c:	009b      	lsls	r3, r3, #2
 c004a7e:	68fa      	ldr	r2, [r7, #12]
 c004a80:	4413      	add	r3, r2
 c004a82:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 c004a86:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 c004a8a:	4618      	mov	r0, r3
 c004a8c:	f7fe fdd4 	bl	c003638 <uECC_vli_set>
 c004a90:	bf00      	nop
 c004a92:	37bc      	adds	r7, #188	@ 0xbc
 c004a94:	46bd      	mov	sp, r7
 c004a96:	bd90      	pop	{r4, r7, pc}

0c004a98 <regularize_k>:
 c004a98:	b580      	push	{r7, lr}
 c004a9a:	b086      	sub	sp, #24
 c004a9c:	af00      	add	r7, sp, #0
 c004a9e:	60f8      	str	r0, [r7, #12]
 c004aa0:	60b9      	str	r1, [r7, #8]
 c004aa2:	607a      	str	r2, [r7, #4]
 c004aa4:	603b      	str	r3, [r7, #0]
 c004aa6:	683b      	ldr	r3, [r7, #0]
 c004aa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004aac:	331f      	adds	r3, #31
 c004aae:	2b00      	cmp	r3, #0
 c004ab0:	da00      	bge.n	c004ab4 <regularize_k+0x1c>
 c004ab2:	331f      	adds	r3, #31
 c004ab4:	115b      	asrs	r3, r3, #5
 c004ab6:	75fb      	strb	r3, [r7, #23]
 c004ab8:	683b      	ldr	r3, [r7, #0]
 c004aba:	885b      	ldrh	r3, [r3, #2]
 c004abc:	82bb      	strh	r3, [r7, #20]
 c004abe:	683b      	ldr	r3, [r7, #0]
 c004ac0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 c004ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c004ac8:	68f9      	ldr	r1, [r7, #12]
 c004aca:	68b8      	ldr	r0, [r7, #8]
 c004acc:	f7fe fc08 	bl	c0032e0 <uECC_vli_add>
 c004ad0:	4603      	mov	r3, r0
 c004ad2:	2b00      	cmp	r3, #0
 c004ad4:	d10f      	bne.n	c004af6 <regularize_k+0x5e>
 c004ad6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 c004ada:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c004ade:	015b      	lsls	r3, r3, #5
 c004ae0:	429a      	cmp	r2, r3
 c004ae2:	da0a      	bge.n	c004afa <regularize_k+0x62>
 c004ae4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 c004ae8:	4619      	mov	r1, r3
 c004aea:	68b8      	ldr	r0, [r7, #8]
 c004aec:	f7fe fd2a 	bl	c003544 <uECC_vli_testBit>
 c004af0:	4603      	mov	r3, r0
 c004af2:	2b00      	cmp	r3, #0
 c004af4:	d001      	beq.n	c004afa <regularize_k+0x62>
 c004af6:	2301      	movs	r3, #1
 c004af8:	e000      	b.n	c004afc <regularize_k+0x64>
 c004afa:	2300      	movs	r3, #0
 c004afc:	613b      	str	r3, [r7, #16]
 c004afe:	683b      	ldr	r3, [r7, #0]
 c004b00:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 c004b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c004b08:	68b9      	ldr	r1, [r7, #8]
 c004b0a:	6878      	ldr	r0, [r7, #4]
 c004b0c:	f7fe fbe8 	bl	c0032e0 <uECC_vli_add>
 c004b10:	693b      	ldr	r3, [r7, #16]
 c004b12:	4618      	mov	r0, r3
 c004b14:	3718      	adds	r7, #24
 c004b16:	46bd      	mov	sp, r7
 c004b18:	bd80      	pop	{r7, pc}
	...

0c004b1c <uECC_generate_random_int>:
 c004b1c:	b580      	push	{r7, lr}
 c004b1e:	b088      	sub	sp, #32
 c004b20:	af00      	add	r7, sp, #0
 c004b22:	60f8      	str	r0, [r7, #12]
 c004b24:	60b9      	str	r1, [r7, #8]
 c004b26:	4613      	mov	r3, r2
 c004b28:	71fb      	strb	r3, [r7, #7]
 c004b2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c004b2e:	61bb      	str	r3, [r7, #24]
 c004b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004b34:	4619      	mov	r1, r3
 c004b36:	68b8      	ldr	r0, [r7, #8]
 c004b38:	f7fe fd44 	bl	c0035c4 <uECC_vli_numBits>
 c004b3c:	4603      	mov	r3, r0
 c004b3e:	82fb      	strh	r3, [r7, #22]
 c004b40:	4b2a      	ldr	r3, [pc, #168]	@ (c004bec <uECC_generate_random_int+0xd0>)
 c004b42:	681b      	ldr	r3, [r3, #0]
 c004b44:	2b00      	cmp	r3, #0
 c004b46:	d101      	bne.n	c004b4c <uECC_generate_random_int+0x30>
 c004b48:	2300      	movs	r3, #0
 c004b4a:	e04b      	b.n	c004be4 <uECC_generate_random_int+0xc8>
 c004b4c:	2300      	movs	r3, #0
 c004b4e:	61fb      	str	r3, [r7, #28]
 c004b50:	e044      	b.n	c004bdc <uECC_generate_random_int+0xc0>
 c004b52:	4b26      	ldr	r3, [pc, #152]	@ (c004bec <uECC_generate_random_int+0xd0>)
 c004b54:	681b      	ldr	r3, [r3, #0]
 c004b56:	f997 2007 	ldrsb.w	r2, [r7, #7]
 c004b5a:	0092      	lsls	r2, r2, #2
 c004b5c:	4611      	mov	r1, r2
 c004b5e:	68f8      	ldr	r0, [r7, #12]
 c004b60:	4798      	blx	r3
 c004b62:	4603      	mov	r3, r0
 c004b64:	2b00      	cmp	r3, #0
 c004b66:	d101      	bne.n	c004b6c <uECC_generate_random_int+0x50>
 c004b68:	2300      	movs	r3, #0
 c004b6a:	e03b      	b.n	c004be4 <uECC_generate_random_int+0xc8>
 c004b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004b70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c004b74:	3b01      	subs	r3, #1
 c004b76:	009b      	lsls	r3, r3, #2
 c004b78:	68fa      	ldr	r2, [r7, #12]
 c004b7a:	4413      	add	r3, r2
 c004b7c:	6819      	ldr	r1, [r3, #0]
 c004b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004b82:	b29b      	uxth	r3, r3
 c004b84:	015b      	lsls	r3, r3, #5
 c004b86:	b29a      	uxth	r2, r3
 c004b88:	8afb      	ldrh	r3, [r7, #22]
 c004b8a:	1ad3      	subs	r3, r2, r3
 c004b8c:	b29b      	uxth	r3, r3
 c004b8e:	b21b      	sxth	r3, r3
 c004b90:	461a      	mov	r2, r3
 c004b92:	69bb      	ldr	r3, [r7, #24]
 c004b94:	fa23 f202 	lsr.w	r2, r3, r2
 c004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004b9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 c004ba0:	3b01      	subs	r3, #1
 c004ba2:	009b      	lsls	r3, r3, #2
 c004ba4:	68f8      	ldr	r0, [r7, #12]
 c004ba6:	4403      	add	r3, r0
 c004ba8:	400a      	ands	r2, r1
 c004baa:	601a      	str	r2, [r3, #0]
 c004bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004bb0:	4619      	mov	r1, r3
 c004bb2:	68f8      	ldr	r0, [r7, #12]
 c004bb4:	f7fe fc9c 	bl	c0034f0 <uECC_vli_isZero>
 c004bb8:	4603      	mov	r3, r0
 c004bba:	2b00      	cmp	r3, #0
 c004bbc:	d10b      	bne.n	c004bd6 <uECC_generate_random_int+0xba>
 c004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004bc2:	461a      	mov	r2, r3
 c004bc4:	68f9      	ldr	r1, [r7, #12]
 c004bc6:	68b8      	ldr	r0, [r7, #8]
 c004bc8:	f7fe fdcb 	bl	c003762 <uECC_vli_cmp>
 c004bcc:	4603      	mov	r3, r0
 c004bce:	2b01      	cmp	r3, #1
 c004bd0:	d101      	bne.n	c004bd6 <uECC_generate_random_int+0xba>
 c004bd2:	2301      	movs	r3, #1
 c004bd4:	e006      	b.n	c004be4 <uECC_generate_random_int+0xc8>
 c004bd6:	69fb      	ldr	r3, [r7, #28]
 c004bd8:	3301      	adds	r3, #1
 c004bda:	61fb      	str	r3, [r7, #28]
 c004bdc:	69fb      	ldr	r3, [r7, #28]
 c004bde:	2b3f      	cmp	r3, #63	@ 0x3f
 c004be0:	d9b7      	bls.n	c004b52 <uECC_generate_random_int+0x36>
 c004be2:	2300      	movs	r3, #0
 c004be4:	4618      	mov	r0, r3
 c004be6:	3720      	adds	r7, #32
 c004be8:	46bd      	mov	sp, r7
 c004bea:	bd80      	pop	{r7, pc}
 c004bec:	30000614 	.word	0x30000614

0c004bf0 <uECC_vli_nativeToBytes>:
 c004bf0:	b480      	push	{r7}
 c004bf2:	b087      	sub	sp, #28
 c004bf4:	af00      	add	r7, sp, #0
 c004bf6:	60f8      	str	r0, [r7, #12]
 c004bf8:	60b9      	str	r1, [r7, #8]
 c004bfa:	607a      	str	r2, [r7, #4]
 c004bfc:	2300      	movs	r3, #0
 c004bfe:	617b      	str	r3, [r7, #20]
 c004c00:	e018      	b.n	c004c34 <uECC_vli_nativeToBytes+0x44>
 c004c02:	68bb      	ldr	r3, [r7, #8]
 c004c04:	1e5a      	subs	r2, r3, #1
 c004c06:	697b      	ldr	r3, [r7, #20]
 c004c08:	1ad3      	subs	r3, r2, r3
 c004c0a:	613b      	str	r3, [r7, #16]
 c004c0c:	693b      	ldr	r3, [r7, #16]
 c004c0e:	f023 0303 	bic.w	r3, r3, #3
 c004c12:	687a      	ldr	r2, [r7, #4]
 c004c14:	4413      	add	r3, r2
 c004c16:	681a      	ldr	r2, [r3, #0]
 c004c18:	693b      	ldr	r3, [r7, #16]
 c004c1a:	f003 0303 	and.w	r3, r3, #3
 c004c1e:	00db      	lsls	r3, r3, #3
 c004c20:	fa22 f103 	lsr.w	r1, r2, r3
 c004c24:	697b      	ldr	r3, [r7, #20]
 c004c26:	68fa      	ldr	r2, [r7, #12]
 c004c28:	4413      	add	r3, r2
 c004c2a:	b2ca      	uxtb	r2, r1
 c004c2c:	701a      	strb	r2, [r3, #0]
 c004c2e:	697b      	ldr	r3, [r7, #20]
 c004c30:	3301      	adds	r3, #1
 c004c32:	617b      	str	r3, [r7, #20]
 c004c34:	697a      	ldr	r2, [r7, #20]
 c004c36:	68bb      	ldr	r3, [r7, #8]
 c004c38:	429a      	cmp	r2, r3
 c004c3a:	dbe2      	blt.n	c004c02 <uECC_vli_nativeToBytes+0x12>
 c004c3c:	bf00      	nop
 c004c3e:	bf00      	nop
 c004c40:	371c      	adds	r7, #28
 c004c42:	46bd      	mov	sp, r7
 c004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004c48:	4770      	bx	lr

0c004c4a <uECC_vli_bytesToNative>:
 c004c4a:	b580      	push	{r7, lr}
 c004c4c:	b086      	sub	sp, #24
 c004c4e:	af00      	add	r7, sp, #0
 c004c50:	60f8      	str	r0, [r7, #12]
 c004c52:	60b9      	str	r1, [r7, #8]
 c004c54:	607a      	str	r2, [r7, #4]
 c004c56:	687b      	ldr	r3, [r7, #4]
 c004c58:	3303      	adds	r3, #3
 c004c5a:	2b00      	cmp	r3, #0
 c004c5c:	da00      	bge.n	c004c60 <uECC_vli_bytesToNative+0x16>
 c004c5e:	3303      	adds	r3, #3
 c004c60:	109b      	asrs	r3, r3, #2
 c004c62:	b25b      	sxtb	r3, r3
 c004c64:	4619      	mov	r1, r3
 c004c66:	68f8      	ldr	r0, [r7, #12]
 c004c68:	f7fe fc21 	bl	c0034ae <uECC_vli_clear>
 c004c6c:	2300      	movs	r3, #0
 c004c6e:	617b      	str	r3, [r7, #20]
 c004c70:	e01e      	b.n	c004cb0 <uECC_vli_bytesToNative+0x66>
 c004c72:	687b      	ldr	r3, [r7, #4]
 c004c74:	1e5a      	subs	r2, r3, #1
 c004c76:	697b      	ldr	r3, [r7, #20]
 c004c78:	1ad3      	subs	r3, r2, r3
 c004c7a:	613b      	str	r3, [r7, #16]
 c004c7c:	693b      	ldr	r3, [r7, #16]
 c004c7e:	f023 0303 	bic.w	r3, r3, #3
 c004c82:	68fa      	ldr	r2, [r7, #12]
 c004c84:	4413      	add	r3, r2
 c004c86:	6819      	ldr	r1, [r3, #0]
 c004c88:	697b      	ldr	r3, [r7, #20]
 c004c8a:	68ba      	ldr	r2, [r7, #8]
 c004c8c:	4413      	add	r3, r2
 c004c8e:	781b      	ldrb	r3, [r3, #0]
 c004c90:	461a      	mov	r2, r3
 c004c92:	693b      	ldr	r3, [r7, #16]
 c004c94:	f003 0303 	and.w	r3, r3, #3
 c004c98:	00db      	lsls	r3, r3, #3
 c004c9a:	409a      	lsls	r2, r3
 c004c9c:	693b      	ldr	r3, [r7, #16]
 c004c9e:	f023 0303 	bic.w	r3, r3, #3
 c004ca2:	68f8      	ldr	r0, [r7, #12]
 c004ca4:	4403      	add	r3, r0
 c004ca6:	430a      	orrs	r2, r1
 c004ca8:	601a      	str	r2, [r3, #0]
 c004caa:	697b      	ldr	r3, [r7, #20]
 c004cac:	3301      	adds	r3, #1
 c004cae:	617b      	str	r3, [r7, #20]
 c004cb0:	697a      	ldr	r2, [r7, #20]
 c004cb2:	687b      	ldr	r3, [r7, #4]
 c004cb4:	429a      	cmp	r2, r3
 c004cb6:	dbdc      	blt.n	c004c72 <uECC_vli_bytesToNative+0x28>
 c004cb8:	bf00      	nop
 c004cba:	bf00      	nop
 c004cbc:	3718      	adds	r7, #24
 c004cbe:	46bd      	mov	sp, r7
 c004cc0:	bd80      	pop	{r7, pc}

0c004cc2 <bits2int>:
 c004cc2:	b580      	push	{r7, lr}
 c004cc4:	b08a      	sub	sp, #40	@ 0x28
 c004cc6:	af00      	add	r7, sp, #0
 c004cc8:	60f8      	str	r0, [r7, #12]
 c004cca:	60b9      	str	r1, [r7, #8]
 c004ccc:	607a      	str	r2, [r7, #4]
 c004cce:	603b      	str	r3, [r7, #0]
 c004cd0:	683b      	ldr	r3, [r7, #0]
 c004cd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004cd6:	3307      	adds	r3, #7
 c004cd8:	2b00      	cmp	r3, #0
 c004cda:	da00      	bge.n	c004cde <bits2int+0x1c>
 c004cdc:	3307      	adds	r3, #7
 c004cde:	10db      	asrs	r3, r3, #3
 c004ce0:	61fb      	str	r3, [r7, #28]
 c004ce2:	683b      	ldr	r3, [r7, #0]
 c004ce4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004ce8:	331f      	adds	r3, #31
 c004cea:	2b00      	cmp	r3, #0
 c004cec:	da00      	bge.n	c004cf0 <bits2int+0x2e>
 c004cee:	331f      	adds	r3, #31
 c004cf0:	115b      	asrs	r3, r3, #5
 c004cf2:	61bb      	str	r3, [r7, #24]
 c004cf4:	687a      	ldr	r2, [r7, #4]
 c004cf6:	69fb      	ldr	r3, [r7, #28]
 c004cf8:	429a      	cmp	r2, r3
 c004cfa:	d901      	bls.n	c004d00 <bits2int+0x3e>
 c004cfc:	69fb      	ldr	r3, [r7, #28]
 c004cfe:	607b      	str	r3, [r7, #4]
 c004d00:	69bb      	ldr	r3, [r7, #24]
 c004d02:	b25b      	sxtb	r3, r3
 c004d04:	4619      	mov	r1, r3
 c004d06:	68f8      	ldr	r0, [r7, #12]
 c004d08:	f7fe fbd1 	bl	c0034ae <uECC_vli_clear>
 c004d0c:	687b      	ldr	r3, [r7, #4]
 c004d0e:	461a      	mov	r2, r3
 c004d10:	68b9      	ldr	r1, [r7, #8]
 c004d12:	68f8      	ldr	r0, [r7, #12]
 c004d14:	f7ff ff99 	bl	c004c4a <uECC_vli_bytesToNative>
 c004d18:	687b      	ldr	r3, [r7, #4]
 c004d1a:	00db      	lsls	r3, r3, #3
 c004d1c:	683a      	ldr	r2, [r7, #0]
 c004d1e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c004d22:	4293      	cmp	r3, r2
 c004d24:	d93a      	bls.n	c004d9c <bits2int+0xda>
 c004d26:	687b      	ldr	r3, [r7, #4]
 c004d28:	00db      	lsls	r3, r3, #3
 c004d2a:	683a      	ldr	r2, [r7, #0]
 c004d2c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c004d30:	1a9b      	subs	r3, r3, r2
 c004d32:	617b      	str	r3, [r7, #20]
 c004d34:	2300      	movs	r3, #0
 c004d36:	627b      	str	r3, [r7, #36]	@ 0x24
 c004d38:	69bb      	ldr	r3, [r7, #24]
 c004d3a:	009b      	lsls	r3, r3, #2
 c004d3c:	68fa      	ldr	r2, [r7, #12]
 c004d3e:	4413      	add	r3, r2
 c004d40:	623b      	str	r3, [r7, #32]
 c004d42:	e010      	b.n	c004d66 <bits2int+0xa4>
 c004d44:	6a3b      	ldr	r3, [r7, #32]
 c004d46:	681b      	ldr	r3, [r3, #0]
 c004d48:	613b      	str	r3, [r7, #16]
 c004d4a:	693a      	ldr	r2, [r7, #16]
 c004d4c:	697b      	ldr	r3, [r7, #20]
 c004d4e:	40da      	lsrs	r2, r3
 c004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c004d52:	431a      	orrs	r2, r3
 c004d54:	6a3b      	ldr	r3, [r7, #32]
 c004d56:	601a      	str	r2, [r3, #0]
 c004d58:	697b      	ldr	r3, [r7, #20]
 c004d5a:	f1c3 0320 	rsb	r3, r3, #32
 c004d5e:	693a      	ldr	r2, [r7, #16]
 c004d60:	fa02 f303 	lsl.w	r3, r2, r3
 c004d64:	627b      	str	r3, [r7, #36]	@ 0x24
 c004d66:	6a3b      	ldr	r3, [r7, #32]
 c004d68:	1f1a      	subs	r2, r3, #4
 c004d6a:	623a      	str	r2, [r7, #32]
 c004d6c:	68fa      	ldr	r2, [r7, #12]
 c004d6e:	429a      	cmp	r2, r3
 c004d70:	d3e8      	bcc.n	c004d44 <bits2int+0x82>
 c004d72:	683b      	ldr	r3, [r7, #0]
 c004d74:	3324      	adds	r3, #36	@ 0x24
 c004d76:	69ba      	ldr	r2, [r7, #24]
 c004d78:	b252      	sxtb	r2, r2
 c004d7a:	68f9      	ldr	r1, [r7, #12]
 c004d7c:	4618      	mov	r0, r3
 c004d7e:	f7fe fc82 	bl	c003686 <uECC_vli_cmp_unsafe>
 c004d82:	4603      	mov	r3, r0
 c004d84:	2b01      	cmp	r3, #1
 c004d86:	d00a      	beq.n	c004d9e <bits2int+0xdc>
 c004d88:	683b      	ldr	r3, [r7, #0]
 c004d8a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 c004d8e:	69bb      	ldr	r3, [r7, #24]
 c004d90:	b25b      	sxtb	r3, r3
 c004d92:	68f9      	ldr	r1, [r7, #12]
 c004d94:	68f8      	ldr	r0, [r7, #12]
 c004d96:	f7fe faeb 	bl	c003370 <uECC_vli_sub>
 c004d9a:	e000      	b.n	c004d9e <bits2int+0xdc>
 c004d9c:	bf00      	nop
 c004d9e:	3728      	adds	r7, #40	@ 0x28
 c004da0:	46bd      	mov	sp, r7
 c004da2:	bd80      	pop	{r7, pc}

0c004da4 <uECC_sign_with_k_internal>:
 c004da4:	b590      	push	{r4, r7, lr}
 c004da6:	b0ad      	sub	sp, #180	@ 0xb4
 c004da8:	af02      	add	r7, sp, #8
 c004daa:	60f8      	str	r0, [r7, #12]
 c004dac:	60b9      	str	r1, [r7, #8]
 c004dae:	607a      	str	r2, [r7, #4]
 c004db0:	603b      	str	r3, [r7, #0]
 c004db2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 c004db6:	657b      	str	r3, [r7, #84]	@ 0x54
 c004db8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 c004dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 c004dbe:	2300      	movs	r3, #0
 c004dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 c004dc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004dc8:	781b      	ldrb	r3, [r3, #0]
 c004dca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 c004dce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004dd6:	331f      	adds	r3, #31
 c004dd8:	2b00      	cmp	r3, #0
 c004dda:	da00      	bge.n	c004dde <uECC_sign_with_k_internal+0x3a>
 c004ddc:	331f      	adds	r3, #31
 c004dde:	115b      	asrs	r3, r3, #5
 c004de0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 c004de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004de8:	885b      	ldrh	r3, [r3, #2]
 c004dea:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 c004dee:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 c004df2:	4619      	mov	r1, r3
 c004df4:	6838      	ldr	r0, [r7, #0]
 c004df6:	f7fe fb7b 	bl	c0034f0 <uECC_vli_isZero>
 c004dfa:	4603      	mov	r3, r0
 c004dfc:	2b00      	cmp	r3, #0
 c004dfe:	d10b      	bne.n	c004e18 <uECC_sign_with_k_internal+0x74>
 c004e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004e04:	3324      	adds	r3, #36	@ 0x24
 c004e06:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 c004e0a:	6839      	ldr	r1, [r7, #0]
 c004e0c:	4618      	mov	r0, r3
 c004e0e:	f7fe fca8 	bl	c003762 <uECC_vli_cmp>
 c004e12:	4603      	mov	r3, r0
 c004e14:	2b01      	cmp	r3, #1
 c004e16:	d001      	beq.n	c004e1c <uECC_sign_with_k_internal+0x78>
 c004e18:	2300      	movs	r3, #0
 c004e1a:	e128      	b.n	c00506e <uECC_sign_with_k_internal+0x2ca>
 c004e1c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 c004e20:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 c004e24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004e28:	6838      	ldr	r0, [r7, #0]
 c004e2a:	f7ff fe35 	bl	c004a98 <regularize_k>
 c004e2e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 c004e32:	4b91      	ldr	r3, [pc, #580]	@ (c005078 <uECC_sign_with_k_internal+0x2d4>)
 c004e34:	681b      	ldr	r3, [r3, #0]
 c004e36:	2b00      	cmp	r3, #0
 c004e38:	d01c      	beq.n	c004e74 <uECC_sign_with_k_internal+0xd0>
 c004e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 c004e3e:	009b      	lsls	r3, r3, #2
 c004e40:	33a8      	adds	r3, #168	@ 0xa8
 c004e42:	443b      	add	r3, r7
 c004e44:	f853 0c54 	ldr.w	r0, [r3, #-84]
 c004e48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004e4c:	3304      	adds	r3, #4
 c004e4e:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 c004e52:	4619      	mov	r1, r3
 c004e54:	f7ff fe62 	bl	c004b1c <uECC_generate_random_int>
 c004e58:	4603      	mov	r3, r0
 c004e5a:	2b00      	cmp	r3, #0
 c004e5c:	d101      	bne.n	c004e62 <uECC_sign_with_k_internal+0xbe>
 c004e5e:	2300      	movs	r3, #0
 c004e60:	e105      	b.n	c00506e <uECC_sign_with_k_internal+0x2ca>
 c004e62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 c004e66:	009b      	lsls	r3, r3, #2
 c004e68:	33a8      	adds	r3, #168	@ 0xa8
 c004e6a:	443b      	add	r3, r7
 c004e6c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 c004e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 c004e74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004e78:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 c004e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 c004e80:	2b00      	cmp	r3, #0
 c004e82:	bf0c      	ite	eq
 c004e84:	2301      	moveq	r3, #1
 c004e86:	2300      	movne	r3, #0
 c004e88:	b2db      	uxtb	r3, r3
 c004e8a:	009b      	lsls	r3, r3, #2
 c004e8c:	33a8      	adds	r3, #168	@ 0xa8
 c004e8e:	443b      	add	r3, r7
 c004e90:	f853 4c54 	ldr.w	r4, [r3, #-84]
 c004e94:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 c004e98:	3301      	adds	r3, #1
 c004e9a:	b29b      	uxth	r3, r3
 c004e9c:	b21b      	sxth	r3, r3
 c004e9e:	f107 0014 	add.w	r0, r7, #20
 c004ea2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 c004ea6:	9201      	str	r2, [sp, #4]
 c004ea8:	9300      	str	r3, [sp, #0]
 c004eaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 c004eae:	4622      	mov	r2, r4
 c004eb0:	f7ff fc91 	bl	c0047d6 <EccPoint_mult>
 c004eb4:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 c004eb8:	f107 0314 	add.w	r3, r7, #20
 c004ebc:	4611      	mov	r1, r2
 c004ebe:	4618      	mov	r0, r3
 c004ec0:	f7fe fb16 	bl	c0034f0 <uECC_vli_isZero>
 c004ec4:	4603      	mov	r3, r0
 c004ec6:	2b00      	cmp	r3, #0
 c004ec8:	d001      	beq.n	c004ece <uECC_sign_with_k_internal+0x12a>
 c004eca:	2300      	movs	r3, #0
 c004ecc:	e0cf      	b.n	c00506e <uECC_sign_with_k_internal+0x2ca>
 c004ece:	4b6a      	ldr	r3, [pc, #424]	@ (c005078 <uECC_sign_with_k_internal+0x2d4>)
 c004ed0:	681b      	ldr	r3, [r3, #0]
 c004ed2:	2b00      	cmp	r3, #0
 c004ed4:	d10a      	bne.n	c004eec <uECC_sign_with_k_internal+0x148>
 c004ed6:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 c004eda:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 c004ede:	4611      	mov	r1, r2
 c004ee0:	4618      	mov	r0, r3
 c004ee2:	f7fe fae4 	bl	c0034ae <uECC_vli_clear>
 c004ee6:	2301      	movs	r3, #1
 c004ee8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 c004eea:	e00f      	b.n	c004f0c <uECC_sign_with_k_internal+0x168>
 c004eec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004ef0:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 c004ef4:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 c004ef8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 c004efc:	4618      	mov	r0, r3
 c004efe:	f7ff fe0d 	bl	c004b1c <uECC_generate_random_int>
 c004f02:	4603      	mov	r3, r0
 c004f04:	2b00      	cmp	r3, #0
 c004f06:	d101      	bne.n	c004f0c <uECC_sign_with_k_internal+0x168>
 c004f08:	2300      	movs	r3, #0
 c004f0a:	e0b0      	b.n	c00506e <uECC_sign_with_k_internal+0x2ca>
 c004f0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004f10:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 c004f14:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 c004f18:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 c004f1c:	9300      	str	r3, [sp, #0]
 c004f1e:	460b      	mov	r3, r1
 c004f20:	6839      	ldr	r1, [r7, #0]
 c004f22:	6838      	ldr	r0, [r7, #0]
 c004f24:	f7fe fdf8 	bl	c003b18 <uECC_vli_modMult>
 c004f28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004f2c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 c004f30:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 c004f34:	6839      	ldr	r1, [r7, #0]
 c004f36:	6838      	ldr	r0, [r7, #0]
 c004f38:	f7fe fe6d 	bl	c003c16 <uECC_vli_modInv>
 c004f3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004f40:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 c004f44:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 c004f48:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 c004f4c:	9300      	str	r3, [sp, #0]
 c004f4e:	460b      	mov	r3, r1
 c004f50:	6839      	ldr	r1, [r7, #0]
 c004f52:	6838      	ldr	r0, [r7, #0]
 c004f54:	f7fe fde0 	bl	c003b18 <uECC_vli_modMult>
 c004f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004f5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004f60:	4619      	mov	r1, r3
 c004f62:	f107 0314 	add.w	r3, r7, #20
 c004f66:	461a      	mov	r2, r3
 c004f68:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 c004f6c:	f7ff fe40 	bl	c004bf0 <uECC_vli_nativeToBytes>
 c004f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004f78:	3307      	adds	r3, #7
 c004f7a:	2b00      	cmp	r3, #0
 c004f7c:	da00      	bge.n	c004f80 <uECC_sign_with_k_internal+0x1dc>
 c004f7e:	3307      	adds	r3, #7
 c004f80:	10db      	asrs	r3, r3, #3
 c004f82:	461a      	mov	r2, r3
 c004f84:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 c004f88:	68f9      	ldr	r1, [r7, #12]
 c004f8a:	4618      	mov	r0, r3
 c004f8c:	f7ff fe5d 	bl	c004c4a <uECC_vli_bytesToNative>
 c004f90:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 c004f94:	3b01      	subs	r3, #1
 c004f96:	009b      	lsls	r3, r3, #2
 c004f98:	33a8      	adds	r3, #168	@ 0xa8
 c004f9a:	443b      	add	r3, r7
 c004f9c:	2200      	movs	r2, #0
 c004f9e:	f843 2c4c 	str.w	r2, [r3, #-76]
 c004fa2:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 c004fa6:	f107 0114 	add.w	r1, r7, #20
 c004faa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 c004fae:	4618      	mov	r0, r3
 c004fb0:	f7fe fb42 	bl	c003638 <uECC_vli_set>
 c004fb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004fb8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 c004fbc:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 c004fc0:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 c004fc4:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 c004fc8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 c004fcc:	9300      	str	r3, [sp, #0]
 c004fce:	4623      	mov	r3, r4
 c004fd0:	f7fe fda2 	bl	c003b18 <uECC_vli_modMult>
 c004fd4:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 c004fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004fdc:	687a      	ldr	r2, [r7, #4]
 c004fde:	68b9      	ldr	r1, [r7, #8]
 c004fe0:	f7ff fe6f 	bl	c004cc2 <bits2int>
 c004fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c004fe8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 c004fec:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 c004ff0:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 c004ff4:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 c004ff8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 c004ffc:	9300      	str	r3, [sp, #0]
 c004ffe:	4623      	mov	r3, r4
 c005000:	f7fe fc0a 	bl	c003818 <uECC_vli_modAdd>
 c005004:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c005008:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 c00500c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 c005010:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 c005014:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 c005018:	9300      	str	r3, [sp, #0]
 c00501a:	4613      	mov	r3, r2
 c00501c:	683a      	ldr	r2, [r7, #0]
 c00501e:	f7fe fd7b 	bl	c003b18 <uECC_vli_modMult>
 c005022:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 c005026:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 c00502a:	4611      	mov	r1, r2
 c00502c:	4618      	mov	r0, r3
 c00502e:	f7fe fac9 	bl	c0035c4 <uECC_vli_numBits>
 c005032:	4603      	mov	r3, r0
 c005034:	461a      	mov	r2, r3
 c005036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c00503a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c00503e:	00db      	lsls	r3, r3, #3
 c005040:	429a      	cmp	r2, r3
 c005042:	dd01      	ble.n	c005048 <uECC_sign_with_k_internal+0x2a4>
 c005044:	2300      	movs	r3, #0
 c005046:	e012      	b.n	c00506e <uECC_sign_with_k_internal+0x2ca>
 c005048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c00504c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c005050:	461a      	mov	r2, r3
 c005052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 c005056:	1898      	adds	r0, r3, r2
 c005058:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 c00505c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c005060:	4619      	mov	r1, r3
 c005062:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 c005066:	461a      	mov	r2, r3
 c005068:	f7ff fdc2 	bl	c004bf0 <uECC_vli_nativeToBytes>
 c00506c:	2301      	movs	r3, #1
 c00506e:	4618      	mov	r0, r3
 c005070:	37ac      	adds	r7, #172	@ 0xac
 c005072:	46bd      	mov	sp, r7
 c005074:	bd90      	pop	{r4, r7, pc}
 c005076:	bf00      	nop
 c005078:	30000614 	.word	0x30000614

0c00507c <uECC_sign>:
 c00507c:	b580      	push	{r7, lr}
 c00507e:	b090      	sub	sp, #64	@ 0x40
 c005080:	af02      	add	r7, sp, #8
 c005082:	60f8      	str	r0, [r7, #12]
 c005084:	60b9      	str	r1, [r7, #8]
 c005086:	607a      	str	r2, [r7, #4]
 c005088:	603b      	str	r3, [r7, #0]
 c00508a:	2300      	movs	r3, #0
 c00508c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00508e:	e029      	b.n	c0050e4 <uECC_sign+0x68>
 c005090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c005092:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 c005096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c005098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c00509c:	331f      	adds	r3, #31
 c00509e:	2b00      	cmp	r3, #0
 c0050a0:	da00      	bge.n	c0050a4 <uECC_sign+0x28>
 c0050a2:	331f      	adds	r3, #31
 c0050a4:	115b      	asrs	r3, r3, #5
 c0050a6:	b25a      	sxtb	r2, r3
 c0050a8:	f107 0314 	add.w	r3, r7, #20
 c0050ac:	4618      	mov	r0, r3
 c0050ae:	f7ff fd35 	bl	c004b1c <uECC_generate_random_int>
 c0050b2:	4603      	mov	r3, r0
 c0050b4:	2b00      	cmp	r3, #0
 c0050b6:	d101      	bne.n	c0050bc <uECC_sign+0x40>
 c0050b8:	2300      	movs	r3, #0
 c0050ba:	e017      	b.n	c0050ec <uECC_sign+0x70>
 c0050bc:	f107 0214 	add.w	r2, r7, #20
 c0050c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0050c2:	9301      	str	r3, [sp, #4]
 c0050c4:	683b      	ldr	r3, [r7, #0]
 c0050c6:	9300      	str	r3, [sp, #0]
 c0050c8:	4613      	mov	r3, r2
 c0050ca:	687a      	ldr	r2, [r7, #4]
 c0050cc:	68b9      	ldr	r1, [r7, #8]
 c0050ce:	68f8      	ldr	r0, [r7, #12]
 c0050d0:	f7ff fe68 	bl	c004da4 <uECC_sign_with_k_internal>
 c0050d4:	4603      	mov	r3, r0
 c0050d6:	2b00      	cmp	r3, #0
 c0050d8:	d001      	beq.n	c0050de <uECC_sign+0x62>
 c0050da:	2301      	movs	r3, #1
 c0050dc:	e006      	b.n	c0050ec <uECC_sign+0x70>
 c0050de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c0050e0:	3301      	adds	r3, #1
 c0050e2:	637b      	str	r3, [r7, #52]	@ 0x34
 c0050e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c0050e6:	2b3f      	cmp	r3, #63	@ 0x3f
 c0050e8:	d9d2      	bls.n	c005090 <uECC_sign+0x14>
 c0050ea:	2300      	movs	r3, #0
 c0050ec:	4618      	mov	r0, r3
 c0050ee:	3738      	adds	r7, #56	@ 0x38
 c0050f0:	46bd      	mov	sp, r7
 c0050f2:	bd80      	pop	{r7, pc}

0c0050f4 <smax>:
 c0050f4:	b480      	push	{r7}
 c0050f6:	b083      	sub	sp, #12
 c0050f8:	af00      	add	r7, sp, #0
 c0050fa:	4603      	mov	r3, r0
 c0050fc:	460a      	mov	r2, r1
 c0050fe:	80fb      	strh	r3, [r7, #6]
 c005100:	4613      	mov	r3, r2
 c005102:	80bb      	strh	r3, [r7, #4]
 c005104:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 c005108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c00510c:	4293      	cmp	r3, r2
 c00510e:	bfb8      	it	lt
 c005110:	4613      	movlt	r3, r2
 c005112:	b21b      	sxth	r3, r3
 c005114:	4618      	mov	r0, r3
 c005116:	370c      	adds	r7, #12
 c005118:	46bd      	mov	sp, r7
 c00511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00511e:	4770      	bx	lr

0c005120 <uECC_verify>:
 c005120:	b590      	push	{r4, r7, lr}
 c005122:	b0ff      	sub	sp, #508	@ 0x1fc
 c005124:	af02      	add	r7, sp, #8
 c005126:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 c00512a:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 c00512e:	6020      	str	r0, [r4, #0]
 c005130:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 c005134:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 c005138:	6001      	str	r1, [r0, #0]
 c00513a:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 c00513e:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 c005142:	600a      	str	r2, [r1, #0]
 c005144:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 c005148:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 c00514c:	6013      	str	r3, [r2, #0]
 c00514e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005152:	781b      	ldrb	r3, [r3, #0]
 c005154:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
 c005158:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00515c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c005160:	331f      	adds	r3, #31
 c005162:	2b00      	cmp	r3, #0
 c005164:	da00      	bge.n	c005168 <uECC_verify+0x48>
 c005166:	331f      	adds	r3, #31
 c005168:	115b      	asrs	r3, r3, #5
 c00516a:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
 c00516e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 c005172:	3b01      	subs	r3, #1
 c005174:	009b      	lsls	r3, r3, #2
 c005176:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 c00517a:	443b      	add	r3, r7
 c00517c:	2200      	movs	r2, #0
 c00517e:	f843 2cd0 	str.w	r2, [r3, #-208]
 c005182:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 c005186:	1e5a      	subs	r2, r3, #1
 c005188:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c00518c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 c005190:	2100      	movs	r1, #0
 c005192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 c005196:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 c00519a:	1e5a      	subs	r2, r3, #1
 c00519c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c0051a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 c0051a4:	2100      	movs	r1, #0
 c0051a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 c0051aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0051ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c0051b2:	461a      	mov	r2, r3
 c0051b4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c0051b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 c0051bc:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 c0051c0:	6819      	ldr	r1, [r3, #0]
 c0051c2:	f7ff fd42 	bl	c004c4a <uECC_vli_bytesToNative>
 c0051c6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c0051ca:	009b      	lsls	r3, r3, #2
 c0051cc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 c0051d0:	18d0      	adds	r0, r2, r3
 c0051d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0051d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c0051da:	461a      	mov	r2, r3
 c0051dc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c0051e0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 c0051e4:	681b      	ldr	r3, [r3, #0]
 c0051e6:	1899      	adds	r1, r3, r2
 c0051e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0051ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c0051f0:	461a      	mov	r2, r3
 c0051f2:	f7ff fd2a 	bl	c004c4a <uECC_vli_bytesToNative>
 c0051f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0051fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c0051fe:	461a      	mov	r2, r3
 c005200:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c005204:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 c005208:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 c00520c:	6819      	ldr	r1, [r3, #0]
 c00520e:	f7ff fd1c 	bl	c004c4a <uECC_vli_bytesToNative>
 c005212:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005216:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c00521a:	461a      	mov	r2, r3
 c00521c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c005220:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 c005224:	681b      	ldr	r3, [r3, #0]
 c005226:	1899      	adds	r1, r3, r2
 c005228:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00522c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c005230:	461a      	mov	r2, r3
 c005232:	f107 0310 	add.w	r3, r7, #16
 c005236:	4618      	mov	r0, r3
 c005238:	f7ff fd07 	bl	c004c4a <uECC_vli_bytesToNative>
 c00523c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c005240:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 c005244:	4611      	mov	r1, r2
 c005246:	4618      	mov	r0, r3
 c005248:	f7fe f952 	bl	c0034f0 <uECC_vli_isZero>
 c00524c:	4603      	mov	r3, r0
 c00524e:	2b00      	cmp	r3, #0
 c005250:	d10a      	bne.n	c005268 <uECC_verify+0x148>
 c005252:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c005256:	f107 0310 	add.w	r3, r7, #16
 c00525a:	4611      	mov	r1, r2
 c00525c:	4618      	mov	r0, r3
 c00525e:	f7fe f947 	bl	c0034f0 <uECC_vli_isZero>
 c005262:	4603      	mov	r3, r0
 c005264:	2b00      	cmp	r3, #0
 c005266:	d001      	beq.n	c00526c <uECC_verify+0x14c>
 c005268:	2300      	movs	r3, #0
 c00526a:	e220      	b.n	c0056ae <uECC_verify+0x58e>
 c00526c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005270:	3324      	adds	r3, #36	@ 0x24
 c005272:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 c005276:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 c00527a:	4618      	mov	r0, r3
 c00527c:	f7fe fa03 	bl	c003686 <uECC_vli_cmp_unsafe>
 c005280:	4603      	mov	r3, r0
 c005282:	2b01      	cmp	r3, #1
 c005284:	d10c      	bne.n	c0052a0 <uECC_verify+0x180>
 c005286:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00528a:	3324      	adds	r3, #36	@ 0x24
 c00528c:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 c005290:	f107 0110 	add.w	r1, r7, #16
 c005294:	4618      	mov	r0, r3
 c005296:	f7fe f9f6 	bl	c003686 <uECC_vli_cmp_unsafe>
 c00529a:	4603      	mov	r3, r0
 c00529c:	2b01      	cmp	r3, #1
 c00529e:	d001      	beq.n	c0052a4 <uECC_verify+0x184>
 c0052a0:	2300      	movs	r3, #0
 c0052a2:	e204      	b.n	c0056ae <uECC_verify+0x58e>
 c0052a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0052a8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 c0052ac:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 c0052b0:	f107 0110 	add.w	r1, r7, #16
 c0052b4:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 c0052b8:	f7fe fcad 	bl	c003c16 <uECC_vli_modInv>
 c0052bc:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 c0052c0:	3b01      	subs	r3, #1
 c0052c2:	009b      	lsls	r3, r3, #2
 c0052c4:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 c0052c8:	443b      	add	r3, r7
 c0052ca:	2200      	movs	r2, #0
 c0052cc:	f843 2c30 	str.w	r2, [r3, #-48]
 c0052d0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c0052d4:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 c0052d8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c0052dc:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 c0052e0:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 c0052e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0052e8:	6812      	ldr	r2, [r2, #0]
 c0052ea:	6809      	ldr	r1, [r1, #0]
 c0052ec:	f7ff fce9 	bl	c004cc2 <bits2int>
 c0052f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0052f4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 c0052f8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 c0052fc:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 c005300:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 c005304:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 c005308:	9300      	str	r3, [sp, #0]
 c00530a:	4623      	mov	r3, r4
 c00530c:	f7fe fc04 	bl	c003b18 <uECC_vli_modMult>
 c005310:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005314:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 c005318:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 c00531c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 c005320:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 c005324:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 c005328:	9300      	str	r3, [sp, #0]
 c00532a:	4623      	mov	r3, r4
 c00532c:	f7fe fbf4 	bl	c003b18 <uECC_vli_modMult>
 c005330:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c005334:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 c005338:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 c00533c:	4618      	mov	r0, r3
 c00533e:	f7fe f97b 	bl	c003638 <uECC_vli_set>
 c005342:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c005346:	009b      	lsls	r3, r3, #2
 c005348:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 c00534c:	18d0      	adds	r0, r2, r3
 c00534e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c005352:	009b      	lsls	r3, r3, #2
 c005354:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 c005358:	4413      	add	r3, r2
 c00535a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c00535e:	4619      	mov	r1, r3
 c005360:	f7fe f96a 	bl	c003638 <uECC_vli_set>
 c005364:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005368:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 c00536c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c005370:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 c005374:	4618      	mov	r0, r3
 c005376:	f7fe f95f 	bl	c003638 <uECC_vli_set>
 c00537a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00537e:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 c005382:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c005386:	009b      	lsls	r3, r3, #2
 c005388:	18d1      	adds	r1, r2, r3
 c00538a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c00538e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 c005392:	4618      	mov	r0, r3
 c005394:	f7fe f950 	bl	c003638 <uECC_vli_set>
 c005398:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00539c:	1d1c      	adds	r4, r3, #4
 c00539e:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 c0053a2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 c0053a6:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 c0053aa:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c0053ae:	9300      	str	r3, [sp, #0]
 c0053b0:	4623      	mov	r3, r4
 c0053b2:	f7fe fa58 	bl	c003866 <uECC_vli_modSub>
 c0053b6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c0053ba:	009b      	lsls	r3, r3, #2
 c0053bc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 c0053c0:	18d4      	adds	r4, r2, r3
 c0053c2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 c0053c6:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 c0053ca:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 c0053ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0053d2:	9300      	str	r3, [sp, #0]
 c0053d4:	4623      	mov	r3, r4
 c0053d6:	f7ff f881 	bl	c0044dc <XYcZ_add>
 c0053da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0053de:	1d1a      	adds	r2, r3, #4
 c0053e0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c0053e4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 c0053e8:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 c0053ec:	f7fe fc13 	bl	c003c16 <uECC_vli_modInv>
 c0053f0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c0053f4:	009b      	lsls	r3, r3, #2
 c0053f6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 c0053fa:	18d1      	adds	r1, r2, r3
 c0053fc:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 c005400:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 c005404:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005408:	f7fe fff6 	bl	c0043f8 <apply_z>
 c00540c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c005410:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 c005414:	2200      	movs	r2, #0
 c005416:	601a      	str	r2, [r3, #0]
 c005418:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00541c:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 c005420:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c005424:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 c005428:	605a      	str	r2, [r3, #4]
 c00542a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c00542e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 c005432:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 c005436:	609a      	str	r2, [r3, #8]
 c005438:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c00543c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 c005440:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 c005444:	60da      	str	r2, [r3, #12]
 c005446:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 c00544a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 c00544e:	4611      	mov	r1, r2
 c005450:	4618      	mov	r0, r3
 c005452:	f7fe f8b7 	bl	c0035c4 <uECC_vli_numBits>
 c005456:	4603      	mov	r3, r0
 c005458:	461c      	mov	r4, r3
 c00545a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 c00545e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 c005462:	4611      	mov	r1, r2
 c005464:	4618      	mov	r0, r3
 c005466:	f7fe f8ad 	bl	c0035c4 <uECC_vli_numBits>
 c00546a:	4603      	mov	r3, r0
 c00546c:	4619      	mov	r1, r3
 c00546e:	4620      	mov	r0, r4
 c005470:	f7ff fe40 	bl	c0050f4 <smax>
 c005474:	4603      	mov	r3, r0
 c005476:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
 c00547a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 c00547e:	3b01      	subs	r3, #1
 c005480:	b29b      	uxth	r3, r3
 c005482:	b21a      	sxth	r2, r3
 c005484:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 c005488:	4611      	mov	r1, r2
 c00548a:	4618      	mov	r0, r3
 c00548c:	f7fe f85a 	bl	c003544 <uECC_vli_testBit>
 c005490:	4603      	mov	r3, r0
 c005492:	2b00      	cmp	r3, #0
 c005494:	bf14      	ite	ne
 c005496:	2301      	movne	r3, #1
 c005498:	2300      	moveq	r3, #0
 c00549a:	b2db      	uxtb	r3, r3
 c00549c:	461c      	mov	r4, r3
 c00549e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 c0054a2:	3b01      	subs	r3, #1
 c0054a4:	b29b      	uxth	r3, r3
 c0054a6:	b21a      	sxth	r2, r3
 c0054a8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 c0054ac:	4611      	mov	r1, r2
 c0054ae:	4618      	mov	r0, r3
 c0054b0:	f7fe f848 	bl	c003544 <uECC_vli_testBit>
 c0054b4:	4603      	mov	r3, r0
 c0054b6:	2b00      	cmp	r3, #0
 c0054b8:	d001      	beq.n	c0054be <uECC_verify+0x39e>
 c0054ba:	2302      	movs	r3, #2
 c0054bc:	e000      	b.n	c0054c0 <uECC_verify+0x3a0>
 c0054be:	2300      	movs	r3, #0
 c0054c0:	ea43 0204 	orr.w	r2, r3, r4
 c0054c4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c0054c8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 c0054cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0054d0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 c0054d4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c0054d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c0054dc:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 c0054e0:	4618      	mov	r0, r3
 c0054e2:	f7fe f8a9 	bl	c003638 <uECC_vli_set>
 c0054e6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c0054ea:	009b      	lsls	r3, r3, #2
 c0054ec:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 c0054f0:	18d1      	adds	r1, r2, r3
 c0054f2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c0054f6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 c0054fa:	4618      	mov	r0, r3
 c0054fc:	f7fe f89c 	bl	c003638 <uECC_vli_set>
 c005500:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c005504:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 c005508:	4611      	mov	r1, r2
 c00550a:	4618      	mov	r0, r3
 c00550c:	f7fd ffcf 	bl	c0034ae <uECC_vli_clear>
 c005510:	2301      	movs	r3, #1
 c005512:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 c005516:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 c00551a:	3b02      	subs	r3, #2
 c00551c:	b29b      	uxth	r3, r3
 c00551e:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 c005522:	e087      	b.n	c005634 <uECC_verify+0x514>
 c005524:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005528:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 c00552c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 c005530:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 c005534:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 c005538:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00553c:	47a0      	blx	r4
 c00553e:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 c005542:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 c005546:	4611      	mov	r1, r2
 c005548:	4618      	mov	r0, r3
 c00554a:	f7fd fffb 	bl	c003544 <uECC_vli_testBit>
 c00554e:	4603      	mov	r3, r0
 c005550:	2b00      	cmp	r3, #0
 c005552:	bf14      	ite	ne
 c005554:	2301      	movne	r3, #1
 c005556:	2300      	moveq	r3, #0
 c005558:	b2db      	uxtb	r3, r3
 c00555a:	461c      	mov	r4, r3
 c00555c:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 c005560:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 c005564:	4611      	mov	r1, r2
 c005566:	4618      	mov	r0, r3
 c005568:	f7fd ffec 	bl	c003544 <uECC_vli_testBit>
 c00556c:	4603      	mov	r3, r0
 c00556e:	2b00      	cmp	r3, #0
 c005570:	d001      	beq.n	c005576 <uECC_verify+0x456>
 c005572:	2302      	movs	r3, #2
 c005574:	e000      	b.n	c005578 <uECC_verify+0x458>
 c005576:	2300      	movs	r3, #0
 c005578:	4323      	orrs	r3, r4
 c00557a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 c00557e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 c005582:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 c005586:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 c00558a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00558e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 c005592:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 c005596:	2b00      	cmp	r3, #0
 c005598:	d046      	beq.n	c005628 <uECC_verify+0x508>
 c00559a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c00559e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 c0055a2:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 c0055a6:	4618      	mov	r0, r3
 c0055a8:	f7fe f846 	bl	c003638 <uECC_vli_set>
 c0055ac:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c0055b0:	009b      	lsls	r3, r3, #2
 c0055b2:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 c0055b6:	18d1      	adds	r1, r2, r3
 c0055b8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c0055bc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 c0055c0:	4618      	mov	r0, r3
 c0055c2:	f7fe f839 	bl	c003638 <uECC_vli_set>
 c0055c6:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 c0055ca:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 c0055ce:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 c0055d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0055d6:	f7fe ff0f 	bl	c0043f8 <apply_z>
 c0055da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c0055de:	1d1c      	adds	r4, r3, #4
 c0055e0:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 c0055e4:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 c0055e8:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 c0055ec:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c0055f0:	9300      	str	r3, [sp, #0]
 c0055f2:	4623      	mov	r3, r4
 c0055f4:	f7fe f937 	bl	c003866 <uECC_vli_modSub>
 c0055f8:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 c0055fc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 c005600:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 c005604:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 c005608:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00560c:	9300      	str	r3, [sp, #0]
 c00560e:	4623      	mov	r3, r4
 c005610:	f7fe ff64 	bl	c0044dc <XYcZ_add>
 c005614:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 c005618:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 c00561c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 c005620:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005624:	f7fe fa93 	bl	c003b4e <uECC_vli_modMult_fast>
 c005628:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 c00562c:	3b01      	subs	r3, #1
 c00562e:	b29b      	uxth	r3, r3
 c005630:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 c005634:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 c005638:	2b00      	cmp	r3, #0
 c00563a:	f6bf af73 	bge.w	c005524 <uECC_verify+0x404>
 c00563e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005642:	1d1a      	adds	r2, r3, #4
 c005644:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 c005648:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 c00564c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 c005650:	f7fe fae1 	bl	c003c16 <uECC_vli_modInv>
 c005654:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 c005658:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 c00565c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 c005660:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005664:	f7fe fec8 	bl	c0043f8 <apply_z>
 c005668:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c00566c:	3324      	adds	r3, #36	@ 0x24
 c00566e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 c005672:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 c005676:	4618      	mov	r0, r3
 c005678:	f7fe f805 	bl	c003686 <uECC_vli_cmp_unsafe>
 c00567c:	4603      	mov	r3, r0
 c00567e:	2b01      	cmp	r3, #1
 c005680:	d00b      	beq.n	c00569a <uECC_verify+0x57a>
 c005682:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 c005686:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 c00568a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 c00568e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 c005692:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 c005696:	f7fd fe6b 	bl	c003370 <uECC_vli_sub>
 c00569a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 c00569e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 c0056a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c0056a6:	4618      	mov	r0, r3
 c0056a8:	f7fe f829 	bl	c0036fe <uECC_vli_equal>
 c0056ac:	4603      	mov	r3, r0
 c0056ae:	4618      	mov	r0, r3
 c0056b0:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 c0056b4:	46bd      	mov	sp, r7
 c0056b6:	bd90      	pop	{r4, r7, pc}

0c0056b8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 c0056b8:	b580      	push	{r7, lr}
 c0056ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 c0056bc:	4b22      	ldr	r3, [pc, #136]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056be:	4a23      	ldr	r2, [pc, #140]	@ (c00574c <MX_LPUART1_UART_Init+0x94>)
 c0056c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 c0056c2:	4b21      	ldr	r3, [pc, #132]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056c4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 c0056c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c0056ca:	4b1f      	ldr	r3, [pc, #124]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056cc:	2200      	movs	r2, #0
 c0056ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 c0056d0:	4b1d      	ldr	r3, [pc, #116]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056d2:	2200      	movs	r2, #0
 c0056d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c0056d6:	4b1c      	ldr	r3, [pc, #112]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056d8:	2200      	movs	r2, #0
 c0056da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c0056dc:	4b1a      	ldr	r3, [pc, #104]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056de:	220c      	movs	r2, #12
 c0056e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c0056e2:	4b19      	ldr	r3, [pc, #100]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056e4:	2200      	movs	r2, #0
 c0056e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c0056e8:	4b17      	ldr	r3, [pc, #92]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056ea:	2200      	movs	r2, #0
 c0056ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c0056ee:	4b16      	ldr	r3, [pc, #88]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056f0:	2200      	movs	r2, #0
 c0056f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c0056f4:	4b14      	ldr	r3, [pc, #80]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056f6:	2200      	movs	r2, #0
 c0056f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c0056fa:	4b13      	ldr	r3, [pc, #76]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c0056fc:	2200      	movs	r2, #0
 c0056fe:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c005700:	4811      	ldr	r0, [pc, #68]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c005702:	f002 fc55 	bl	c007fb0 <HAL_UART_Init>
 c005706:	4603      	mov	r3, r0
 c005708:	2b00      	cmp	r3, #0
 c00570a:	d001      	beq.n	c005710 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 c00570c:	f7fc fd06 	bl	c00211c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c005710:	2100      	movs	r1, #0
 c005712:	480d      	ldr	r0, [pc, #52]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c005714:	f003 faaa 	bl	c008c6c <HAL_UARTEx_SetTxFifoThreshold>
 c005718:	4603      	mov	r3, r0
 c00571a:	2b00      	cmp	r3, #0
 c00571c:	d001      	beq.n	c005722 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 c00571e:	f7fc fcfd 	bl	c00211c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c005722:	2100      	movs	r1, #0
 c005724:	4808      	ldr	r0, [pc, #32]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c005726:	f003 fadf 	bl	c008ce8 <HAL_UARTEx_SetRxFifoThreshold>
 c00572a:	4603      	mov	r3, r0
 c00572c:	2b00      	cmp	r3, #0
 c00572e:	d001      	beq.n	c005734 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 c005730:	f7fc fcf4 	bl	c00211c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c005734:	4804      	ldr	r0, [pc, #16]	@ (c005748 <MX_LPUART1_UART_Init+0x90>)
 c005736:	f003 fa60 	bl	c008bfa <HAL_UARTEx_DisableFifoMode>
 c00573a:	4603      	mov	r3, r0
 c00573c:	2b00      	cmp	r3, #0
 c00573e:	d001      	beq.n	c005744 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 c005740:	f7fc fcec 	bl	c00211c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c005744:	bf00      	nop
 c005746:	bd80      	pop	{r7, pc}
 c005748:	30000a78 	.word	0x30000a78
 c00574c:	50008000 	.word	0x50008000

0c005750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 c005750:	b580      	push	{r7, lr}
 c005752:	b0ae      	sub	sp, #184	@ 0xb8
 c005754:	af00      	add	r7, sp, #0
 c005756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c005758:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 c00575c:	2200      	movs	r2, #0
 c00575e:	601a      	str	r2, [r3, #0]
 c005760:	605a      	str	r2, [r3, #4]
 c005762:	609a      	str	r2, [r3, #8]
 c005764:	60da      	str	r2, [r3, #12]
 c005766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c005768:	f107 0310 	add.w	r3, r7, #16
 c00576c:	2294      	movs	r2, #148	@ 0x94
 c00576e:	2100      	movs	r1, #0
 c005770:	4618      	mov	r0, r3
 c005772:	f003 fc88 	bl	c009086 <memset>
  if(uartHandle->Instance==LPUART1)
 c005776:	687b      	ldr	r3, [r7, #4]
 c005778:	681b      	ldr	r3, [r3, #0]
 c00577a:	4a22      	ldr	r2, [pc, #136]	@ (c005804 <HAL_UART_MspInit+0xb4>)
 c00577c:	4293      	cmp	r3, r2
 c00577e:	d13d      	bne.n	c0057fc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c005780:	2320      	movs	r3, #32
 c005782:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 c005784:	2300      	movs	r3, #0
 c005786:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005788:	f107 0310 	add.w	r3, r7, #16
 c00578c:	4618      	mov	r0, r3
 c00578e:	f001 fef9 	bl	c007584 <HAL_RCCEx_PeriphCLKConfig>
 c005792:	4603      	mov	r3, r0
 c005794:	2b00      	cmp	r3, #0
 c005796:	d001      	beq.n	c00579c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c005798:	f7fc fcc0 	bl	c00211c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c00579c:	4b1a      	ldr	r3, [pc, #104]	@ (c005808 <HAL_UART_MspInit+0xb8>)
 c00579e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c0057a0:	4a19      	ldr	r2, [pc, #100]	@ (c005808 <HAL_UART_MspInit+0xb8>)
 c0057a2:	f043 0301 	orr.w	r3, r3, #1
 c0057a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 c0057a8:	4b17      	ldr	r3, [pc, #92]	@ (c005808 <HAL_UART_MspInit+0xb8>)
 c0057aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c0057ac:	f003 0301 	and.w	r3, r3, #1
 c0057b0:	60fb      	str	r3, [r7, #12]
 c0057b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 c0057b4:	4b14      	ldr	r3, [pc, #80]	@ (c005808 <HAL_UART_MspInit+0xb8>)
 c0057b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c0057b8:	4a13      	ldr	r2, [pc, #76]	@ (c005808 <HAL_UART_MspInit+0xb8>)
 c0057ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 c0057be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 c0057c0:	4b11      	ldr	r3, [pc, #68]	@ (c005808 <HAL_UART_MspInit+0xb8>)
 c0057c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c0057c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c0057c8:	60bb      	str	r3, [r7, #8]
 c0057ca:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c0057cc:	f000 fed8 	bl	c006580 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c0057d0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 c0057d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0057d8:	2302      	movs	r3, #2
 c0057da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0057de:	2300      	movs	r3, #0
 c0057e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0057e4:	2300      	movs	r3, #0
 c0057e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c0057ea:	2308      	movs	r3, #8
 c0057ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c0057f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 c0057f4:	4619      	mov	r1, r3
 c0057f6:	4805      	ldr	r0, [pc, #20]	@ (c00580c <HAL_UART_MspInit+0xbc>)
 c0057f8:	f000 fa5e 	bl	c005cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 c0057fc:	bf00      	nop
 c0057fe:	37b8      	adds	r7, #184	@ 0xb8
 c005800:	46bd      	mov	sp, r7
 c005802:	bd80      	pop	{r7, pc}
 c005804:	50008000 	.word	0x50008000
 c005808:	50021000 	.word	0x50021000
 c00580c:	52021800 	.word	0x52021800

0c005810 <SecureUartTx>:
}

/* USER CODE BEGIN 1 */

void SecureUartTx(uint8_t* data, uint16_t len)
{
 c005810:	b580      	push	{r7, lr}
 c005812:	b082      	sub	sp, #8
 c005814:	af00      	add	r7, sp, #0
 c005816:	6078      	str	r0, [r7, #4]
 c005818:	460b      	mov	r3, r1
 c00581a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&hlpuart1, data, len, HAL_MAX_DELAY);
 c00581c:	887a      	ldrh	r2, [r7, #2]
 c00581e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c005822:	6879      	ldr	r1, [r7, #4]
 c005824:	4803      	ldr	r0, [pc, #12]	@ (c005834 <SecureUartTx+0x24>)
 c005826:	f002 fc13 	bl	c008050 <HAL_UART_Transmit>
}
 c00582a:	bf00      	nop
 c00582c:	3708      	adds	r7, #8
 c00582e:	46bd      	mov	sp, r7
 c005830:	bd80      	pop	{r7, pc}
 c005832:	bf00      	nop
 c005834:	30000a78 	.word	0x30000a78

0c005838 <SecureUartRx>:

void SecureUartRx(uint8_t* data, uint16_t len)
{
 c005838:	b580      	push	{r7, lr}
 c00583a:	b082      	sub	sp, #8
 c00583c:	af00      	add	r7, sp, #0
 c00583e:	6078      	str	r0, [r7, #4]
 c005840:	460b      	mov	r3, r1
 c005842:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&hlpuart1, data, len, HAL_MAX_DELAY);
 c005844:	887a      	ldrh	r2, [r7, #2]
 c005846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 c00584a:	6879      	ldr	r1, [r7, #4]
 c00584c:	4803      	ldr	r0, [pc, #12]	@ (c00585c <SecureUartRx+0x24>)
 c00584e:	f002 fc95 	bl	c00817c <HAL_UART_Receive>

}
 c005852:	bf00      	nop
 c005854:	3708      	adds	r7, #8
 c005856:	46bd      	mov	sp, r7
 c005858:	bd80      	pop	{r7, pc}
 c00585a:	bf00      	nop
 c00585c:	30000a78 	.word	0x30000a78

0c005860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c005860:	f8df d034 	ldr.w	sp, [pc, #52]	@ c005898 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c005864:	f7fd fc16 	bl	c003094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c005868:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00586a:	e003      	b.n	c005874 <LoopCopyDataInit>

0c00586c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c00586c:	4b0b      	ldr	r3, [pc, #44]	@ (c00589c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c00586e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c005870:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c005872:	3104      	adds	r1, #4

0c005874 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c005874:	480a      	ldr	r0, [pc, #40]	@ (c0058a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 c005876:	4b0b      	ldr	r3, [pc, #44]	@ (c0058a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 c005878:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00587a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c00587c:	d3f6      	bcc.n	c00586c <CopyDataInit>
	ldr	r2, =_sbss
 c00587e:	4a0a      	ldr	r2, [pc, #40]	@ (c0058a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 c005880:	e002      	b.n	c005888 <LoopFillZerobss>

0c005882 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c005882:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c005884:	f842 3b04 	str.w	r3, [r2], #4

0c005888 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c005888:	4b08      	ldr	r3, [pc, #32]	@ (c0058ac <LoopForever+0x16>)
	cmp	r2, r3
 c00588a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c00588c:	d3f9      	bcc.n	c005882 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c00588e:	f003 fc4f 	bl	c009130 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c005892:	f7fc fb33 	bl	c001efc <main>

0c005896 <LoopForever>:

LoopForever:
    b LoopForever
 c005896:	e7fe      	b.n	c005896 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c005898:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c00589c:	0c00a068 	.word	0x0c00a068
	ldr	r0, =_sdata
 c0058a0:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0058a4:	3000067c 	.word	0x3000067c
	ldr	r2, =_sbss
 c0058a8:	3000067c 	.word	0x3000067c
	ldr	r3, = _ebss
 c0058ac:	30000c58 	.word	0x30000c58

0c0058b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0058b0:	e7fe      	b.n	c0058b0 <ADC1_2_IRQHandler>

0c0058b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0058b2:	b580      	push	{r7, lr}
 c0058b4:	b082      	sub	sp, #8
 c0058b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0058b8:	2300      	movs	r3, #0
 c0058ba:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0058bc:	2004      	movs	r0, #4
 c0058be:	f000 f93f 	bl	c005b40 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0058c2:	f7fd fc01 	bl	c0030c8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0058c6:	2007      	movs	r0, #7
 c0058c8:	f000 f80e 	bl	c0058e8 <HAL_InitTick>
 c0058cc:	4603      	mov	r3, r0
 c0058ce:	2b00      	cmp	r3, #0
 c0058d0:	d002      	beq.n	c0058d8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0058d2:	2301      	movs	r3, #1
 c0058d4:	71fb      	strb	r3, [r7, #7]
 c0058d6:	e001      	b.n	c0058dc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0058d8:	f7fd f9f6 	bl	c002cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0058dc:	79fb      	ldrb	r3, [r7, #7]
}
 c0058de:	4618      	mov	r0, r3
 c0058e0:	3708      	adds	r7, #8
 c0058e2:	46bd      	mov	sp, r7
 c0058e4:	bd80      	pop	{r7, pc}
	...

0c0058e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0058e8:	b580      	push	{r7, lr}
 c0058ea:	b084      	sub	sp, #16
 c0058ec:	af00      	add	r7, sp, #0
 c0058ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0058f0:	2300      	movs	r3, #0
 c0058f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0058f4:	4b17      	ldr	r3, [pc, #92]	@ (c005954 <HAL_InitTick+0x6c>)
 c0058f6:	781b      	ldrb	r3, [r3, #0]
 c0058f8:	2b00      	cmp	r3, #0
 c0058fa:	d023      	beq.n	c005944 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0058fc:	4b16      	ldr	r3, [pc, #88]	@ (c005958 <HAL_InitTick+0x70>)
 c0058fe:	681a      	ldr	r2, [r3, #0]
 c005900:	4b14      	ldr	r3, [pc, #80]	@ (c005954 <HAL_InitTick+0x6c>)
 c005902:	781b      	ldrb	r3, [r3, #0]
 c005904:	4619      	mov	r1, r3
 c005906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c00590a:	fbb3 f3f1 	udiv	r3, r3, r1
 c00590e:	fbb2 f3f3 	udiv	r3, r2, r3
 c005912:	4618      	mov	r0, r3
 c005914:	f000 f947 	bl	c005ba6 <HAL_SYSTICK_Config>
 c005918:	4603      	mov	r3, r0
 c00591a:	2b00      	cmp	r3, #0
 c00591c:	d10f      	bne.n	c00593e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c00591e:	687b      	ldr	r3, [r7, #4]
 c005920:	2b07      	cmp	r3, #7
 c005922:	d809      	bhi.n	c005938 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c005924:	2200      	movs	r2, #0
 c005926:	6879      	ldr	r1, [r7, #4]
 c005928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c00592c:	f000 f913 	bl	c005b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c005930:	4a0a      	ldr	r2, [pc, #40]	@ (c00595c <HAL_InitTick+0x74>)
 c005932:	687b      	ldr	r3, [r7, #4]
 c005934:	6013      	str	r3, [r2, #0]
 c005936:	e007      	b.n	c005948 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c005938:	2301      	movs	r3, #1
 c00593a:	73fb      	strb	r3, [r7, #15]
 c00593c:	e004      	b.n	c005948 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c00593e:	2301      	movs	r3, #1
 c005940:	73fb      	strb	r3, [r7, #15]
 c005942:	e001      	b.n	c005948 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c005944:	2301      	movs	r3, #1
 c005946:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c005948:	7bfb      	ldrb	r3, [r7, #15]
}
 c00594a:	4618      	mov	r0, r3
 c00594c:	3710      	adds	r7, #16
 c00594e:	46bd      	mov	sp, r7
 c005950:	bd80      	pop	{r7, pc}
 c005952:	bf00      	nop
 c005954:	3000061c 	.word	0x3000061c
 c005958:	30000610 	.word	0x30000610
 c00595c:	30000618 	.word	0x30000618

0c005960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c005960:	b480      	push	{r7}
 c005962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c005964:	4b06      	ldr	r3, [pc, #24]	@ (c005980 <HAL_IncTick+0x20>)
 c005966:	781b      	ldrb	r3, [r3, #0]
 c005968:	461a      	mov	r2, r3
 c00596a:	4b06      	ldr	r3, [pc, #24]	@ (c005984 <HAL_IncTick+0x24>)
 c00596c:	681b      	ldr	r3, [r3, #0]
 c00596e:	4413      	add	r3, r2
 c005970:	4a04      	ldr	r2, [pc, #16]	@ (c005984 <HAL_IncTick+0x24>)
 c005972:	6013      	str	r3, [r2, #0]
}
 c005974:	bf00      	nop
 c005976:	46bd      	mov	sp, r7
 c005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00597c:	4770      	bx	lr
 c00597e:	bf00      	nop
 c005980:	3000061c 	.word	0x3000061c
 c005984:	30000b08 	.word	0x30000b08

0c005988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c005988:	b480      	push	{r7}
 c00598a:	af00      	add	r7, sp, #0
  return uwTick;
 c00598c:	4b03      	ldr	r3, [pc, #12]	@ (c00599c <HAL_GetTick+0x14>)
 c00598e:	681b      	ldr	r3, [r3, #0]
}
 c005990:	4618      	mov	r0, r3
 c005992:	46bd      	mov	sp, r7
 c005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005998:	4770      	bx	lr
 c00599a:	bf00      	nop
 c00599c:	30000b08 	.word	0x30000b08

0c0059a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0059a0:	b480      	push	{r7}
 c0059a2:	b085      	sub	sp, #20
 c0059a4:	af00      	add	r7, sp, #0
 c0059a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0059a8:	687b      	ldr	r3, [r7, #4]
 c0059aa:	f003 0307 	and.w	r3, r3, #7
 c0059ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0059b0:	4b0c      	ldr	r3, [pc, #48]	@ (c0059e4 <__NVIC_SetPriorityGrouping+0x44>)
 c0059b2:	68db      	ldr	r3, [r3, #12]
 c0059b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0059b6:	68ba      	ldr	r2, [r7, #8]
 c0059b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 c0059bc:	4013      	ands	r3, r2
 c0059be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0059c0:	68fb      	ldr	r3, [r7, #12]
 c0059c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0059c4:	68bb      	ldr	r3, [r7, #8]
 c0059c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0059c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 c0059cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c0059d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0059d2:	4a04      	ldr	r2, [pc, #16]	@ (c0059e4 <__NVIC_SetPriorityGrouping+0x44>)
 c0059d4:	68bb      	ldr	r3, [r7, #8]
 c0059d6:	60d3      	str	r3, [r2, #12]
}
 c0059d8:	bf00      	nop
 c0059da:	3714      	adds	r7, #20
 c0059dc:	46bd      	mov	sp, r7
 c0059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0059e2:	4770      	bx	lr
 c0059e4:	e000ed00 	.word	0xe000ed00

0c0059e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0059e8:	b480      	push	{r7}
 c0059ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0059ec:	4b04      	ldr	r3, [pc, #16]	@ (c005a00 <__NVIC_GetPriorityGrouping+0x18>)
 c0059ee:	68db      	ldr	r3, [r3, #12]
 c0059f0:	0a1b      	lsrs	r3, r3, #8
 c0059f2:	f003 0307 	and.w	r3, r3, #7
}
 c0059f6:	4618      	mov	r0, r3
 c0059f8:	46bd      	mov	sp, r7
 c0059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0059fe:	4770      	bx	lr
 c005a00:	e000ed00 	.word	0xe000ed00

0c005a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c005a04:	b480      	push	{r7}
 c005a06:	b083      	sub	sp, #12
 c005a08:	af00      	add	r7, sp, #0
 c005a0a:	4603      	mov	r3, r0
 c005a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c005a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005a12:	2b00      	cmp	r3, #0
 c005a14:	db0b      	blt.n	c005a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c005a16:	79fb      	ldrb	r3, [r7, #7]
 c005a18:	f003 021f 	and.w	r2, r3, #31
 c005a1c:	4907      	ldr	r1, [pc, #28]	@ (c005a3c <__NVIC_EnableIRQ+0x38>)
 c005a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005a22:	095b      	lsrs	r3, r3, #5
 c005a24:	2001      	movs	r0, #1
 c005a26:	fa00 f202 	lsl.w	r2, r0, r2
 c005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c005a2e:	bf00      	nop
 c005a30:	370c      	adds	r7, #12
 c005a32:	46bd      	mov	sp, r7
 c005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005a38:	4770      	bx	lr
 c005a3a:	bf00      	nop
 c005a3c:	e000e100 	.word	0xe000e100

0c005a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c005a40:	b480      	push	{r7}
 c005a42:	b083      	sub	sp, #12
 c005a44:	af00      	add	r7, sp, #0
 c005a46:	4603      	mov	r3, r0
 c005a48:	6039      	str	r1, [r7, #0]
 c005a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c005a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005a50:	2b00      	cmp	r3, #0
 c005a52:	db0a      	blt.n	c005a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c005a54:	683b      	ldr	r3, [r7, #0]
 c005a56:	b2da      	uxtb	r2, r3
 c005a58:	490c      	ldr	r1, [pc, #48]	@ (c005a8c <__NVIC_SetPriority+0x4c>)
 c005a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005a5e:	0152      	lsls	r2, r2, #5
 c005a60:	b2d2      	uxtb	r2, r2
 c005a62:	440b      	add	r3, r1
 c005a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c005a68:	e00a      	b.n	c005a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c005a6a:	683b      	ldr	r3, [r7, #0]
 c005a6c:	b2da      	uxtb	r2, r3
 c005a6e:	4908      	ldr	r1, [pc, #32]	@ (c005a90 <__NVIC_SetPriority+0x50>)
 c005a70:	79fb      	ldrb	r3, [r7, #7]
 c005a72:	f003 030f 	and.w	r3, r3, #15
 c005a76:	3b04      	subs	r3, #4
 c005a78:	0152      	lsls	r2, r2, #5
 c005a7a:	b2d2      	uxtb	r2, r2
 c005a7c:	440b      	add	r3, r1
 c005a7e:	761a      	strb	r2, [r3, #24]
}
 c005a80:	bf00      	nop
 c005a82:	370c      	adds	r7, #12
 c005a84:	46bd      	mov	sp, r7
 c005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005a8a:	4770      	bx	lr
 c005a8c:	e000e100 	.word	0xe000e100
 c005a90:	e000ed00 	.word	0xe000ed00

0c005a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c005a94:	b480      	push	{r7}
 c005a96:	b089      	sub	sp, #36	@ 0x24
 c005a98:	af00      	add	r7, sp, #0
 c005a9a:	60f8      	str	r0, [r7, #12]
 c005a9c:	60b9      	str	r1, [r7, #8]
 c005a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c005aa0:	68fb      	ldr	r3, [r7, #12]
 c005aa2:	f003 0307 	and.w	r3, r3, #7
 c005aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c005aa8:	69fb      	ldr	r3, [r7, #28]
 c005aaa:	f1c3 0307 	rsb	r3, r3, #7
 c005aae:	2b03      	cmp	r3, #3
 c005ab0:	bf28      	it	cs
 c005ab2:	2303      	movcs	r3, #3
 c005ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c005ab6:	69fb      	ldr	r3, [r7, #28]
 c005ab8:	3303      	adds	r3, #3
 c005aba:	2b06      	cmp	r3, #6
 c005abc:	d902      	bls.n	c005ac4 <NVIC_EncodePriority+0x30>
 c005abe:	69fb      	ldr	r3, [r7, #28]
 c005ac0:	3b04      	subs	r3, #4
 c005ac2:	e000      	b.n	c005ac6 <NVIC_EncodePriority+0x32>
 c005ac4:	2300      	movs	r3, #0
 c005ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c005ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c005acc:	69bb      	ldr	r3, [r7, #24]
 c005ace:	fa02 f303 	lsl.w	r3, r2, r3
 c005ad2:	43da      	mvns	r2, r3
 c005ad4:	68bb      	ldr	r3, [r7, #8]
 c005ad6:	401a      	ands	r2, r3
 c005ad8:	697b      	ldr	r3, [r7, #20]
 c005ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c005adc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 c005ae0:	697b      	ldr	r3, [r7, #20]
 c005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 c005ae6:	43d9      	mvns	r1, r3
 c005ae8:	687b      	ldr	r3, [r7, #4]
 c005aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c005aec:	4313      	orrs	r3, r2
         );
}
 c005aee:	4618      	mov	r0, r3
 c005af0:	3724      	adds	r7, #36	@ 0x24
 c005af2:	46bd      	mov	sp, r7
 c005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005af8:	4770      	bx	lr
	...

0c005afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c005afc:	b580      	push	{r7, lr}
 c005afe:	b082      	sub	sp, #8
 c005b00:	af00      	add	r7, sp, #0
 c005b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c005b04:	687b      	ldr	r3, [r7, #4]
 c005b06:	3b01      	subs	r3, #1
 c005b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c005b0c:	d301      	bcc.n	c005b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c005b0e:	2301      	movs	r3, #1
 c005b10:	e00f      	b.n	c005b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c005b12:	4a0a      	ldr	r2, [pc, #40]	@ (c005b3c <SysTick_Config+0x40>)
 c005b14:	687b      	ldr	r3, [r7, #4]
 c005b16:	3b01      	subs	r3, #1
 c005b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c005b1a:	2107      	movs	r1, #7
 c005b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c005b20:	f7ff ff8e 	bl	c005a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c005b24:	4b05      	ldr	r3, [pc, #20]	@ (c005b3c <SysTick_Config+0x40>)
 c005b26:	2200      	movs	r2, #0
 c005b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c005b2a:	4b04      	ldr	r3, [pc, #16]	@ (c005b3c <SysTick_Config+0x40>)
 c005b2c:	2207      	movs	r2, #7
 c005b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c005b30:	2300      	movs	r3, #0
}
 c005b32:	4618      	mov	r0, r3
 c005b34:	3708      	adds	r7, #8
 c005b36:	46bd      	mov	sp, r7
 c005b38:	bd80      	pop	{r7, pc}
 c005b3a:	bf00      	nop
 c005b3c:	e000e010 	.word	0xe000e010

0c005b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c005b40:	b580      	push	{r7, lr}
 c005b42:	b082      	sub	sp, #8
 c005b44:	af00      	add	r7, sp, #0
 c005b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c005b48:	6878      	ldr	r0, [r7, #4]
 c005b4a:	f7ff ff29 	bl	c0059a0 <__NVIC_SetPriorityGrouping>
}
 c005b4e:	bf00      	nop
 c005b50:	3708      	adds	r7, #8
 c005b52:	46bd      	mov	sp, r7
 c005b54:	bd80      	pop	{r7, pc}

0c005b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c005b56:	b580      	push	{r7, lr}
 c005b58:	b086      	sub	sp, #24
 c005b5a:	af00      	add	r7, sp, #0
 c005b5c:	4603      	mov	r3, r0
 c005b5e:	60b9      	str	r1, [r7, #8]
 c005b60:	607a      	str	r2, [r7, #4]
 c005b62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c005b64:	f7ff ff40 	bl	c0059e8 <__NVIC_GetPriorityGrouping>
 c005b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c005b6a:	687a      	ldr	r2, [r7, #4]
 c005b6c:	68b9      	ldr	r1, [r7, #8]
 c005b6e:	6978      	ldr	r0, [r7, #20]
 c005b70:	f7ff ff90 	bl	c005a94 <NVIC_EncodePriority>
 c005b74:	4602      	mov	r2, r0
 c005b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c005b7a:	4611      	mov	r1, r2
 c005b7c:	4618      	mov	r0, r3
 c005b7e:	f7ff ff5f 	bl	c005a40 <__NVIC_SetPriority>
}
 c005b82:	bf00      	nop
 c005b84:	3718      	adds	r7, #24
 c005b86:	46bd      	mov	sp, r7
 c005b88:	bd80      	pop	{r7, pc}

0c005b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c005b8a:	b580      	push	{r7, lr}
 c005b8c:	b082      	sub	sp, #8
 c005b8e:	af00      	add	r7, sp, #0
 c005b90:	4603      	mov	r3, r0
 c005b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c005b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005b98:	4618      	mov	r0, r3
 c005b9a:	f7ff ff33 	bl	c005a04 <__NVIC_EnableIRQ>
}
 c005b9e:	bf00      	nop
 c005ba0:	3708      	adds	r7, #8
 c005ba2:	46bd      	mov	sp, r7
 c005ba4:	bd80      	pop	{r7, pc}

0c005ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c005ba6:	b580      	push	{r7, lr}
 c005ba8:	b082      	sub	sp, #8
 c005baa:	af00      	add	r7, sp, #0
 c005bac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c005bae:	6878      	ldr	r0, [r7, #4]
 c005bb0:	f7ff ffa4 	bl	c005afc <SysTick_Config>
 c005bb4:	4603      	mov	r3, r0
}
 c005bb6:	4618      	mov	r0, r3
 c005bb8:	3708      	adds	r7, #8
 c005bba:	46bd      	mov	sp, r7
 c005bbc:	bd80      	pop	{r7, pc}
	...

0c005bc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 c005bc0:	b480      	push	{r7}
 c005bc2:	b083      	sub	sp, #12
 c005bc4:	af00      	add	r7, sp, #0
 c005bc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 c005bc8:	4a0b      	ldr	r2, [pc, #44]	@ (c005bf8 <HAL_MPU_Enable+0x38>)
 c005bca:	687b      	ldr	r3, [r7, #4]
 c005bcc:	f043 0301 	orr.w	r3, r3, #1
 c005bd0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 c005bd2:	4b0a      	ldr	r3, [pc, #40]	@ (c005bfc <HAL_MPU_Enable+0x3c>)
 c005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c005bd6:	4a09      	ldr	r2, [pc, #36]	@ (c005bfc <HAL_MPU_Enable+0x3c>)
 c005bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c005bdc:	6253      	str	r3, [r2, #36]	@ 0x24
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 c005bde:	f3bf 8f5f 	dmb	sy
}
 c005be2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c005be4:	f3bf 8f6f 	isb	sy
}
 c005be8:	bf00      	nop

  /* Follow ARM recommendation with */
  /* - Data Memory Barrier and Instruction Synchronization to insure MPU usage */
  __DMB(); /* Force memory writes before continuing */
  __ISB(); /* Flush and refill pipeline with updated permissions */
}
 c005bea:	bf00      	nop
 c005bec:	370c      	adds	r7, #12
 c005bee:	46bd      	mov	sp, r7
 c005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005bf4:	4770      	bx	lr
 c005bf6:	bf00      	nop
 c005bf8:	e000ed90 	.word	0xe000ed90
 c005bfc:	e000ed00 	.word	0xe000ed00

0c005c00 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 c005c00:	b480      	push	{r7}
 c005c02:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c005c04:	f3bf 8f5f 	dmb	sy
}
 c005c08:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c005c0a:	4b05      	ldr	r3, [pc, #20]	@ (c005c20 <HAL_MPU_Disable+0x20>)
 c005c0c:	685b      	ldr	r3, [r3, #4]
 c005c0e:	4a04      	ldr	r2, [pc, #16]	@ (c005c20 <HAL_MPU_Disable+0x20>)
 c005c10:	f023 0301 	bic.w	r3, r3, #1
 c005c14:	6053      	str	r3, [r2, #4]
}
 c005c16:	bf00      	nop
 c005c18:	46bd      	mov	sp, r7
 c005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005c1e:	4770      	bx	lr
 c005c20:	e000ed90 	.word	0xe000ed90

0c005c24 <HAL_MPU_ConfigRegion>:
  * @param  MPU_RegionInit Pointer to a MPU_Region_InitTypeDef structure that contains
  *                        the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_RegionInit)
{
 c005c24:	b580      	push	{r7, lr}
 c005c26:	b082      	sub	sp, #8
 c005c28:	af00      	add	r7, sp, #0
 c005c2a:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, MPU_RegionInit);
 c005c2c:	6879      	ldr	r1, [r7, #4]
 c005c2e:	4803      	ldr	r0, [pc, #12]	@ (c005c3c <HAL_MPU_ConfigRegion+0x18>)
 c005c30:	f000 f806 	bl	c005c40 <MPU_ConfigRegion>
}
 c005c34:	bf00      	nop
 c005c36:	3708      	adds	r7, #8
 c005c38:	46bd      	mov	sp, r7
 c005c3a:	bd80      	pop	{r7, pc}
 c005c3c:	e000ed90 	.word	0xe000ed90

0c005c40 <MPU_ConfigRegion>:
  */

#if (__MPU_PRESENT == 1)

static void MPU_ConfigRegion(MPU_Type* MPUx, MPU_Region_InitTypeDef *MPU_RegionInit)
{
 c005c40:	b480      	push	{r7}
 c005c42:	b083      	sub	sp, #12
 c005c44:	af00      	add	r7, sp, #0
 c005c46:	6078      	str	r0, [r7, #4]
 c005c48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 c005c4a:	f3bf 8f5f 	dmb	sy
}
 c005c4e:	bf00      	nop

  /* Follow ARM recommendation with Data Memory Barrier prior to MPU configuration */
  __DMB();

  /* Set the Region number */
  MPUx->RNR = MPU_RegionInit->Number;
 c005c50:	683b      	ldr	r3, [r7, #0]
 c005c52:	785b      	ldrb	r3, [r3, #1]
 c005c54:	461a      	mov	r2, r3
 c005c56:	687b      	ldr	r3, [r7, #4]
 c005c58:	609a      	str	r2, [r3, #8]

  if (MPU_RegionInit->Enable != MPU_REGION_DISABLE)
 c005c5a:	683b      	ldr	r3, [r7, #0]
 c005c5c:	781b      	ldrb	r3, [r3, #0]
 c005c5e:	2b00      	cmp	r3, #0
 c005c60:	d01e      	beq.n	c005ca0 <MPU_ConfigRegion+0x60>
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_RegionInit->DisableExec));
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_RegionInit->AccessPermission));
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_RegionInit->IsShareable));

    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c005c62:	683b      	ldr	r3, [r7, #0]
 c005c64:	685b      	ldr	r3, [r3, #4]
 c005c66:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)MPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
 c005c6a:	683b      	ldr	r3, [r7, #0]
 c005c6c:	7bdb      	ldrb	r3, [r3, #15]
 c005c6e:	00db      	lsls	r3, r3, #3
    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c005c70:	431a      	orrs	r2, r3
                  ((uint32_t)MPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
 c005c72:	683b      	ldr	r3, [r7, #0]
 c005c74:	7b5b      	ldrb	r3, [r3, #13]
 c005c76:	005b      	lsls	r3, r3, #1
                  ((uint32_t)MPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
 c005c78:	4313      	orrs	r3, r2
                  ((uint32_t)MPU_RegionInit->DisableExec      << MPU_RBAR_XN_Pos));
 c005c7a:	683a      	ldr	r2, [r7, #0]
 c005c7c:	7b92      	ldrb	r2, [r2, #14]
                  ((uint32_t)MPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
 c005c7e:	431a      	orrs	r2, r3
    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c005c80:	687b      	ldr	r3, [r7, #4]
 c005c82:	60da      	str	r2, [r3, #12]

    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c005c84:	683b      	ldr	r3, [r7, #0]
 c005c86:	689b      	ldr	r3, [r3, #8]
 c005c88:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)MPU_RegionInit->AttributesIndex << MPU_RLAR_AttrIndx_Pos) |
 c005c8c:	683b      	ldr	r3, [r7, #0]
 c005c8e:	7b1b      	ldrb	r3, [r3, #12]
 c005c90:	005b      	lsls	r3, r3, #1
    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c005c92:	4313      	orrs	r3, r2
                  ((uint32_t)MPU_RegionInit->Enable          << MPU_RLAR_EN_Pos));
 c005c94:	683a      	ldr	r2, [r7, #0]
 c005c96:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)MPU_RegionInit->AttributesIndex << MPU_RLAR_AttrIndx_Pos) |
 c005c98:	431a      	orrs	r2, r3
    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c005c9a:	687b      	ldr	r3, [r7, #4]
 c005c9c:	611a      	str	r2, [r3, #16]
  else
  {
    MPUx->RBAR = 0U;
    MPUx->RLAR = 0U;
  }
}
 c005c9e:	e005      	b.n	c005cac <MPU_ConfigRegion+0x6c>
    MPUx->RBAR = 0U;
 c005ca0:	687b      	ldr	r3, [r7, #4]
 c005ca2:	2200      	movs	r2, #0
 c005ca4:	60da      	str	r2, [r3, #12]
    MPUx->RLAR = 0U;
 c005ca6:	687b      	ldr	r3, [r7, #4]
 c005ca8:	2200      	movs	r2, #0
 c005caa:	611a      	str	r2, [r3, #16]
}
 c005cac:	bf00      	nop
 c005cae:	370c      	adds	r7, #12
 c005cb0:	46bd      	mov	sp, r7
 c005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005cb6:	4770      	bx	lr

0c005cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c005cb8:	b480      	push	{r7}
 c005cba:	b087      	sub	sp, #28
 c005cbc:	af00      	add	r7, sp, #0
 c005cbe:	6078      	str	r0, [r7, #4]
 c005cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c005cc2:	2300      	movs	r3, #0
 c005cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c005cc6:	e158      	b.n	c005f7a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c005cc8:	683b      	ldr	r3, [r7, #0]
 c005cca:	681a      	ldr	r2, [r3, #0]
 c005ccc:	2101      	movs	r1, #1
 c005cce:	697b      	ldr	r3, [r7, #20]
 c005cd0:	fa01 f303 	lsl.w	r3, r1, r3
 c005cd4:	4013      	ands	r3, r2
 c005cd6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c005cd8:	68fb      	ldr	r3, [r7, #12]
 c005cda:	2b00      	cmp	r3, #0
 c005cdc:	f000 814a 	beq.w	c005f74 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c005ce0:	683b      	ldr	r3, [r7, #0]
 c005ce2:	685b      	ldr	r3, [r3, #4]
 c005ce4:	2b01      	cmp	r3, #1
 c005ce6:	d00b      	beq.n	c005d00 <HAL_GPIO_Init+0x48>
 c005ce8:	683b      	ldr	r3, [r7, #0]
 c005cea:	685b      	ldr	r3, [r3, #4]
 c005cec:	2b02      	cmp	r3, #2
 c005cee:	d007      	beq.n	c005d00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005cf0:	683b      	ldr	r3, [r7, #0]
 c005cf2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c005cf4:	2b11      	cmp	r3, #17
 c005cf6:	d003      	beq.n	c005d00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005cf8:	683b      	ldr	r3, [r7, #0]
 c005cfa:	685b      	ldr	r3, [r3, #4]
 c005cfc:	2b12      	cmp	r3, #18
 c005cfe:	d130      	bne.n	c005d62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c005d00:	687b      	ldr	r3, [r7, #4]
 c005d02:	689b      	ldr	r3, [r3, #8]
 c005d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c005d06:	697b      	ldr	r3, [r7, #20]
 c005d08:	005b      	lsls	r3, r3, #1
 c005d0a:	2203      	movs	r2, #3
 c005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 c005d10:	43db      	mvns	r3, r3
 c005d12:	693a      	ldr	r2, [r7, #16]
 c005d14:	4013      	ands	r3, r2
 c005d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c005d18:	683b      	ldr	r3, [r7, #0]
 c005d1a:	68da      	ldr	r2, [r3, #12]
 c005d1c:	697b      	ldr	r3, [r7, #20]
 c005d1e:	005b      	lsls	r3, r3, #1
 c005d20:	fa02 f303 	lsl.w	r3, r2, r3
 c005d24:	693a      	ldr	r2, [r7, #16]
 c005d26:	4313      	orrs	r3, r2
 c005d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c005d2a:	687b      	ldr	r3, [r7, #4]
 c005d2c:	693a      	ldr	r2, [r7, #16]
 c005d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c005d30:	687b      	ldr	r3, [r7, #4]
 c005d32:	685b      	ldr	r3, [r3, #4]
 c005d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c005d36:	2201      	movs	r2, #1
 c005d38:	697b      	ldr	r3, [r7, #20]
 c005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 c005d3e:	43db      	mvns	r3, r3
 c005d40:	693a      	ldr	r2, [r7, #16]
 c005d42:	4013      	ands	r3, r2
 c005d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c005d46:	683b      	ldr	r3, [r7, #0]
 c005d48:	685b      	ldr	r3, [r3, #4]
 c005d4a:	091b      	lsrs	r3, r3, #4
 c005d4c:	f003 0201 	and.w	r2, r3, #1
 c005d50:	697b      	ldr	r3, [r7, #20]
 c005d52:	fa02 f303 	lsl.w	r3, r2, r3
 c005d56:	693a      	ldr	r2, [r7, #16]
 c005d58:	4313      	orrs	r3, r2
 c005d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c005d5c:	687b      	ldr	r3, [r7, #4]
 c005d5e:	693a      	ldr	r2, [r7, #16]
 c005d60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c005d62:	687b      	ldr	r3, [r7, #4]
 c005d64:	68db      	ldr	r3, [r3, #12]
 c005d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c005d68:	697b      	ldr	r3, [r7, #20]
 c005d6a:	005b      	lsls	r3, r3, #1
 c005d6c:	2203      	movs	r2, #3
 c005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 c005d72:	43db      	mvns	r3, r3
 c005d74:	693a      	ldr	r2, [r7, #16]
 c005d76:	4013      	ands	r3, r2
 c005d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c005d7a:	683b      	ldr	r3, [r7, #0]
 c005d7c:	689a      	ldr	r2, [r3, #8]
 c005d7e:	697b      	ldr	r3, [r7, #20]
 c005d80:	005b      	lsls	r3, r3, #1
 c005d82:	fa02 f303 	lsl.w	r3, r2, r3
 c005d86:	693a      	ldr	r2, [r7, #16]
 c005d88:	4313      	orrs	r3, r2
 c005d8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c005d8c:	687b      	ldr	r3, [r7, #4]
 c005d8e:	693a      	ldr	r2, [r7, #16]
 c005d90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005d92:	683b      	ldr	r3, [r7, #0]
 c005d94:	685b      	ldr	r3, [r3, #4]
 c005d96:	2b02      	cmp	r3, #2
 c005d98:	d003      	beq.n	c005da2 <HAL_GPIO_Init+0xea>
 c005d9a:	683b      	ldr	r3, [r7, #0]
 c005d9c:	685b      	ldr	r3, [r3, #4]
 c005d9e:	2b12      	cmp	r3, #18
 c005da0:	d123      	bne.n	c005dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c005da2:	697b      	ldr	r3, [r7, #20]
 c005da4:	08da      	lsrs	r2, r3, #3
 c005da6:	687b      	ldr	r3, [r7, #4]
 c005da8:	3208      	adds	r2, #8
 c005daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c005dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c005db0:	697b      	ldr	r3, [r7, #20]
 c005db2:	f003 0307 	and.w	r3, r3, #7
 c005db6:	009b      	lsls	r3, r3, #2
 c005db8:	220f      	movs	r2, #15
 c005dba:	fa02 f303 	lsl.w	r3, r2, r3
 c005dbe:	43db      	mvns	r3, r3
 c005dc0:	693a      	ldr	r2, [r7, #16]
 c005dc2:	4013      	ands	r3, r2
 c005dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c005dc6:	683b      	ldr	r3, [r7, #0]
 c005dc8:	691a      	ldr	r2, [r3, #16]
 c005dca:	697b      	ldr	r3, [r7, #20]
 c005dcc:	f003 0307 	and.w	r3, r3, #7
 c005dd0:	009b      	lsls	r3, r3, #2
 c005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 c005dd6:	693a      	ldr	r2, [r7, #16]
 c005dd8:	4313      	orrs	r3, r2
 c005dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c005ddc:	697b      	ldr	r3, [r7, #20]
 c005dde:	08da      	lsrs	r2, r3, #3
 c005de0:	687b      	ldr	r3, [r7, #4]
 c005de2:	3208      	adds	r2, #8
 c005de4:	6939      	ldr	r1, [r7, #16]
 c005de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c005dea:	687b      	ldr	r3, [r7, #4]
 c005dec:	681b      	ldr	r3, [r3, #0]
 c005dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c005df0:	697b      	ldr	r3, [r7, #20]
 c005df2:	005b      	lsls	r3, r3, #1
 c005df4:	2203      	movs	r2, #3
 c005df6:	fa02 f303 	lsl.w	r3, r2, r3
 c005dfa:	43db      	mvns	r3, r3
 c005dfc:	693a      	ldr	r2, [r7, #16]
 c005dfe:	4013      	ands	r3, r2
 c005e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c005e02:	683b      	ldr	r3, [r7, #0]
 c005e04:	685b      	ldr	r3, [r3, #4]
 c005e06:	f003 0203 	and.w	r2, r3, #3
 c005e0a:	697b      	ldr	r3, [r7, #20]
 c005e0c:	005b      	lsls	r3, r3, #1
 c005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 c005e12:	693a      	ldr	r2, [r7, #16]
 c005e14:	4313      	orrs	r3, r2
 c005e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c005e18:	687b      	ldr	r3, [r7, #4]
 c005e1a:	693a      	ldr	r2, [r7, #16]
 c005e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c005e1e:	683b      	ldr	r3, [r7, #0]
 c005e20:	685b      	ldr	r3, [r3, #4]
 c005e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c005e26:	2b00      	cmp	r3, #0
 c005e28:	f000 80a4 	beq.w	c005f74 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c005e2c:	4a5a      	ldr	r2, [pc, #360]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005e2e:	697b      	ldr	r3, [r7, #20]
 c005e30:	089b      	lsrs	r3, r3, #2
 c005e32:	3318      	adds	r3, #24
 c005e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005e38:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c005e3a:	697b      	ldr	r3, [r7, #20]
 c005e3c:	f003 0303 	and.w	r3, r3, #3
 c005e40:	00db      	lsls	r3, r3, #3
 c005e42:	220f      	movs	r2, #15
 c005e44:	fa02 f303 	lsl.w	r3, r2, r3
 c005e48:	43db      	mvns	r3, r3
 c005e4a:	693a      	ldr	r2, [r7, #16]
 c005e4c:	4013      	ands	r3, r2
 c005e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c005e50:	687b      	ldr	r3, [r7, #4]
 c005e52:	4a52      	ldr	r2, [pc, #328]	@ (c005f9c <HAL_GPIO_Init+0x2e4>)
 c005e54:	4293      	cmp	r3, r2
 c005e56:	d025      	beq.n	c005ea4 <HAL_GPIO_Init+0x1ec>
 c005e58:	687b      	ldr	r3, [r7, #4]
 c005e5a:	4a51      	ldr	r2, [pc, #324]	@ (c005fa0 <HAL_GPIO_Init+0x2e8>)
 c005e5c:	4293      	cmp	r3, r2
 c005e5e:	d01f      	beq.n	c005ea0 <HAL_GPIO_Init+0x1e8>
 c005e60:	687b      	ldr	r3, [r7, #4]
 c005e62:	4a50      	ldr	r2, [pc, #320]	@ (c005fa4 <HAL_GPIO_Init+0x2ec>)
 c005e64:	4293      	cmp	r3, r2
 c005e66:	d019      	beq.n	c005e9c <HAL_GPIO_Init+0x1e4>
 c005e68:	687b      	ldr	r3, [r7, #4]
 c005e6a:	4a4f      	ldr	r2, [pc, #316]	@ (c005fa8 <HAL_GPIO_Init+0x2f0>)
 c005e6c:	4293      	cmp	r3, r2
 c005e6e:	d013      	beq.n	c005e98 <HAL_GPIO_Init+0x1e0>
 c005e70:	687b      	ldr	r3, [r7, #4]
 c005e72:	4a4e      	ldr	r2, [pc, #312]	@ (c005fac <HAL_GPIO_Init+0x2f4>)
 c005e74:	4293      	cmp	r3, r2
 c005e76:	d00d      	beq.n	c005e94 <HAL_GPIO_Init+0x1dc>
 c005e78:	687b      	ldr	r3, [r7, #4]
 c005e7a:	4a4d      	ldr	r2, [pc, #308]	@ (c005fb0 <HAL_GPIO_Init+0x2f8>)
 c005e7c:	4293      	cmp	r3, r2
 c005e7e:	d007      	beq.n	c005e90 <HAL_GPIO_Init+0x1d8>
 c005e80:	687b      	ldr	r3, [r7, #4]
 c005e82:	4a4c      	ldr	r2, [pc, #304]	@ (c005fb4 <HAL_GPIO_Init+0x2fc>)
 c005e84:	4293      	cmp	r3, r2
 c005e86:	d101      	bne.n	c005e8c <HAL_GPIO_Init+0x1d4>
 c005e88:	2306      	movs	r3, #6
 c005e8a:	e00c      	b.n	c005ea6 <HAL_GPIO_Init+0x1ee>
 c005e8c:	2307      	movs	r3, #7
 c005e8e:	e00a      	b.n	c005ea6 <HAL_GPIO_Init+0x1ee>
 c005e90:	2305      	movs	r3, #5
 c005e92:	e008      	b.n	c005ea6 <HAL_GPIO_Init+0x1ee>
 c005e94:	2304      	movs	r3, #4
 c005e96:	e006      	b.n	c005ea6 <HAL_GPIO_Init+0x1ee>
 c005e98:	2303      	movs	r3, #3
 c005e9a:	e004      	b.n	c005ea6 <HAL_GPIO_Init+0x1ee>
 c005e9c:	2302      	movs	r3, #2
 c005e9e:	e002      	b.n	c005ea6 <HAL_GPIO_Init+0x1ee>
 c005ea0:	2301      	movs	r3, #1
 c005ea2:	e000      	b.n	c005ea6 <HAL_GPIO_Init+0x1ee>
 c005ea4:	2300      	movs	r3, #0
 c005ea6:	697a      	ldr	r2, [r7, #20]
 c005ea8:	f002 0203 	and.w	r2, r2, #3
 c005eac:	00d2      	lsls	r2, r2, #3
 c005eae:	4093      	lsls	r3, r2
 c005eb0:	693a      	ldr	r2, [r7, #16]
 c005eb2:	4313      	orrs	r3, r2
 c005eb4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c005eb6:	4938      	ldr	r1, [pc, #224]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005eb8:	697b      	ldr	r3, [r7, #20]
 c005eba:	089b      	lsrs	r3, r3, #2
 c005ebc:	3318      	adds	r3, #24
 c005ebe:	693a      	ldr	r2, [r7, #16]
 c005ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c005ec4:	4b34      	ldr	r3, [pc, #208]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c005eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005ecc:	68fb      	ldr	r3, [r7, #12]
 c005ece:	43db      	mvns	r3, r3
 c005ed0:	693a      	ldr	r2, [r7, #16]
 c005ed2:	4013      	ands	r3, r2
 c005ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c005ed6:	683b      	ldr	r3, [r7, #0]
 c005ed8:	685b      	ldr	r3, [r3, #4]
 c005eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c005ede:	2b00      	cmp	r3, #0
 c005ee0:	d003      	beq.n	c005eea <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c005ee2:	693a      	ldr	r2, [r7, #16]
 c005ee4:	68fb      	ldr	r3, [r7, #12]
 c005ee6:	4313      	orrs	r3, r2
 c005ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c005eea:	4a2b      	ldr	r2, [pc, #172]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005eec:	693b      	ldr	r3, [r7, #16]
 c005eee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 c005ef2:	4b29      	ldr	r3, [pc, #164]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c005ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005efa:	68fb      	ldr	r3, [r7, #12]
 c005efc:	43db      	mvns	r3, r3
 c005efe:	693a      	ldr	r2, [r7, #16]
 c005f00:	4013      	ands	r3, r2
 c005f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c005f04:	683b      	ldr	r3, [r7, #0]
 c005f06:	685b      	ldr	r3, [r3, #4]
 c005f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c005f0c:	2b00      	cmp	r3, #0
 c005f0e:	d003      	beq.n	c005f18 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c005f10:	693a      	ldr	r2, [r7, #16]
 c005f12:	68fb      	ldr	r3, [r7, #12]
 c005f14:	4313      	orrs	r3, r2
 c005f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c005f18:	4a1f      	ldr	r2, [pc, #124]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005f1a:	693b      	ldr	r3, [r7, #16]
 c005f1c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c005f20:	4b1d      	ldr	r3, [pc, #116]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005f22:	681b      	ldr	r3, [r3, #0]
 c005f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005f26:	68fb      	ldr	r3, [r7, #12]
 c005f28:	43db      	mvns	r3, r3
 c005f2a:	693a      	ldr	r2, [r7, #16]
 c005f2c:	4013      	ands	r3, r2
 c005f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c005f30:	683b      	ldr	r3, [r7, #0]
 c005f32:	685b      	ldr	r3, [r3, #4]
 c005f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 c005f38:	2b00      	cmp	r3, #0
 c005f3a:	d003      	beq.n	c005f44 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c005f3c:	693a      	ldr	r2, [r7, #16]
 c005f3e:	68fb      	ldr	r3, [r7, #12]
 c005f40:	4313      	orrs	r3, r2
 c005f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c005f44:	4a14      	ldr	r2, [pc, #80]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005f46:	693b      	ldr	r3, [r7, #16]
 c005f48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c005f4a:	4b13      	ldr	r3, [pc, #76]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005f4c:	685b      	ldr	r3, [r3, #4]
 c005f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005f50:	68fb      	ldr	r3, [r7, #12]
 c005f52:	43db      	mvns	r3, r3
 c005f54:	693a      	ldr	r2, [r7, #16]
 c005f56:	4013      	ands	r3, r2
 c005f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c005f5a:	683b      	ldr	r3, [r7, #0]
 c005f5c:	685b      	ldr	r3, [r3, #4]
 c005f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c005f62:	2b00      	cmp	r3, #0
 c005f64:	d003      	beq.n	c005f6e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c005f66:	693a      	ldr	r2, [r7, #16]
 c005f68:	68fb      	ldr	r3, [r7, #12]
 c005f6a:	4313      	orrs	r3, r2
 c005f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c005f6e:	4a0a      	ldr	r2, [pc, #40]	@ (c005f98 <HAL_GPIO_Init+0x2e0>)
 c005f70:	693b      	ldr	r3, [r7, #16]
 c005f72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c005f74:	697b      	ldr	r3, [r7, #20]
 c005f76:	3301      	adds	r3, #1
 c005f78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c005f7a:	683b      	ldr	r3, [r7, #0]
 c005f7c:	681a      	ldr	r2, [r3, #0]
 c005f7e:	697b      	ldr	r3, [r7, #20]
 c005f80:	fa22 f303 	lsr.w	r3, r2, r3
 c005f84:	2b00      	cmp	r3, #0
 c005f86:	f47f ae9f 	bne.w	c005cc8 <HAL_GPIO_Init+0x10>
  }
}
 c005f8a:	bf00      	nop
 c005f8c:	bf00      	nop
 c005f8e:	371c      	adds	r7, #28
 c005f90:	46bd      	mov	sp, r7
 c005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005f96:	4770      	bx	lr
 c005f98:	5002f400 	.word	0x5002f400
 c005f9c:	52020000 	.word	0x52020000
 c005fa0:	52020400 	.word	0x52020400
 c005fa4:	52020800 	.word	0x52020800
 c005fa8:	52020c00 	.word	0x52020c00
 c005fac:	52021000 	.word	0x52021000
 c005fb0:	52021400 	.word	0x52021400
 c005fb4:	52021800 	.word	0x52021800

0c005fb8 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c005fb8:	b480      	push	{r7}
 c005fba:	b085      	sub	sp, #20
 c005fbc:	af00      	add	r7, sp, #0
 c005fbe:	6078      	str	r0, [r7, #4]
 c005fc0:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c005fc2:	683b      	ldr	r3, [r7, #0]
 c005fc4:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 c005fc8:	d216      	bcs.n	c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c005fca:	687b      	ldr	r3, [r7, #4]
 c005fcc:	0f1b      	lsrs	r3, r3, #28
 c005fce:	015a      	lsls	r2, r3, #5
 c005fd0:	687b      	ldr	r3, [r7, #4]
 c005fd2:	f003 031f 	and.w	r3, r3, #31
 c005fd6:	4413      	add	r3, r2
 c005fd8:	2b32      	cmp	r3, #50	@ 0x32
 c005fda:	d80d      	bhi.n	c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c005fdc:	687b      	ldr	r3, [r7, #4]
 c005fde:	f003 0320 	and.w	r3, r3, #32
 c005fe2:	2b00      	cmp	r3, #0
 c005fe4:	d00a      	beq.n	c005ffc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c005fe6:	687b      	ldr	r3, [r7, #4]
 c005fe8:	0f1b      	lsrs	r3, r3, #28
 c005fea:	015a      	lsls	r2, r3, #5
 c005fec:	687b      	ldr	r3, [r7, #4]
 c005fee:	f003 031f 	and.w	r3, r3, #31
 c005ff2:	4413      	add	r3, r2
 c005ff4:	2b00      	cmp	r3, #0
 c005ff6:	d001      	beq.n	c005ffc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c005ff8:	2301      	movs	r3, #1
 c005ffa:	e0a4      	b.n	c006146 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c005ffc:	687b      	ldr	r3, [r7, #4]
 c005ffe:	f003 0320 	and.w	r3, r3, #32
 c006002:	2b00      	cmp	r3, #0
 c006004:	d04a      	beq.n	c00609c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c006006:	683a      	ldr	r2, [r7, #0]
 c006008:	f240 1301 	movw	r3, #257	@ 0x101
 c00600c:	4013      	ands	r3, r2
 c00600e:	f240 1201 	movw	r2, #257	@ 0x101
 c006012:	4293      	cmp	r3, r2
 c006014:	d10c      	bne.n	c006030 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x78>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c006016:	4b4f      	ldr	r3, [pc, #316]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006018:	691b      	ldr	r3, [r3, #16]
 c00601a:	4b4e      	ldr	r3, [pc, #312]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00601c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c006020:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c006022:	4b4c      	ldr	r3, [pc, #304]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006024:	695a      	ldr	r2, [r3, #20]
 c006026:	494b      	ldr	r1, [pc, #300]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006028:	4b4b      	ldr	r3, [pc, #300]	@ (c006158 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c00602a:	4313      	orrs	r3, r2
 c00602c:	614b      	str	r3, [r1, #20]
 c00602e:	e00f      	b.n	c006050 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c006030:	683b      	ldr	r3, [r7, #0]
 c006032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c006036:	2b00      	cmp	r3, #0
 c006038:	d00a      	beq.n	c006050 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00603a:	4b46      	ldr	r3, [pc, #280]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00603c:	691b      	ldr	r3, [r3, #16]
 c00603e:	4b45      	ldr	r3, [pc, #276]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006040:	2200      	movs	r2, #0
 c006042:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c006044:	4b43      	ldr	r3, [pc, #268]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006046:	695a      	ldr	r2, [r3, #20]
 c006048:	4942      	ldr	r1, [pc, #264]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00604a:	4b44      	ldr	r3, [pc, #272]	@ (c00615c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00604c:	4013      	ands	r3, r2
 c00604e:	614b      	str	r3, [r1, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c006050:	683a      	ldr	r2, [r7, #0]
 c006052:	f240 2302 	movw	r3, #514	@ 0x202
 c006056:	4013      	ands	r3, r2
 c006058:	f240 2202 	movw	r2, #514	@ 0x202
 c00605c:	4293      	cmp	r3, r2
 c00605e:	d10c      	bne.n	c00607a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c006060:	4b3c      	ldr	r3, [pc, #240]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006062:	6a1b      	ldr	r3, [r3, #32]
 c006064:	4b3b      	ldr	r3, [pc, #236]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006066:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c00606a:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c00606c:	4b39      	ldr	r3, [pc, #228]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00606e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c006070:	4938      	ldr	r1, [pc, #224]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006072:	4b39      	ldr	r3, [pc, #228]	@ (c006158 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c006074:	4313      	orrs	r3, r2
 c006076:	624b      	str	r3, [r1, #36]	@ 0x24
 c006078:	e064      	b.n	c006144 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00607a:	683b      	ldr	r3, [r7, #0]
 c00607c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c006080:	2b00      	cmp	r3, #0
 c006082:	d05f      	beq.n	c006144 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c006084:	4b33      	ldr	r3, [pc, #204]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006086:	6a1b      	ldr	r3, [r3, #32]
 c006088:	4b32      	ldr	r3, [pc, #200]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00608a:	2200      	movs	r2, #0
 c00608c:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c00608e:	4b31      	ldr	r3, [pc, #196]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c006092:	4930      	ldr	r1, [pc, #192]	@ (c006154 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006094:	4b31      	ldr	r3, [pc, #196]	@ (c00615c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c006096:	4013      	ands	r3, r2
 c006098:	624b      	str	r3, [r1, #36]	@ 0x24
 c00609a:	e053      	b.n	c006144 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c00609c:	687b      	ldr	r3, [r7, #4]
 c00609e:	0f1a      	lsrs	r2, r3, #28
 c0060a0:	4b2f      	ldr	r3, [pc, #188]	@ (c006160 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c0060a2:	4413      	add	r3, r2
 c0060a4:	009b      	lsls	r3, r3, #2
 c0060a6:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0060a8:	683a      	ldr	r2, [r7, #0]
 c0060aa:	f240 1301 	movw	r3, #257	@ 0x101
 c0060ae:	4013      	ands	r3, r2
 c0060b0:	f240 1201 	movw	r2, #257	@ 0x101
 c0060b4:	4293      	cmp	r3, r2
 c0060b6:	d10a      	bne.n	c0060ce <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x116>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0060b8:	68fb      	ldr	r3, [r7, #12]
 c0060ba:	6819      	ldr	r1, [r3, #0]
 c0060bc:	687b      	ldr	r3, [r7, #4]
 c0060be:	f003 031f 	and.w	r3, r3, #31
 c0060c2:	2201      	movs	r2, #1
 c0060c4:	409a      	lsls	r2, r3
 c0060c6:	68fb      	ldr	r3, [r7, #12]
 c0060c8:	430a      	orrs	r2, r1
 c0060ca:	601a      	str	r2, [r3, #0]
 c0060cc:	e010      	b.n	c0060f0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0060ce:	683b      	ldr	r3, [r7, #0]
 c0060d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c0060d4:	2b00      	cmp	r3, #0
 c0060d6:	d00b      	beq.n	c0060f0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0060d8:	68fb      	ldr	r3, [r7, #12]
 c0060da:	6819      	ldr	r1, [r3, #0]
 c0060dc:	687b      	ldr	r3, [r7, #4]
 c0060de:	f003 031f 	and.w	r3, r3, #31
 c0060e2:	2201      	movs	r2, #1
 c0060e4:	fa02 f303 	lsl.w	r3, r2, r3
 c0060e8:	43da      	mvns	r2, r3
 c0060ea:	68fb      	ldr	r3, [r7, #12]
 c0060ec:	400a      	ands	r2, r1
 c0060ee:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0060f0:	687b      	ldr	r3, [r7, #4]
 c0060f2:	0f1a      	lsrs	r2, r3, #28
 c0060f4:	4b1b      	ldr	r3, [pc, #108]	@ (c006164 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c0060f6:	4413      	add	r3, r2
 c0060f8:	009b      	lsls	r3, r3, #2
 c0060fa:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0060fc:	683a      	ldr	r2, [r7, #0]
 c0060fe:	f240 2302 	movw	r3, #514	@ 0x202
 c006102:	4013      	ands	r3, r2
 c006104:	f240 2202 	movw	r2, #514	@ 0x202
 c006108:	4293      	cmp	r3, r2
 c00610a:	d10a      	bne.n	c006122 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00610c:	68fb      	ldr	r3, [r7, #12]
 c00610e:	6819      	ldr	r1, [r3, #0]
 c006110:	687b      	ldr	r3, [r7, #4]
 c006112:	f003 031f 	and.w	r3, r3, #31
 c006116:	2201      	movs	r2, #1
 c006118:	409a      	lsls	r2, r3
 c00611a:	68fb      	ldr	r3, [r7, #12]
 c00611c:	430a      	orrs	r2, r1
 c00611e:	601a      	str	r2, [r3, #0]
 c006120:	e010      	b.n	c006144 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c006122:	683b      	ldr	r3, [r7, #0]
 c006124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c006128:	2b00      	cmp	r3, #0
 c00612a:	d00b      	beq.n	c006144 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00612c:	68fb      	ldr	r3, [r7, #12]
 c00612e:	6819      	ldr	r1, [r3, #0]
 c006130:	687b      	ldr	r3, [r7, #4]
 c006132:	f003 031f 	and.w	r3, r3, #31
 c006136:	2201      	movs	r2, #1
 c006138:	fa02 f303 	lsl.w	r3, r2, r3
 c00613c:	43da      	mvns	r2, r3
 c00613e:	68fb      	ldr	r3, [r7, #12]
 c006140:	400a      	ands	r2, r1
 c006142:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c006144:	2300      	movs	r3, #0
}
 c006146:	4618      	mov	r0, r3
 c006148:	3714      	adds	r7, #20
 c00614a:	46bd      	mov	sp, r7
 c00614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006150:	4770      	bx	lr
 c006152:	bf00      	nop
 c006154:	50032400 	.word	0x50032400
 c006158:	00076fff 	.word	0x00076fff
 c00615c:	fff89000 	.word	0xfff89000
 c006160:	1400c904 	.word	0x1400c904
 c006164:	1400c908 	.word	0x1400c908

0c006168 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c006168:	b480      	push	{r7}
 c00616a:	b089      	sub	sp, #36	@ 0x24
 c00616c:	af00      	add	r7, sp, #0
 c00616e:	6078      	str	r0, [r7, #4]
 c006170:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c006172:	687b      	ldr	r3, [r7, #4]
 c006174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c006178:	d00b      	beq.n	c006192 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00617a:	687b      	ldr	r3, [r7, #4]
 c00617c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c006180:	d007      	beq.n	c006192 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c006182:	687b      	ldr	r3, [r7, #4]
 c006184:	4a36      	ldr	r2, [pc, #216]	@ (c006260 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c006186:	4293      	cmp	r3, r2
 c006188:	d003      	beq.n	c006192 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00618a:	687b      	ldr	r3, [r7, #4]
 c00618c:	4a35      	ldr	r2, [pc, #212]	@ (c006264 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c00618e:	4293      	cmp	r3, r2
 c006190:	d111      	bne.n	c0061b6 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c006192:	683b      	ldr	r3, [r7, #0]
 c006194:	681b      	ldr	r3, [r3, #0]
 c006196:	2b00      	cmp	r3, #0
 c006198:	d004      	beq.n	c0061a4 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c00619a:	683b      	ldr	r3, [r7, #0]
 c00619c:	681b      	ldr	r3, [r3, #0]
 c00619e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c0061a2:	d108      	bne.n	c0061b6 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c0061a4:	683b      	ldr	r3, [r7, #0]
 c0061a6:	685b      	ldr	r3, [r3, #4]
 c0061a8:	2b00      	cmp	r3, #0
 c0061aa:	d006      	beq.n	c0061ba <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c0061ac:	683b      	ldr	r3, [r7, #0]
 c0061ae:	685b      	ldr	r3, [r3, #4]
 c0061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c0061b4:	d001      	beq.n	c0061ba <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c0061b6:	2301      	movs	r3, #1
 c0061b8:	e04b      	b.n	c006252 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c0061ba:	683b      	ldr	r3, [r7, #0]
 c0061bc:	685b      	ldr	r3, [r3, #4]
 c0061be:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c0061c0:	683b      	ldr	r3, [r7, #0]
 c0061c2:	681b      	ldr	r3, [r3, #0]
 c0061c4:	693a      	ldr	r2, [r7, #16]
 c0061c6:	4313      	orrs	r3, r2
 c0061c8:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0061ca:	687b      	ldr	r3, [r7, #4]
 c0061cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c0061d0:	d003      	beq.n	c0061da <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0061d2:	687b      	ldr	r3, [r7, #4]
 c0061d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c0061d8:	d105      	bne.n	c0061e6 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0061da:	4b23      	ldr	r3, [pc, #140]	@ (c006268 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c0061dc:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0061de:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 c0061e2:	61bb      	str	r3, [r7, #24]
 c0061e4:	e004      	b.n	c0061f0 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0061e6:	4b21      	ldr	r3, [pc, #132]	@ (c00626c <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c0061e8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0061ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 c0061ee:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0061f0:	69fb      	ldr	r3, [r7, #28]
 c0061f2:	681b      	ldr	r3, [r3, #0]
 c0061f4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 c0061f8:	693b      	ldr	r3, [r7, #16]
 c0061fa:	431a      	orrs	r2, r3
 c0061fc:	69fb      	ldr	r3, [r7, #28]
 c0061fe:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c006200:	69bb      	ldr	r3, [r7, #24]
 c006202:	0b5b      	lsrs	r3, r3, #13
 c006204:	2201      	movs	r2, #1
 c006206:	fa02 f303 	lsl.w	r3, r2, r3
 c00620a:	3b01      	subs	r3, #1
 c00620c:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c00620e:	69fb      	ldr	r3, [r7, #28]
 c006210:	691a      	ldr	r2, [r3, #16]
 c006212:	68fb      	ldr	r3, [r7, #12]
 c006214:	43db      	mvns	r3, r3
 c006216:	401a      	ands	r2, r3
 c006218:	683b      	ldr	r3, [r7, #0]
 c00621a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 c00621c:	431a      	orrs	r2, r3
 c00621e:	69fb      	ldr	r3, [r7, #28]
 c006220:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c006222:	69bb      	ldr	r3, [r7, #24]
 c006224:	0b5b      	lsrs	r3, r3, #13
 c006226:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c006228:	2300      	movs	r3, #0
 c00622a:	617b      	str	r3, [r7, #20]
 c00622c:	e00c      	b.n	c006248 <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c00622e:	683b      	ldr	r3, [r7, #0]
 c006230:	697a      	ldr	r2, [r7, #20]
 c006232:	3202      	adds	r2, #2
 c006234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c006238:	69fb      	ldr	r3, [r7, #28]
 c00623a:	697a      	ldr	r2, [r7, #20]
 c00623c:	3240      	adds	r2, #64	@ 0x40
 c00623e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c006242:	697b      	ldr	r3, [r7, #20]
 c006244:	3301      	adds	r3, #1
 c006246:	617b      	str	r3, [r7, #20]
 c006248:	697a      	ldr	r2, [r7, #20]
 c00624a:	68bb      	ldr	r3, [r7, #8]
 c00624c:	429a      	cmp	r2, r3
 c00624e:	d3ee      	bcc.n	c00622e <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c006250:	2300      	movs	r3, #0
}
 c006252:	4618      	mov	r0, r3
 c006254:	3724      	adds	r7, #36	@ 0x24
 c006256:	46bd      	mov	sp, r7
 c006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00625c:	4770      	bx	lr
 c00625e:	bf00      	nop
 c006260:	20030000 	.word	0x20030000
 c006264:	30030000 	.word	0x30030000
 c006268:	50032c00 	.word	0x50032c00
 c00626c:	50033000 	.word	0x50033000

0c006270 <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c006270:	b480      	push	{r7}
 c006272:	b085      	sub	sp, #20
 c006274:	af00      	add	r7, sp, #0
 c006276:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c006278:	687b      	ldr	r3, [r7, #4]
 c00627a:	0f1b      	lsrs	r3, r3, #28
 c00627c:	015a      	lsls	r2, r3, #5
 c00627e:	687b      	ldr	r3, [r7, #4]
 c006280:	f003 031f 	and.w	r3, r3, #31
 c006284:	4413      	add	r3, r2
 c006286:	2b47      	cmp	r3, #71	@ 0x47
 c006288:	d80d      	bhi.n	c0062a6 <HAL_GTZC_TZIC_EnableIT+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c00628a:	687b      	ldr	r3, [r7, #4]
 c00628c:	f003 0320 	and.w	r3, r3, #32
 c006290:	2b00      	cmp	r3, #0
 c006292:	d00a      	beq.n	c0062aa <HAL_GTZC_TZIC_EnableIT+0x3a>
 c006294:	687b      	ldr	r3, [r7, #4]
 c006296:	0f1b      	lsrs	r3, r3, #28
 c006298:	015a      	lsls	r2, r3, #5
 c00629a:	687b      	ldr	r3, [r7, #4]
 c00629c:	f003 031f 	and.w	r3, r3, #31
 c0062a0:	4413      	add	r3, r2
 c0062a2:	2b00      	cmp	r3, #0
 c0062a4:	d001      	beq.n	c0062aa <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c0062a6:	2301      	movs	r3, #1
 c0062a8:	e022      	b.n	c0062f0 <HAL_GTZC_TZIC_EnableIT+0x80>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0062aa:	687b      	ldr	r3, [r7, #4]
 c0062ac:	f003 0320 	and.w	r3, r3, #32
 c0062b0:	2b00      	cmp	r3, #0
 c0062b2:	d00a      	beq.n	c0062ca <HAL_GTZC_TZIC_EnableIT+0x5a>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c0062b4:	4b11      	ldr	r3, [pc, #68]	@ (c0062fc <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0062b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0062ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c0062bc:	4b0f      	ldr	r3, [pc, #60]	@ (c0062fc <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0062be:	4a10      	ldr	r2, [pc, #64]	@ (c006300 <HAL_GTZC_TZIC_EnableIT+0x90>)
 c0062c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c0062c2:	4b0e      	ldr	r3, [pc, #56]	@ (c0062fc <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0062c4:	22ff      	movs	r2, #255	@ 0xff
 c0062c6:	609a      	str	r2, [r3, #8]
 c0062c8:	e011      	b.n	c0062ee <HAL_GTZC_TZIC_EnableIT+0x7e>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0062ca:	687b      	ldr	r3, [r7, #4]
 c0062cc:	0f1b      	lsrs	r3, r3, #28
 c0062ce:	f103 53a0 	add.w	r3, r3, #335544320	@ 0x14000000
 c0062d2:	f503 434a 	add.w	r3, r3, #51712	@ 0xca00
 c0062d6:	009b      	lsls	r3, r3, #2
 c0062d8:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0062da:	68fb      	ldr	r3, [r7, #12]
 c0062dc:	6819      	ldr	r1, [r3, #0]
 c0062de:	687b      	ldr	r3, [r7, #4]
 c0062e0:	f003 031f 	and.w	r3, r3, #31
 c0062e4:	2201      	movs	r2, #1
 c0062e6:	409a      	lsls	r2, r3
 c0062e8:	68fb      	ldr	r3, [r7, #12]
 c0062ea:	430a      	orrs	r2, r1
 c0062ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c0062ee:	2300      	movs	r3, #0
}
 c0062f0:	4618      	mov	r0, r3
 c0062f2:	3714      	adds	r7, #20
 c0062f4:	46bd      	mov	sp, r7
 c0062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0062fa:	4770      	bx	lr
 c0062fc:	50032800 	.word	0x50032800
 c006300:	3fff6fff 	.word	0x3fff6fff

0c006304 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c006304:	b580      	push	{r7, lr}
 c006306:	b084      	sub	sp, #16
 c006308:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c00630a:	4b3f      	ldr	r3, [pc, #252]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c00630c:	681b      	ldr	r3, [r3, #0]
 c00630e:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c006310:	4b3d      	ldr	r3, [pc, #244]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c006312:	691b      	ldr	r3, [r3, #16]
 c006314:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c006316:	68ba      	ldr	r2, [r7, #8]
 c006318:	687b      	ldr	r3, [r7, #4]
 c00631a:	4013      	ands	r3, r2
 c00631c:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c00631e:	683b      	ldr	r3, [r7, #0]
 c006320:	2b00      	cmp	r3, #0
 c006322:	d019      	beq.n	c006358 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c006324:	4a38      	ldr	r2, [pc, #224]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c006326:	683b      	ldr	r3, [r7, #0]
 c006328:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c00632a:	2300      	movs	r3, #0
 c00632c:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00632e:	e00d      	b.n	c00634c <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c006330:	683a      	ldr	r2, [r7, #0]
 c006332:	68fb      	ldr	r3, [r7, #12]
 c006334:	fa22 f303 	lsr.w	r3, r2, r3
 c006338:	f003 0301 	and.w	r3, r3, #1
 c00633c:	2b00      	cmp	r3, #0
 c00633e:	d002      	beq.n	c006346 <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c006340:	68f8      	ldr	r0, [r7, #12]
 c006342:	f000 f863 	bl	c00640c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c006346:	68fb      	ldr	r3, [r7, #12]
 c006348:	3301      	adds	r3, #1
 c00634a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00634c:	683a      	ldr	r2, [r7, #0]
 c00634e:	68fb      	ldr	r3, [r7, #12]
 c006350:	fa22 f303 	lsr.w	r3, r2, r3
 c006354:	2b00      	cmp	r3, #0
 c006356:	d1eb      	bne.n	c006330 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c006358:	4b2b      	ldr	r3, [pc, #172]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c00635a:	685b      	ldr	r3, [r3, #4]
 c00635c:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c00635e:	4b2a      	ldr	r3, [pc, #168]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c006360:	695b      	ldr	r3, [r3, #20]
 c006362:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c006364:	68ba      	ldr	r2, [r7, #8]
 c006366:	687b      	ldr	r3, [r7, #4]
 c006368:	4013      	ands	r3, r2
 c00636a:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c00636c:	683b      	ldr	r3, [r7, #0]
 c00636e:	2b00      	cmp	r3, #0
 c006370:	d01c      	beq.n	c0063ac <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c006372:	4a25      	ldr	r2, [pc, #148]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c006374:	683b      	ldr	r3, [r7, #0]
 c006376:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c006378:	2300      	movs	r3, #0
 c00637a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00637c:	e010      	b.n	c0063a0 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c00637e:	683a      	ldr	r2, [r7, #0]
 c006380:	68fb      	ldr	r3, [r7, #12]
 c006382:	fa22 f303 	lsr.w	r3, r2, r3
 c006386:	f003 0301 	and.w	r3, r3, #1
 c00638a:	2b00      	cmp	r3, #0
 c00638c:	d005      	beq.n	c00639a <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c00638e:	68fb      	ldr	r3, [r7, #12]
 c006390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c006394:	4618      	mov	r0, r3
 c006396:	f000 f839 	bl	c00640c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00639a:	68fb      	ldr	r3, [r7, #12]
 c00639c:	3301      	adds	r3, #1
 c00639e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0063a0:	683a      	ldr	r2, [r7, #0]
 c0063a2:	68fb      	ldr	r3, [r7, #12]
 c0063a4:	fa22 f303 	lsr.w	r3, r2, r3
 c0063a8:	2b00      	cmp	r3, #0
 c0063aa:	d1e8      	bne.n	c00637e <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c0063ac:	4b16      	ldr	r3, [pc, #88]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c0063ae:	689b      	ldr	r3, [r3, #8]
 c0063b0:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c0063b2:	4b15      	ldr	r3, [pc, #84]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c0063b4:	699b      	ldr	r3, [r3, #24]
 c0063b6:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0063b8:	68ba      	ldr	r2, [r7, #8]
 c0063ba:	687b      	ldr	r3, [r7, #4]
 c0063bc:	4013      	ands	r3, r2
 c0063be:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0063c0:	683b      	ldr	r3, [r7, #0]
 c0063c2:	2b00      	cmp	r3, #0
 c0063c4:	d01c      	beq.n	c006400 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c0063c6:	4a10      	ldr	r2, [pc, #64]	@ (c006408 <HAL_GTZC_IRQHandler+0x104>)
 c0063c8:	683b      	ldr	r3, [r7, #0]
 c0063ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0063cc:	2300      	movs	r3, #0
 c0063ce:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0063d0:	e010      	b.n	c0063f4 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c0063d2:	683a      	ldr	r2, [r7, #0]
 c0063d4:	68fb      	ldr	r3, [r7, #12]
 c0063d6:	fa22 f303 	lsr.w	r3, r2, r3
 c0063da:	f003 0301 	and.w	r3, r3, #1
 c0063de:	2b00      	cmp	r3, #0
 c0063e0:	d005      	beq.n	c0063ee <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c0063e2:	68fb      	ldr	r3, [r7, #12]
 c0063e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 c0063e8:	4618      	mov	r0, r3
 c0063ea:	f000 f80f 	bl	c00640c <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0063ee:	68fb      	ldr	r3, [r7, #12]
 c0063f0:	3301      	adds	r3, #1
 c0063f2:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0063f4:	683a      	ldr	r2, [r7, #0]
 c0063f6:	68fb      	ldr	r3, [r7, #12]
 c0063f8:	fa22 f303 	lsr.w	r3, r2, r3
 c0063fc:	2b00      	cmp	r3, #0
 c0063fe:	d1e8      	bne.n	c0063d2 <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c006400:	bf00      	nop
 c006402:	3710      	adds	r7, #16
 c006404:	46bd      	mov	sp, r7
 c006406:	bd80      	pop	{r7, pc}
 c006408:	50032800 	.word	0x50032800

0c00640c <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c00640c:	b480      	push	{r7}
 c00640e:	b083      	sub	sp, #12
 c006410:	af00      	add	r7, sp, #0
 c006412:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c006414:	bf00      	nop
 c006416:	370c      	adds	r7, #12
 c006418:	46bd      	mov	sp, r7
 c00641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00641e:	4770      	bx	lr

0c006420 <HAL_PWR_ConfigAttributes>:
  *            @arg @ref PWR_SEC          Secure-only access
  *            @arg @ref PWR_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 c006420:	b480      	push	{r7}
 c006422:	b083      	sub	sp, #12
 c006424:	af00      	add	r7, sp, #0
 c006426:	6078      	str	r0, [r7, #4]
 c006428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
  assert_param(IS_PWR_ATTRIBUTES(Attributes));

  /* Privilege/non-privilege attribute */
  if ((Attributes & PWR_PRIV) == PWR_PRIV)
 c00642a:	683a      	ldr	r2, [r7, #0]
 c00642c:	f240 2302 	movw	r3, #514	@ 0x202
 c006430:	4013      	ands	r3, r2
 c006432:	f240 2202 	movw	r2, #514	@ 0x202
 c006436:	4293      	cmp	r3, r2
 c006438:	d108      	bne.n	c00644c <HAL_PWR_ConfigAttributes+0x2c>
  {
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c00643a:	4b1b      	ldr	r3, [pc, #108]	@ (c0064a8 <HAL_PWR_ConfigAttributes+0x88>)
 c00643c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c006440:	4a19      	ldr	r2, [pc, #100]	@ (c0064a8 <HAL_PWR_ConfigAttributes+0x88>)
 c006442:	f043 0301 	orr.w	r3, r3, #1
 c006446:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 c00644a:	e00c      	b.n	c006466 <HAL_PWR_ConfigAttributes+0x46>
  }
  else if ((Attributes & PWR_NPRIV) == PWR_NPRIV)
 c00644c:	683b      	ldr	r3, [r7, #0]
 c00644e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c006452:	2b00      	cmp	r3, #0
 c006454:	d007      	beq.n	c006466 <HAL_PWR_ConfigAttributes+0x46>
  {
    CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c006456:	4b14      	ldr	r3, [pc, #80]	@ (c0064a8 <HAL_PWR_ConfigAttributes+0x88>)
 c006458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c00645c:	4a12      	ldr	r2, [pc, #72]	@ (c0064a8 <HAL_PWR_ConfigAttributes+0x88>)
 c00645e:	f023 0301 	bic.w	r3, r3, #1
 c006462:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Secure/non-secure attribute */
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c006466:	683a      	ldr	r2, [r7, #0]
 c006468:	f240 1301 	movw	r3, #257	@ 0x101
 c00646c:	4013      	ands	r3, r2
 c00646e:	f240 1201 	movw	r2, #257	@ 0x101
 c006472:	4293      	cmp	r3, r2
 c006474:	d106      	bne.n	c006484 <HAL_PWR_ConfigAttributes+0x64>
  {
    SET_BIT(PWR_S->SECCFGR, Item);
 c006476:	4b0c      	ldr	r3, [pc, #48]	@ (c0064a8 <HAL_PWR_ConfigAttributes+0x88>)
 c006478:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 c00647a:	490b      	ldr	r1, [pc, #44]	@ (c0064a8 <HAL_PWR_ConfigAttributes+0x88>)
 c00647c:	687b      	ldr	r3, [r7, #4]
 c00647e:	4313      	orrs	r3, r2
 c006480:	678b      	str	r3, [r1, #120]	@ 0x78
  {
    /* do nothing */
  }

#endif /* __ARM_FEATURE_CMSE */
}
 c006482:	e00b      	b.n	c00649c <HAL_PWR_ConfigAttributes+0x7c>
  else if ((Attributes & PWR_NSEC) == PWR_NSEC)
 c006484:	683b      	ldr	r3, [r7, #0]
 c006486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c00648a:	2b00      	cmp	r3, #0
 c00648c:	d006      	beq.n	c00649c <HAL_PWR_ConfigAttributes+0x7c>
    CLEAR_BIT(PWR_S->SECCFGR, Item);
 c00648e:	4b06      	ldr	r3, [pc, #24]	@ (c0064a8 <HAL_PWR_ConfigAttributes+0x88>)
 c006490:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 c006492:	687b      	ldr	r3, [r7, #4]
 c006494:	43db      	mvns	r3, r3
 c006496:	4904      	ldr	r1, [pc, #16]	@ (c0064a8 <HAL_PWR_ConfigAttributes+0x88>)
 c006498:	4013      	ands	r3, r2
 c00649a:	678b      	str	r3, [r1, #120]	@ 0x78
}
 c00649c:	bf00      	nop
 c00649e:	370c      	adds	r7, #12
 c0064a0:	46bd      	mov	sp, r7
 c0064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0064a6:	4770      	bx	lr
 c0064a8:	50007000 	.word	0x50007000

0c0064ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c0064ac:	b480      	push	{r7}
 c0064ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c0064b0:	4b04      	ldr	r3, [pc, #16]	@ (c0064c4 <HAL_PWREx_GetVoltageRange+0x18>)
 c0064b2:	681b      	ldr	r3, [r3, #0]
 c0064b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 c0064b8:	4618      	mov	r0, r3
 c0064ba:	46bd      	mov	sp, r7
 c0064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0064c0:	4770      	bx	lr
 c0064c2:	bf00      	nop
 c0064c4:	50007000 	.word	0x50007000

0c0064c8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c0064c8:	b580      	push	{r7, lr}
 c0064ca:	b084      	sub	sp, #16
 c0064cc:	af00      	add	r7, sp, #0
 c0064ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c0064d0:	4b27      	ldr	r3, [pc, #156]	@ (c006570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0064d2:	681b      	ldr	r3, [r3, #0]
 c0064d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 c0064d8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c0064da:	f000 f871 	bl	c0065c0 <HAL_PWREx_SMPS_GetEffectiveMode>
 c0064de:	4603      	mov	r3, r0
 c0064e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c0064e4:	d101      	bne.n	c0064ea <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c0064e6:	2301      	movs	r3, #1
 c0064e8:	e03e      	b.n	c006568 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c0064ea:	4b21      	ldr	r3, [pc, #132]	@ (c006570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0064ec:	68db      	ldr	r3, [r3, #12]
 c0064ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c0064f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c0064f6:	d101      	bne.n	c0064fc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c0064f8:	2301      	movs	r3, #1
 c0064fa:	e035      	b.n	c006568 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c0064fc:	68ba      	ldr	r2, [r7, #8]
 c0064fe:	687b      	ldr	r3, [r7, #4]
 c006500:	429a      	cmp	r2, r3
 c006502:	d101      	bne.n	c006508 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c006504:	2300      	movs	r3, #0
 c006506:	e02f      	b.n	c006568 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c006508:	4b19      	ldr	r3, [pc, #100]	@ (c006570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00650a:	681b      	ldr	r3, [r3, #0]
 c00650c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 c006510:	4917      	ldr	r1, [pc, #92]	@ (c006570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c006512:	687b      	ldr	r3, [r7, #4]
 c006514:	4313      	orrs	r3, r2
 c006516:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c006518:	4b16      	ldr	r3, [pc, #88]	@ (c006574 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c00651a:	681b      	ldr	r3, [r3, #0]
 c00651c:	095b      	lsrs	r3, r3, #5
 c00651e:	4a16      	ldr	r2, [pc, #88]	@ (c006578 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c006520:	fba2 2303 	umull	r2, r3, r2, r3
 c006524:	09db      	lsrs	r3, r3, #7
 c006526:	2232      	movs	r2, #50	@ 0x32
 c006528:	fb02 f303 	mul.w	r3, r2, r3
 c00652c:	4a13      	ldr	r2, [pc, #76]	@ (c00657c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c00652e:	fba2 2303 	umull	r2, r3, r2, r3
 c006532:	08db      	lsrs	r3, r3, #3
 c006534:	3301      	adds	r3, #1
 c006536:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c006538:	e002      	b.n	c006540 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c00653a:	68fb      	ldr	r3, [r7, #12]
 c00653c:	3b01      	subs	r3, #1
 c00653e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c006540:	4b0b      	ldr	r3, [pc, #44]	@ (c006570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c006542:	695b      	ldr	r3, [r3, #20]
 c006544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00654c:	d102      	bne.n	c006554 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c00654e:	68fb      	ldr	r3, [r7, #12]
 c006550:	2b00      	cmp	r3, #0
 c006552:	d1f2      	bne.n	c00653a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c006554:	4b06      	ldr	r3, [pc, #24]	@ (c006570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c006556:	695b      	ldr	r3, [r3, #20]
 c006558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00655c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c006560:	d101      	bne.n	c006566 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c006562:	2303      	movs	r3, #3
 c006564:	e000      	b.n	c006568 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c006566:	2300      	movs	r3, #0
}
 c006568:	4618      	mov	r0, r3
 c00656a:	3710      	adds	r7, #16
 c00656c:	46bd      	mov	sp, r7
 c00656e:	bd80      	pop	{r7, pc}
 c006570:	50007000 	.word	0x50007000
 c006574:	30000610 	.word	0x30000610
 c006578:	0a7c5ac5 	.word	0x0a7c5ac5
 c00657c:	cccccccd 	.word	0xcccccccd

0c006580 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c006580:	b480      	push	{r7}
 c006582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c006584:	4b05      	ldr	r3, [pc, #20]	@ (c00659c <HAL_PWREx_EnableVddIO2+0x1c>)
 c006586:	685b      	ldr	r3, [r3, #4]
 c006588:	4a04      	ldr	r2, [pc, #16]	@ (c00659c <HAL_PWREx_EnableVddIO2+0x1c>)
 c00658a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 c00658e:	6053      	str	r3, [r2, #4]
}
 c006590:	bf00      	nop
 c006592:	46bd      	mov	sp, r7
 c006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006598:	4770      	bx	lr
 c00659a:	bf00      	nop
 c00659c:	50007000 	.word	0x50007000

0c0065a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c0065a0:	b480      	push	{r7}
 c0065a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c0065a4:	4b05      	ldr	r3, [pc, #20]	@ (c0065bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c0065a6:	689b      	ldr	r3, [r3, #8]
 c0065a8:	4a04      	ldr	r2, [pc, #16]	@ (c0065bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c0065aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c0065ae:	6093      	str	r3, [r2, #8]
}
 c0065b0:	bf00      	nop
 c0065b2:	46bd      	mov	sp, r7
 c0065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0065b8:	4770      	bx	lr
 c0065ba:	bf00      	nop
 c0065bc:	50007000 	.word	0x50007000

0c0065c0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c0065c0:	b480      	push	{r7}
 c0065c2:	b083      	sub	sp, #12
 c0065c4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c0065c6:	4b0f      	ldr	r3, [pc, #60]	@ (c006604 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c0065c8:	691b      	ldr	r3, [r3, #16]
 c0065ca:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c0065cc:	683b      	ldr	r3, [r7, #0]
 c0065ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 c0065d2:	2b00      	cmp	r3, #0
 c0065d4:	d003      	beq.n	c0065de <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c0065d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 c0065da:	607b      	str	r3, [r7, #4]
 c0065dc:	e00a      	b.n	c0065f4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c0065de:	683b      	ldr	r3, [r7, #0]
 c0065e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c0065e4:	2b00      	cmp	r3, #0
 c0065e6:	d103      	bne.n	c0065f0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c0065e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c0065ec:	607b      	str	r3, [r7, #4]
 c0065ee:	e001      	b.n	c0065f4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c0065f0:	2300      	movs	r3, #0
 c0065f2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c0065f4:	687b      	ldr	r3, [r7, #4]
}
 c0065f6:	4618      	mov	r0, r3
 c0065f8:	370c      	adds	r7, #12
 c0065fa:	46bd      	mov	sp, r7
 c0065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006600:	4770      	bx	lr
 c006602:	bf00      	nop
 c006604:	50007000 	.word	0x50007000

0c006608 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c006608:	b580      	push	{r7, lr}
 c00660a:	b088      	sub	sp, #32
 c00660c:	af00      	add	r7, sp, #0
 c00660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c006610:	687b      	ldr	r3, [r7, #4]
 c006612:	2b00      	cmp	r3, #0
 c006614:	d102      	bne.n	c00661c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c006616:	2301      	movs	r3, #1
 c006618:	f000 bcd0 	b.w	c006fbc <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00661c:	4b99      	ldr	r3, [pc, #612]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00661e:	689b      	ldr	r3, [r3, #8]
 c006620:	f003 030c 	and.w	r3, r3, #12
 c006624:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c006626:	4b97      	ldr	r3, [pc, #604]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006628:	68db      	ldr	r3, [r3, #12]
 c00662a:	f003 0303 	and.w	r3, r3, #3
 c00662e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c006630:	687b      	ldr	r3, [r7, #4]
 c006632:	681b      	ldr	r3, [r3, #0]
 c006634:	f003 0310 	and.w	r3, r3, #16
 c006638:	2b00      	cmp	r3, #0
 c00663a:	f000 80e9 	beq.w	c006810 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00663e:	69bb      	ldr	r3, [r7, #24]
 c006640:	2b00      	cmp	r3, #0
 c006642:	d006      	beq.n	c006652 <HAL_RCC_OscConfig+0x4a>
 c006644:	69bb      	ldr	r3, [r7, #24]
 c006646:	2b0c      	cmp	r3, #12
 c006648:	f040 8083 	bne.w	c006752 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c00664c:	697b      	ldr	r3, [r7, #20]
 c00664e:	2b01      	cmp	r3, #1
 c006650:	d17f      	bne.n	c006752 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c006652:	4b8c      	ldr	r3, [pc, #560]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006654:	681b      	ldr	r3, [r3, #0]
 c006656:	f003 0302 	and.w	r3, r3, #2
 c00665a:	2b00      	cmp	r3, #0
 c00665c:	d006      	beq.n	c00666c <HAL_RCC_OscConfig+0x64>
 c00665e:	687b      	ldr	r3, [r7, #4]
 c006660:	69db      	ldr	r3, [r3, #28]
 c006662:	2b00      	cmp	r3, #0
 c006664:	d102      	bne.n	c00666c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c006666:	2301      	movs	r3, #1
 c006668:	f000 bca8 	b.w	c006fbc <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c00666c:	687b      	ldr	r3, [r7, #4]
 c00666e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c006670:	4b84      	ldr	r3, [pc, #528]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006672:	681b      	ldr	r3, [r3, #0]
 c006674:	f003 0308 	and.w	r3, r3, #8
 c006678:	2b00      	cmp	r3, #0
 c00667a:	d004      	beq.n	c006686 <HAL_RCC_OscConfig+0x7e>
 c00667c:	4b81      	ldr	r3, [pc, #516]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00667e:	681b      	ldr	r3, [r3, #0]
 c006680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 c006684:	e005      	b.n	c006692 <HAL_RCC_OscConfig+0x8a>
 c006686:	4b7f      	ldr	r3, [pc, #508]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00668c:	091b      	lsrs	r3, r3, #4
 c00668e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 c006692:	4293      	cmp	r3, r2
 c006694:	d224      	bcs.n	c0066e0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c006696:	687b      	ldr	r3, [r7, #4]
 c006698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00669a:	4618      	mov	r0, r3
 c00669c:	f000 fe96 	bl	c0073cc <RCC_SetFlashLatencyFromMSIRange>
 c0066a0:	4603      	mov	r3, r0
 c0066a2:	2b00      	cmp	r3, #0
 c0066a4:	d002      	beq.n	c0066ac <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c0066a6:	2301      	movs	r3, #1
 c0066a8:	f000 bc88 	b.w	c006fbc <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0066ac:	4b75      	ldr	r3, [pc, #468]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066ae:	681b      	ldr	r3, [r3, #0]
 c0066b0:	4a74      	ldr	r2, [pc, #464]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066b2:	f043 0308 	orr.w	r3, r3, #8
 c0066b6:	6013      	str	r3, [r2, #0]
 c0066b8:	4b72      	ldr	r3, [pc, #456]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066ba:	681b      	ldr	r3, [r3, #0]
 c0066bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 c0066c0:	687b      	ldr	r3, [r7, #4]
 c0066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0066c4:	496f      	ldr	r1, [pc, #444]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066c6:	4313      	orrs	r3, r2
 c0066c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0066ca:	4b6e      	ldr	r3, [pc, #440]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066cc:	685b      	ldr	r3, [r3, #4]
 c0066ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 c0066d2:	687b      	ldr	r3, [r7, #4]
 c0066d4:	6a1b      	ldr	r3, [r3, #32]
 c0066d6:	021b      	lsls	r3, r3, #8
 c0066d8:	496a      	ldr	r1, [pc, #424]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066da:	4313      	orrs	r3, r2
 c0066dc:	604b      	str	r3, [r1, #4]
 c0066de:	e026      	b.n	c00672e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0066e0:	4b68      	ldr	r3, [pc, #416]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066e2:	681b      	ldr	r3, [r3, #0]
 c0066e4:	4a67      	ldr	r2, [pc, #412]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066e6:	f043 0308 	orr.w	r3, r3, #8
 c0066ea:	6013      	str	r3, [r2, #0]
 c0066ec:	4b65      	ldr	r3, [pc, #404]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066ee:	681b      	ldr	r3, [r3, #0]
 c0066f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 c0066f4:	687b      	ldr	r3, [r7, #4]
 c0066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0066f8:	4962      	ldr	r1, [pc, #392]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0066fa:	4313      	orrs	r3, r2
 c0066fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0066fe:	4b61      	ldr	r3, [pc, #388]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006700:	685b      	ldr	r3, [r3, #4]
 c006702:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 c006706:	687b      	ldr	r3, [r7, #4]
 c006708:	6a1b      	ldr	r3, [r3, #32]
 c00670a:	021b      	lsls	r3, r3, #8
 c00670c:	495d      	ldr	r1, [pc, #372]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00670e:	4313      	orrs	r3, r2
 c006710:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c006712:	69bb      	ldr	r3, [r7, #24]
 c006714:	2b00      	cmp	r3, #0
 c006716:	d10a      	bne.n	c00672e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c006718:	687b      	ldr	r3, [r7, #4]
 c00671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00671c:	4618      	mov	r0, r3
 c00671e:	f000 fe55 	bl	c0073cc <RCC_SetFlashLatencyFromMSIRange>
 c006722:	4603      	mov	r3, r0
 c006724:	2b00      	cmp	r3, #0
 c006726:	d002      	beq.n	c00672e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c006728:	2301      	movs	r3, #1
 c00672a:	f000 bc47 	b.w	c006fbc <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c00672e:	f000 fe11 	bl	c007354 <HAL_RCC_GetHCLKFreq>
 c006732:	4603      	mov	r3, r0
 c006734:	4a54      	ldr	r2, [pc, #336]	@ (c006888 <HAL_RCC_OscConfig+0x280>)
 c006736:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c006738:	4b54      	ldr	r3, [pc, #336]	@ (c00688c <HAL_RCC_OscConfig+0x284>)
 c00673a:	681b      	ldr	r3, [r3, #0]
 c00673c:	4618      	mov	r0, r3
 c00673e:	f7ff f8d3 	bl	c0058e8 <HAL_InitTick>
 c006742:	4603      	mov	r3, r0
 c006744:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c006746:	7bfb      	ldrb	r3, [r7, #15]
 c006748:	2b00      	cmp	r3, #0
 c00674a:	d060      	beq.n	c00680e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c00674c:	7bfb      	ldrb	r3, [r7, #15]
 c00674e:	f000 bc35 	b.w	c006fbc <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c006752:	687b      	ldr	r3, [r7, #4]
 c006754:	69db      	ldr	r3, [r3, #28]
 c006756:	2b00      	cmp	r3, #0
 c006758:	d039      	beq.n	c0067ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c00675a:	4b4a      	ldr	r3, [pc, #296]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00675c:	681b      	ldr	r3, [r3, #0]
 c00675e:	4a49      	ldr	r2, [pc, #292]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006760:	f043 0301 	orr.w	r3, r3, #1
 c006764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c006766:	f7ff f90f 	bl	c005988 <HAL_GetTick>
 c00676a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c00676c:	e00f      	b.n	c00678e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00676e:	f7ff f90b 	bl	c005988 <HAL_GetTick>
 c006772:	4602      	mov	r2, r0
 c006774:	693b      	ldr	r3, [r7, #16]
 c006776:	1ad3      	subs	r3, r2, r3
 c006778:	2b02      	cmp	r3, #2
 c00677a:	d908      	bls.n	c00678e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c00677c:	4b41      	ldr	r3, [pc, #260]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00677e:	681b      	ldr	r3, [r3, #0]
 c006780:	f003 0302 	and.w	r3, r3, #2
 c006784:	2b00      	cmp	r3, #0
 c006786:	d102      	bne.n	c00678e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c006788:	2303      	movs	r3, #3
 c00678a:	f000 bc17 	b.w	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c00678e:	4b3d      	ldr	r3, [pc, #244]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006790:	681b      	ldr	r3, [r3, #0]
 c006792:	f003 0302 	and.w	r3, r3, #2
 c006796:	2b00      	cmp	r3, #0
 c006798:	d0e9      	beq.n	c00676e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00679a:	4b3a      	ldr	r3, [pc, #232]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00679c:	681b      	ldr	r3, [r3, #0]
 c00679e:	4a39      	ldr	r2, [pc, #228]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0067a0:	f043 0308 	orr.w	r3, r3, #8
 c0067a4:	6013      	str	r3, [r2, #0]
 c0067a6:	4b37      	ldr	r3, [pc, #220]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0067a8:	681b      	ldr	r3, [r3, #0]
 c0067aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 c0067ae:	687b      	ldr	r3, [r7, #4]
 c0067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0067b2:	4934      	ldr	r1, [pc, #208]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0067b4:	4313      	orrs	r3, r2
 c0067b6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0067b8:	4b32      	ldr	r3, [pc, #200]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0067ba:	685b      	ldr	r3, [r3, #4]
 c0067bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 c0067c0:	687b      	ldr	r3, [r7, #4]
 c0067c2:	6a1b      	ldr	r3, [r3, #32]
 c0067c4:	021b      	lsls	r3, r3, #8
 c0067c6:	492f      	ldr	r1, [pc, #188]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0067c8:	4313      	orrs	r3, r2
 c0067ca:	604b      	str	r3, [r1, #4]
 c0067cc:	e020      	b.n	c006810 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c0067ce:	4b2d      	ldr	r3, [pc, #180]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0067d0:	681b      	ldr	r3, [r3, #0]
 c0067d2:	4a2c      	ldr	r2, [pc, #176]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0067d4:	f023 0301 	bic.w	r3, r3, #1
 c0067d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c0067da:	f7ff f8d5 	bl	c005988 <HAL_GetTick>
 c0067de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0067e0:	e00e      	b.n	c006800 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0067e2:	f7ff f8d1 	bl	c005988 <HAL_GetTick>
 c0067e6:	4602      	mov	r2, r0
 c0067e8:	693b      	ldr	r3, [r7, #16]
 c0067ea:	1ad3      	subs	r3, r2, r3
 c0067ec:	2b02      	cmp	r3, #2
 c0067ee:	d907      	bls.n	c006800 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0067f0:	4b24      	ldr	r3, [pc, #144]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c0067f2:	681b      	ldr	r3, [r3, #0]
 c0067f4:	f003 0302 	and.w	r3, r3, #2
 c0067f8:	2b00      	cmp	r3, #0
 c0067fa:	d001      	beq.n	c006800 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c0067fc:	2303      	movs	r3, #3
 c0067fe:	e3dd      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c006800:	4b20      	ldr	r3, [pc, #128]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006802:	681b      	ldr	r3, [r3, #0]
 c006804:	f003 0302 	and.w	r3, r3, #2
 c006808:	2b00      	cmp	r3, #0
 c00680a:	d1ea      	bne.n	c0067e2 <HAL_RCC_OscConfig+0x1da>
 c00680c:	e000      	b.n	c006810 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c00680e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c006810:	687b      	ldr	r3, [r7, #4]
 c006812:	681b      	ldr	r3, [r3, #0]
 c006814:	f003 0301 	and.w	r3, r3, #1
 c006818:	2b00      	cmp	r3, #0
 c00681a:	d07e      	beq.n	c00691a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c00681c:	69bb      	ldr	r3, [r7, #24]
 c00681e:	2b08      	cmp	r3, #8
 c006820:	d005      	beq.n	c00682e <HAL_RCC_OscConfig+0x226>
 c006822:	69bb      	ldr	r3, [r7, #24]
 c006824:	2b0c      	cmp	r3, #12
 c006826:	d10e      	bne.n	c006846 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c006828:	697b      	ldr	r3, [r7, #20]
 c00682a:	2b03      	cmp	r3, #3
 c00682c:	d10b      	bne.n	c006846 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c00682e:	4b15      	ldr	r3, [pc, #84]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006830:	681b      	ldr	r3, [r3, #0]
 c006832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c006836:	2b00      	cmp	r3, #0
 c006838:	d06e      	beq.n	c006918 <HAL_RCC_OscConfig+0x310>
 c00683a:	687b      	ldr	r3, [r7, #4]
 c00683c:	685b      	ldr	r3, [r3, #4]
 c00683e:	2b00      	cmp	r3, #0
 c006840:	d16a      	bne.n	c006918 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c006842:	2301      	movs	r3, #1
 c006844:	e3ba      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c006846:	687b      	ldr	r3, [r7, #4]
 c006848:	685b      	ldr	r3, [r3, #4]
 c00684a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00684e:	d106      	bne.n	c00685e <HAL_RCC_OscConfig+0x256>
 c006850:	4b0c      	ldr	r3, [pc, #48]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006852:	681b      	ldr	r3, [r3, #0]
 c006854:	4a0b      	ldr	r2, [pc, #44]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00685a:	6013      	str	r3, [r2, #0]
 c00685c:	e024      	b.n	c0068a8 <HAL_RCC_OscConfig+0x2a0>
 c00685e:	687b      	ldr	r3, [r7, #4]
 c006860:	685b      	ldr	r3, [r3, #4]
 c006862:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 c006866:	d113      	bne.n	c006890 <HAL_RCC_OscConfig+0x288>
 c006868:	4b06      	ldr	r3, [pc, #24]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00686a:	681b      	ldr	r3, [r3, #0]
 c00686c:	4a05      	ldr	r2, [pc, #20]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00686e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c006872:	6013      	str	r3, [r2, #0]
 c006874:	4b03      	ldr	r3, [pc, #12]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c006876:	681b      	ldr	r3, [r3, #0]
 c006878:	4a02      	ldr	r2, [pc, #8]	@ (c006884 <HAL_RCC_OscConfig+0x27c>)
 c00687a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00687e:	6013      	str	r3, [r2, #0]
 c006880:	e012      	b.n	c0068a8 <HAL_RCC_OscConfig+0x2a0>
 c006882:	bf00      	nop
 c006884:	50021000 	.word	0x50021000
 c006888:	30000610 	.word	0x30000610
 c00688c:	30000618 	.word	0x30000618
 c006890:	4b8b      	ldr	r3, [pc, #556]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006892:	681b      	ldr	r3, [r3, #0]
 c006894:	4a8a      	ldr	r2, [pc, #552]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c00689a:	6013      	str	r3, [r2, #0]
 c00689c:	4b88      	ldr	r3, [pc, #544]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c00689e:	681b      	ldr	r3, [r3, #0]
 c0068a0:	4a87      	ldr	r2, [pc, #540]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0068a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c0068a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c0068a8:	687b      	ldr	r3, [r7, #4]
 c0068aa:	685b      	ldr	r3, [r3, #4]
 c0068ac:	2b00      	cmp	r3, #0
 c0068ae:	d019      	beq.n	c0068e4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0068b0:	f7ff f86a 	bl	c005988 <HAL_GetTick>
 c0068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0068b6:	e00e      	b.n	c0068d6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0068b8:	f7ff f866 	bl	c005988 <HAL_GetTick>
 c0068bc:	4602      	mov	r2, r0
 c0068be:	693b      	ldr	r3, [r7, #16]
 c0068c0:	1ad3      	subs	r3, r2, r3
 c0068c2:	2b64      	cmp	r3, #100	@ 0x64
 c0068c4:	d907      	bls.n	c0068d6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0068c6:	4b7e      	ldr	r3, [pc, #504]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0068c8:	681b      	ldr	r3, [r3, #0]
 c0068ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0068ce:	2b00      	cmp	r3, #0
 c0068d0:	d101      	bne.n	c0068d6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c0068d2:	2303      	movs	r3, #3
 c0068d4:	e372      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0068d6:	4b7a      	ldr	r3, [pc, #488]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0068d8:	681b      	ldr	r3, [r3, #0]
 c0068da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0068de:	2b00      	cmp	r3, #0
 c0068e0:	d0ea      	beq.n	c0068b8 <HAL_RCC_OscConfig+0x2b0>
 c0068e2:	e01a      	b.n	c00691a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0068e4:	f7ff f850 	bl	c005988 <HAL_GetTick>
 c0068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0068ea:	e00e      	b.n	c00690a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0068ec:	f7ff f84c 	bl	c005988 <HAL_GetTick>
 c0068f0:	4602      	mov	r2, r0
 c0068f2:	693b      	ldr	r3, [r7, #16]
 c0068f4:	1ad3      	subs	r3, r2, r3
 c0068f6:	2b64      	cmp	r3, #100	@ 0x64
 c0068f8:	d907      	bls.n	c00690a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0068fa:	4b71      	ldr	r3, [pc, #452]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0068fc:	681b      	ldr	r3, [r3, #0]
 c0068fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c006902:	2b00      	cmp	r3, #0
 c006904:	d001      	beq.n	c00690a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c006906:	2303      	movs	r3, #3
 c006908:	e358      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c00690a:	4b6d      	ldr	r3, [pc, #436]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c00690c:	681b      	ldr	r3, [r3, #0]
 c00690e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c006912:	2b00      	cmp	r3, #0
 c006914:	d1ea      	bne.n	c0068ec <HAL_RCC_OscConfig+0x2e4>
 c006916:	e000      	b.n	c00691a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c006918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c00691a:	687b      	ldr	r3, [r7, #4]
 c00691c:	681b      	ldr	r3, [r3, #0]
 c00691e:	f003 0302 	and.w	r3, r3, #2
 c006922:	2b00      	cmp	r3, #0
 c006924:	d06c      	beq.n	c006a00 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c006926:	69bb      	ldr	r3, [r7, #24]
 c006928:	2b04      	cmp	r3, #4
 c00692a:	d005      	beq.n	c006938 <HAL_RCC_OscConfig+0x330>
 c00692c:	69bb      	ldr	r3, [r7, #24]
 c00692e:	2b0c      	cmp	r3, #12
 c006930:	d119      	bne.n	c006966 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c006932:	697b      	ldr	r3, [r7, #20]
 c006934:	2b02      	cmp	r3, #2
 c006936:	d116      	bne.n	c006966 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c006938:	4b61      	ldr	r3, [pc, #388]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c00693a:	681b      	ldr	r3, [r3, #0]
 c00693c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006940:	2b00      	cmp	r3, #0
 c006942:	d005      	beq.n	c006950 <HAL_RCC_OscConfig+0x348>
 c006944:	687b      	ldr	r3, [r7, #4]
 c006946:	68db      	ldr	r3, [r3, #12]
 c006948:	2b00      	cmp	r3, #0
 c00694a:	d101      	bne.n	c006950 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c00694c:	2301      	movs	r3, #1
 c00694e:	e335      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c006950:	4b5b      	ldr	r3, [pc, #364]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006952:	685b      	ldr	r3, [r3, #4]
 c006954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 c006958:	687b      	ldr	r3, [r7, #4]
 c00695a:	691b      	ldr	r3, [r3, #16]
 c00695c:	061b      	lsls	r3, r3, #24
 c00695e:	4958      	ldr	r1, [pc, #352]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006960:	4313      	orrs	r3, r2
 c006962:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c006964:	e04c      	b.n	c006a00 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c006966:	687b      	ldr	r3, [r7, #4]
 c006968:	68db      	ldr	r3, [r3, #12]
 c00696a:	2b00      	cmp	r3, #0
 c00696c:	d029      	beq.n	c0069c2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c00696e:	4b54      	ldr	r3, [pc, #336]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006970:	681b      	ldr	r3, [r3, #0]
 c006972:	4a53      	ldr	r2, [pc, #332]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c006978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00697a:	f7ff f805 	bl	c005988 <HAL_GetTick>
 c00697e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006980:	e00e      	b.n	c0069a0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c006982:	f7ff f801 	bl	c005988 <HAL_GetTick>
 c006986:	4602      	mov	r2, r0
 c006988:	693b      	ldr	r3, [r7, #16]
 c00698a:	1ad3      	subs	r3, r2, r3
 c00698c:	2b02      	cmp	r3, #2
 c00698e:	d907      	bls.n	c0069a0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006990:	4b4b      	ldr	r3, [pc, #300]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006992:	681b      	ldr	r3, [r3, #0]
 c006994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c006998:	2b00      	cmp	r3, #0
 c00699a:	d101      	bne.n	c0069a0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c00699c:	2303      	movs	r3, #3
 c00699e:	e30d      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0069a0:	4b47      	ldr	r3, [pc, #284]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0069a2:	681b      	ldr	r3, [r3, #0]
 c0069a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0069a8:	2b00      	cmp	r3, #0
 c0069aa:	d0ea      	beq.n	c006982 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0069ac:	4b44      	ldr	r3, [pc, #272]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0069ae:	685b      	ldr	r3, [r3, #4]
 c0069b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 c0069b4:	687b      	ldr	r3, [r7, #4]
 c0069b6:	691b      	ldr	r3, [r3, #16]
 c0069b8:	061b      	lsls	r3, r3, #24
 c0069ba:	4941      	ldr	r1, [pc, #260]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0069bc:	4313      	orrs	r3, r2
 c0069be:	604b      	str	r3, [r1, #4]
 c0069c0:	e01e      	b.n	c006a00 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c0069c2:	4b3f      	ldr	r3, [pc, #252]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0069c4:	681b      	ldr	r3, [r3, #0]
 c0069c6:	4a3e      	ldr	r2, [pc, #248]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0069c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 c0069cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0069ce:	f7fe ffdb 	bl	c005988 <HAL_GetTick>
 c0069d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0069d4:	e00e      	b.n	c0069f4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0069d6:	f7fe ffd7 	bl	c005988 <HAL_GetTick>
 c0069da:	4602      	mov	r2, r0
 c0069dc:	693b      	ldr	r3, [r7, #16]
 c0069de:	1ad3      	subs	r3, r2, r3
 c0069e0:	2b02      	cmp	r3, #2
 c0069e2:	d907      	bls.n	c0069f4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0069e4:	4b36      	ldr	r3, [pc, #216]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0069e6:	681b      	ldr	r3, [r3, #0]
 c0069e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0069ec:	2b00      	cmp	r3, #0
 c0069ee:	d001      	beq.n	c0069f4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c0069f0:	2303      	movs	r3, #3
 c0069f2:	e2e3      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0069f4:	4b32      	ldr	r3, [pc, #200]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c0069f6:	681b      	ldr	r3, [r3, #0]
 c0069f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0069fc:	2b00      	cmp	r3, #0
 c0069fe:	d1ea      	bne.n	c0069d6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c006a00:	687b      	ldr	r3, [r7, #4]
 c006a02:	681b      	ldr	r3, [r3, #0]
 c006a04:	f003 0308 	and.w	r3, r3, #8
 c006a08:	2b00      	cmp	r3, #0
 c006a0a:	d062      	beq.n	c006ad2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c006a0c:	687b      	ldr	r3, [r7, #4]
 c006a0e:	695b      	ldr	r3, [r3, #20]
 c006a10:	2b00      	cmp	r3, #0
 c006a12:	d038      	beq.n	c006a86 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c006a14:	687b      	ldr	r3, [r7, #4]
 c006a16:	699b      	ldr	r3, [r3, #24]
 c006a18:	2b00      	cmp	r3, #0
 c006a1a:	d108      	bne.n	c006a2e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c006a1c:	4b28      	ldr	r3, [pc, #160]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c006a22:	4a27      	ldr	r2, [pc, #156]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a24:	f023 0310 	bic.w	r3, r3, #16
 c006a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c006a2c:	e007      	b.n	c006a3e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c006a2e:	4b24      	ldr	r3, [pc, #144]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c006a34:	4a22      	ldr	r2, [pc, #136]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a36:	f043 0310 	orr.w	r3, r3, #16
 c006a3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c006a3e:	4b20      	ldr	r3, [pc, #128]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c006a44:	4a1e      	ldr	r2, [pc, #120]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a46:	f043 0301 	orr.w	r3, r3, #1
 c006a4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006a4e:	f7fe ff9b 	bl	c005988 <HAL_GetTick>
 c006a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c006a54:	e00f      	b.n	c006a76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c006a56:	f7fe ff97 	bl	c005988 <HAL_GetTick>
 c006a5a:	4602      	mov	r2, r0
 c006a5c:	693b      	ldr	r3, [r7, #16]
 c006a5e:	1ad3      	subs	r3, r2, r3
 c006a60:	2b07      	cmp	r3, #7
 c006a62:	d908      	bls.n	c006a76 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c006a64:	4b16      	ldr	r3, [pc, #88]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c006a6a:	f003 0302 	and.w	r3, r3, #2
 c006a6e:	2b00      	cmp	r3, #0
 c006a70:	d101      	bne.n	c006a76 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c006a72:	2303      	movs	r3, #3
 c006a74:	e2a2      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c006a76:	4b12      	ldr	r3, [pc, #72]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c006a7c:	f003 0302 	and.w	r3, r3, #2
 c006a80:	2b00      	cmp	r3, #0
 c006a82:	d0e8      	beq.n	c006a56 <HAL_RCC_OscConfig+0x44e>
 c006a84:	e025      	b.n	c006ad2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c006a86:	4b0e      	ldr	r3, [pc, #56]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c006a8c:	4a0c      	ldr	r2, [pc, #48]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006a8e:	f023 0301 	bic.w	r3, r3, #1
 c006a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006a96:	f7fe ff77 	bl	c005988 <HAL_GetTick>
 c006a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006a9c:	e012      	b.n	c006ac4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c006a9e:	f7fe ff73 	bl	c005988 <HAL_GetTick>
 c006aa2:	4602      	mov	r2, r0
 c006aa4:	693b      	ldr	r3, [r7, #16]
 c006aa6:	1ad3      	subs	r3, r2, r3
 c006aa8:	2b07      	cmp	r3, #7
 c006aaa:	d90b      	bls.n	c006ac4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006aac:	4b04      	ldr	r3, [pc, #16]	@ (c006ac0 <HAL_RCC_OscConfig+0x4b8>)
 c006aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c006ab2:	f003 0302 	and.w	r3, r3, #2
 c006ab6:	2b00      	cmp	r3, #0
 c006ab8:	d004      	beq.n	c006ac4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c006aba:	2303      	movs	r3, #3
 c006abc:	e27e      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
 c006abe:	bf00      	nop
 c006ac0:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006ac4:	4ba8      	ldr	r3, [pc, #672]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c006aca:	f003 0302 	and.w	r3, r3, #2
 c006ace:	2b00      	cmp	r3, #0
 c006ad0:	d1e5      	bne.n	c006a9e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c006ad2:	687b      	ldr	r3, [r7, #4]
 c006ad4:	681b      	ldr	r3, [r3, #0]
 c006ad6:	f003 0304 	and.w	r3, r3, #4
 c006ada:	2b00      	cmp	r3, #0
 c006adc:	f000 812d 	beq.w	c006d3a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c006ae0:	2300      	movs	r3, #0
 c006ae2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c006ae4:	4ba0      	ldr	r3, [pc, #640]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c006ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c006aec:	2b00      	cmp	r3, #0
 c006aee:	d10d      	bne.n	c006b0c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c006af0:	4b9d      	ldr	r3, [pc, #628]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c006af4:	4a9c      	ldr	r2, [pc, #624]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c006afa:	6593      	str	r3, [r2, #88]	@ 0x58
 c006afc:	4b9a      	ldr	r3, [pc, #616]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c006b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c006b04:	60bb      	str	r3, [r7, #8]
 c006b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c006b08:	2301      	movs	r3, #1
 c006b0a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006b0c:	4b97      	ldr	r3, [pc, #604]	@ (c006d6c <HAL_RCC_OscConfig+0x764>)
 c006b0e:	681b      	ldr	r3, [r3, #0]
 c006b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c006b14:	2b00      	cmp	r3, #0
 c006b16:	d11e      	bne.n	c006b56 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c006b18:	4b94      	ldr	r3, [pc, #592]	@ (c006d6c <HAL_RCC_OscConfig+0x764>)
 c006b1a:	681b      	ldr	r3, [r3, #0]
 c006b1c:	4a93      	ldr	r2, [pc, #588]	@ (c006d6c <HAL_RCC_OscConfig+0x764>)
 c006b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c006b22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c006b24:	f7fe ff30 	bl	c005988 <HAL_GetTick>
 c006b28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006b2a:	e00e      	b.n	c006b4a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c006b2c:	f7fe ff2c 	bl	c005988 <HAL_GetTick>
 c006b30:	4602      	mov	r2, r0
 c006b32:	693b      	ldr	r3, [r7, #16]
 c006b34:	1ad3      	subs	r3, r2, r3
 c006b36:	2b02      	cmp	r3, #2
 c006b38:	d907      	bls.n	c006b4a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006b3a:	4b8c      	ldr	r3, [pc, #560]	@ (c006d6c <HAL_RCC_OscConfig+0x764>)
 c006b3c:	681b      	ldr	r3, [r3, #0]
 c006b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c006b42:	2b00      	cmp	r3, #0
 c006b44:	d101      	bne.n	c006b4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c006b46:	2303      	movs	r3, #3
 c006b48:	e238      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006b4a:	4b88      	ldr	r3, [pc, #544]	@ (c006d6c <HAL_RCC_OscConfig+0x764>)
 c006b4c:	681b      	ldr	r3, [r3, #0]
 c006b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c006b52:	2b00      	cmp	r3, #0
 c006b54:	d0ea      	beq.n	c006b2c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c006b56:	687b      	ldr	r3, [r7, #4]
 c006b58:	689b      	ldr	r3, [r3, #8]
 c006b5a:	f003 0301 	and.w	r3, r3, #1
 c006b5e:	2b00      	cmp	r3, #0
 c006b60:	d01f      	beq.n	c006ba2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c006b62:	687b      	ldr	r3, [r7, #4]
 c006b64:	689b      	ldr	r3, [r3, #8]
 c006b66:	f003 0304 	and.w	r3, r3, #4
 c006b6a:	2b00      	cmp	r3, #0
 c006b6c:	d010      	beq.n	c006b90 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c006b6e:	4b7e      	ldr	r3, [pc, #504]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006b74:	4a7c      	ldr	r2, [pc, #496]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006b76:	f043 0304 	orr.w	r3, r3, #4
 c006b7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006b7e:	4b7a      	ldr	r3, [pc, #488]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006b84:	4a78      	ldr	r2, [pc, #480]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006b86:	f043 0301 	orr.w	r3, r3, #1
 c006b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 c006b8e:	e018      	b.n	c006bc2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006b90:	4b75      	ldr	r3, [pc, #468]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006b96:	4a74      	ldr	r2, [pc, #464]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006b98:	f043 0301 	orr.w	r3, r3, #1
 c006b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 c006ba0:	e00f      	b.n	c006bc2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006ba2:	4b71      	ldr	r3, [pc, #452]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006ba8:	4a6f      	ldr	r2, [pc, #444]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006baa:	f023 0301 	bic.w	r3, r3, #1
 c006bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c006bb2:	4b6d      	ldr	r3, [pc, #436]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006bb8:	4a6b      	ldr	r2, [pc, #428]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006bba:	f023 0304 	bic.w	r3, r3, #4
 c006bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c006bc2:	687b      	ldr	r3, [r7, #4]
 c006bc4:	689b      	ldr	r3, [r3, #8]
 c006bc6:	2b00      	cmp	r3, #0
 c006bc8:	d068      	beq.n	c006c9c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006bca:	f7fe fedd 	bl	c005988 <HAL_GetTick>
 c006bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006bd0:	e011      	b.n	c006bf6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006bd2:	f7fe fed9 	bl	c005988 <HAL_GetTick>
 c006bd6:	4602      	mov	r2, r0
 c006bd8:	693b      	ldr	r3, [r7, #16]
 c006bda:	1ad3      	subs	r3, r2, r3
 c006bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 c006be0:	4293      	cmp	r3, r2
 c006be2:	d908      	bls.n	c006bf6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006be4:	4b60      	ldr	r3, [pc, #384]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006bea:	f003 0302 	and.w	r3, r3, #2
 c006bee:	2b00      	cmp	r3, #0
 c006bf0:	d101      	bne.n	c006bf6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c006bf2:	2303      	movs	r3, #3
 c006bf4:	e1e2      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006bf6:	4b5c      	ldr	r3, [pc, #368]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006bfc:	f003 0302 	and.w	r3, r3, #2
 c006c00:	2b00      	cmp	r3, #0
 c006c02:	d0e6      	beq.n	c006bd2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c006c04:	687b      	ldr	r3, [r7, #4]
 c006c06:	689b      	ldr	r3, [r3, #8]
 c006c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c006c0c:	2b00      	cmp	r3, #0
 c006c0e:	d022      	beq.n	c006c56 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006c10:	4b55      	ldr	r3, [pc, #340]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006c16:	4a54      	ldr	r2, [pc, #336]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c006c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006c20:	e011      	b.n	c006c46 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006c22:	f7fe feb1 	bl	c005988 <HAL_GetTick>
 c006c26:	4602      	mov	r2, r0
 c006c28:	693b      	ldr	r3, [r7, #16]
 c006c2a:	1ad3      	subs	r3, r2, r3
 c006c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 c006c30:	4293      	cmp	r3, r2
 c006c32:	d908      	bls.n	c006c46 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006c34:	4b4c      	ldr	r3, [pc, #304]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c006c3e:	2b00      	cmp	r3, #0
 c006c40:	d101      	bne.n	c006c46 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c006c42:	2303      	movs	r3, #3
 c006c44:	e1ba      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006c46:	4b48      	ldr	r3, [pc, #288]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c006c50:	2b00      	cmp	r3, #0
 c006c52:	d0e6      	beq.n	c006c22 <HAL_RCC_OscConfig+0x61a>
 c006c54:	e068      	b.n	c006d28 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006c56:	4b44      	ldr	r3, [pc, #272]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006c5c:	4a42      	ldr	r2, [pc, #264]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c006c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006c66:	e011      	b.n	c006c8c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006c68:	f7fe fe8e 	bl	c005988 <HAL_GetTick>
 c006c6c:	4602      	mov	r2, r0
 c006c6e:	693b      	ldr	r3, [r7, #16]
 c006c70:	1ad3      	subs	r3, r2, r3
 c006c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 c006c76:	4293      	cmp	r3, r2
 c006c78:	d908      	bls.n	c006c8c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006c7a:	4b3b      	ldr	r3, [pc, #236]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c006c84:	2b00      	cmp	r3, #0
 c006c86:	d001      	beq.n	c006c8c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c006c88:	2303      	movs	r3, #3
 c006c8a:	e197      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006c8c:	4b36      	ldr	r3, [pc, #216]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c006c96:	2b00      	cmp	r3, #0
 c006c98:	d1e6      	bne.n	c006c68 <HAL_RCC_OscConfig+0x660>
 c006c9a:	e045      	b.n	c006d28 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006c9c:	f7fe fe74 	bl	c005988 <HAL_GetTick>
 c006ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006ca2:	e011      	b.n	c006cc8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006ca4:	f7fe fe70 	bl	c005988 <HAL_GetTick>
 c006ca8:	4602      	mov	r2, r0
 c006caa:	693b      	ldr	r3, [r7, #16]
 c006cac:	1ad3      	subs	r3, r2, r3
 c006cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 c006cb2:	4293      	cmp	r3, r2
 c006cb4:	d908      	bls.n	c006cc8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006cb6:	4b2c      	ldr	r3, [pc, #176]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006cbc:	f003 0302 	and.w	r3, r3, #2
 c006cc0:	2b00      	cmp	r3, #0
 c006cc2:	d001      	beq.n	c006cc8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c006cc4:	2303      	movs	r3, #3
 c006cc6:	e179      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006cc8:	4b27      	ldr	r3, [pc, #156]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006cce:	f003 0302 	and.w	r3, r3, #2
 c006cd2:	2b00      	cmp	r3, #0
 c006cd4:	d1e6      	bne.n	c006ca4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c006cd6:	4b24      	ldr	r3, [pc, #144]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c006ce0:	2b00      	cmp	r3, #0
 c006ce2:	d021      	beq.n	c006d28 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006ce4:	4b20      	ldr	r3, [pc, #128]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006cea:	4a1f      	ldr	r2, [pc, #124]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c006cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006cf4:	e011      	b.n	c006d1a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006cf6:	f7fe fe47 	bl	c005988 <HAL_GetTick>
 c006cfa:	4602      	mov	r2, r0
 c006cfc:	693b      	ldr	r3, [r7, #16]
 c006cfe:	1ad3      	subs	r3, r2, r3
 c006d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 c006d04:	4293      	cmp	r3, r2
 c006d06:	d908      	bls.n	c006d1a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006d08:	4b17      	ldr	r3, [pc, #92]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c006d12:	2b00      	cmp	r3, #0
 c006d14:	d001      	beq.n	c006d1a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c006d16:	2303      	movs	r3, #3
 c006d18:	e150      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006d1a:	4b13      	ldr	r3, [pc, #76]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c006d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c006d24:	2b00      	cmp	r3, #0
 c006d26:	d1e6      	bne.n	c006cf6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c006d28:	7ffb      	ldrb	r3, [r7, #31]
 c006d2a:	2b01      	cmp	r3, #1
 c006d2c:	d105      	bne.n	c006d3a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c006d2e:	4b0e      	ldr	r3, [pc, #56]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c006d32:	4a0d      	ldr	r2, [pc, #52]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c006d38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c006d3a:	687b      	ldr	r3, [r7, #4]
 c006d3c:	681b      	ldr	r3, [r3, #0]
 c006d3e:	f003 0320 	and.w	r3, r3, #32
 c006d42:	2b00      	cmp	r3, #0
 c006d44:	d04f      	beq.n	c006de6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c006d46:	687b      	ldr	r3, [r7, #4]
 c006d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006d4a:	2b00      	cmp	r3, #0
 c006d4c:	d028      	beq.n	c006da0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c006d4e:	4b06      	ldr	r3, [pc, #24]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c006d54:	4a04      	ldr	r2, [pc, #16]	@ (c006d68 <HAL_RCC_OscConfig+0x760>)
 c006d56:	f043 0301 	orr.w	r3, r3, #1
 c006d5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006d5e:	f7fe fe13 	bl	c005988 <HAL_GetTick>
 c006d62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006d64:	e014      	b.n	c006d90 <HAL_RCC_OscConfig+0x788>
 c006d66:	bf00      	nop
 c006d68:	50021000 	.word	0x50021000
 c006d6c:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c006d70:	f7fe fe0a 	bl	c005988 <HAL_GetTick>
 c006d74:	4602      	mov	r2, r0
 c006d76:	693b      	ldr	r3, [r7, #16]
 c006d78:	1ad3      	subs	r3, r2, r3
 c006d7a:	2b02      	cmp	r3, #2
 c006d7c:	d908      	bls.n	c006d90 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006d7e:	4b91      	ldr	r3, [pc, #580]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c006d84:	f003 0302 	and.w	r3, r3, #2
 c006d88:	2b00      	cmp	r3, #0
 c006d8a:	d101      	bne.n	c006d90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c006d8c:	2303      	movs	r3, #3
 c006d8e:	e115      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006d90:	4b8c      	ldr	r3, [pc, #560]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c006d96:	f003 0302 	and.w	r3, r3, #2
 c006d9a:	2b00      	cmp	r3, #0
 c006d9c:	d0e8      	beq.n	c006d70 <HAL_RCC_OscConfig+0x768>
 c006d9e:	e022      	b.n	c006de6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c006da0:	4b88      	ldr	r3, [pc, #544]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c006da6:	4a87      	ldr	r2, [pc, #540]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006da8:	f023 0301 	bic.w	r3, r3, #1
 c006dac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006db0:	f7fe fdea 	bl	c005988 <HAL_GetTick>
 c006db4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006db6:	e00f      	b.n	c006dd8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c006db8:	f7fe fde6 	bl	c005988 <HAL_GetTick>
 c006dbc:	4602      	mov	r2, r0
 c006dbe:	693b      	ldr	r3, [r7, #16]
 c006dc0:	1ad3      	subs	r3, r2, r3
 c006dc2:	2b02      	cmp	r3, #2
 c006dc4:	d908      	bls.n	c006dd8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006dc6:	4b7f      	ldr	r3, [pc, #508]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c006dcc:	f003 0302 	and.w	r3, r3, #2
 c006dd0:	2b00      	cmp	r3, #0
 c006dd2:	d001      	beq.n	c006dd8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c006dd4:	2303      	movs	r3, #3
 c006dd6:	e0f1      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006dd8:	4b7a      	ldr	r3, [pc, #488]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c006dde:	f003 0302 	and.w	r3, r3, #2
 c006de2:	2b00      	cmp	r3, #0
 c006de4:	d1e8      	bne.n	c006db8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c006de6:	687b      	ldr	r3, [r7, #4]
 c006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c006dea:	2b00      	cmp	r3, #0
 c006dec:	f000 80e5 	beq.w	c006fba <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c006df0:	4b74      	ldr	r3, [pc, #464]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006df2:	689b      	ldr	r3, [r3, #8]
 c006df4:	f003 030c 	and.w	r3, r3, #12
 c006df8:	2b0c      	cmp	r3, #12
 c006dfa:	f000 809f 	beq.w	c006f3c <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c006dfe:	687b      	ldr	r3, [r7, #4]
 c006e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c006e02:	2b02      	cmp	r3, #2
 c006e04:	d166      	bne.n	c006ed4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c006e06:	4b6f      	ldr	r3, [pc, #444]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e08:	681b      	ldr	r3, [r3, #0]
 c006e0a:	4a6e      	ldr	r2, [pc, #440]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c006e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006e12:	f7fe fdb9 	bl	c005988 <HAL_GetTick>
 c006e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006e18:	e00e      	b.n	c006e38 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006e1a:	f7fe fdb5 	bl	c005988 <HAL_GetTick>
 c006e1e:	4602      	mov	r2, r0
 c006e20:	693b      	ldr	r3, [r7, #16]
 c006e22:	1ad3      	subs	r3, r2, r3
 c006e24:	2b02      	cmp	r3, #2
 c006e26:	d907      	bls.n	c006e38 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006e28:	4b66      	ldr	r3, [pc, #408]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e2a:	681b      	ldr	r3, [r3, #0]
 c006e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c006e30:	2b00      	cmp	r3, #0
 c006e32:	d001      	beq.n	c006e38 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c006e34:	2303      	movs	r3, #3
 c006e36:	e0c1      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006e38:	4b62      	ldr	r3, [pc, #392]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e3a:	681b      	ldr	r3, [r3, #0]
 c006e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c006e40:	2b00      	cmp	r3, #0
 c006e42:	d1ea      	bne.n	c006e1a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c006e44:	4b5f      	ldr	r3, [pc, #380]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e46:	68da      	ldr	r2, [r3, #12]
 c006e48:	4b5f      	ldr	r3, [pc, #380]	@ (c006fc8 <HAL_RCC_OscConfig+0x9c0>)
 c006e4a:	4013      	ands	r3, r2
 c006e4c:	687a      	ldr	r2, [r7, #4]
 c006e4e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 c006e50:	687a      	ldr	r2, [r7, #4]
 c006e52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 c006e54:	3a01      	subs	r2, #1
 c006e56:	0112      	lsls	r2, r2, #4
 c006e58:	4311      	orrs	r1, r2
 c006e5a:	687a      	ldr	r2, [r7, #4]
 c006e5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 c006e5e:	0212      	lsls	r2, r2, #8
 c006e60:	4311      	orrs	r1, r2
 c006e62:	687a      	ldr	r2, [r7, #4]
 c006e64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 c006e66:	0852      	lsrs	r2, r2, #1
 c006e68:	3a01      	subs	r2, #1
 c006e6a:	0552      	lsls	r2, r2, #21
 c006e6c:	4311      	orrs	r1, r2
 c006e6e:	687a      	ldr	r2, [r7, #4]
 c006e70:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 c006e72:	0852      	lsrs	r2, r2, #1
 c006e74:	3a01      	subs	r2, #1
 c006e76:	0652      	lsls	r2, r2, #25
 c006e78:	4311      	orrs	r1, r2
 c006e7a:	687a      	ldr	r2, [r7, #4]
 c006e7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 c006e7e:	06d2      	lsls	r2, r2, #27
 c006e80:	430a      	orrs	r2, r1
 c006e82:	4950      	ldr	r1, [pc, #320]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e84:	4313      	orrs	r3, r2
 c006e86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c006e88:	4b4e      	ldr	r3, [pc, #312]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e8a:	681b      	ldr	r3, [r3, #0]
 c006e8c:	4a4d      	ldr	r2, [pc, #308]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c006e92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c006e94:	4b4b      	ldr	r3, [pc, #300]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e96:	68db      	ldr	r3, [r3, #12]
 c006e98:	4a4a      	ldr	r2, [pc, #296]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c006e9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006ea0:	f7fe fd72 	bl	c005988 <HAL_GetTick>
 c006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006ea6:	e00e      	b.n	c006ec6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006ea8:	f7fe fd6e 	bl	c005988 <HAL_GetTick>
 c006eac:	4602      	mov	r2, r0
 c006eae:	693b      	ldr	r3, [r7, #16]
 c006eb0:	1ad3      	subs	r3, r2, r3
 c006eb2:	2b02      	cmp	r3, #2
 c006eb4:	d907      	bls.n	c006ec6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006eb6:	4b43      	ldr	r3, [pc, #268]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006eb8:	681b      	ldr	r3, [r3, #0]
 c006eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c006ebe:	2b00      	cmp	r3, #0
 c006ec0:	d101      	bne.n	c006ec6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c006ec2:	2303      	movs	r3, #3
 c006ec4:	e07a      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006ec6:	4b3f      	ldr	r3, [pc, #252]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006ec8:	681b      	ldr	r3, [r3, #0]
 c006eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c006ece:	2b00      	cmp	r3, #0
 c006ed0:	d0ea      	beq.n	c006ea8 <HAL_RCC_OscConfig+0x8a0>
 c006ed2:	e072      	b.n	c006fba <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c006ed4:	4b3b      	ldr	r3, [pc, #236]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006ed6:	681b      	ldr	r3, [r3, #0]
 c006ed8:	4a3a      	ldr	r2, [pc, #232]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c006ede:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c006ee0:	4b38      	ldr	r3, [pc, #224]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006ee2:	681b      	ldr	r3, [r3, #0]
 c006ee4:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 c006ee8:	2b00      	cmp	r3, #0
 c006eea:	d105      	bne.n	c006ef8 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c006eec:	4b35      	ldr	r3, [pc, #212]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006eee:	68db      	ldr	r3, [r3, #12]
 c006ef0:	4a34      	ldr	r2, [pc, #208]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006ef2:	f023 0303 	bic.w	r3, r3, #3
 c006ef6:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c006ef8:	4b32      	ldr	r3, [pc, #200]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006efa:	68db      	ldr	r3, [r3, #12]
 c006efc:	4a31      	ldr	r2, [pc, #196]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006efe:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 c006f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c006f06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006f08:	f7fe fd3e 	bl	c005988 <HAL_GetTick>
 c006f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006f0e:	e00e      	b.n	c006f2e <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006f10:	f7fe fd3a 	bl	c005988 <HAL_GetTick>
 c006f14:	4602      	mov	r2, r0
 c006f16:	693b      	ldr	r3, [r7, #16]
 c006f18:	1ad3      	subs	r3, r2, r3
 c006f1a:	2b02      	cmp	r3, #2
 c006f1c:	d907      	bls.n	c006f2e <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006f1e:	4b29      	ldr	r3, [pc, #164]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006f20:	681b      	ldr	r3, [r3, #0]
 c006f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c006f26:	2b00      	cmp	r3, #0
 c006f28:	d001      	beq.n	c006f2e <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 c006f2a:	2303      	movs	r3, #3
 c006f2c:	e046      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006f2e:	4b25      	ldr	r3, [pc, #148]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006f30:	681b      	ldr	r3, [r3, #0]
 c006f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c006f36:	2b00      	cmp	r3, #0
 c006f38:	d1ea      	bne.n	c006f10 <HAL_RCC_OscConfig+0x908>
 c006f3a:	e03e      	b.n	c006fba <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c006f3c:	687b      	ldr	r3, [r7, #4]
 c006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c006f40:	2b01      	cmp	r3, #1
 c006f42:	d101      	bne.n	c006f48 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 c006f44:	2301      	movs	r3, #1
 c006f46:	e039      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c006f48:	4b1e      	ldr	r3, [pc, #120]	@ (c006fc4 <HAL_RCC_OscConfig+0x9bc>)
 c006f4a:	68db      	ldr	r3, [r3, #12]
 c006f4c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c006f4e:	697b      	ldr	r3, [r7, #20]
 c006f50:	f003 0203 	and.w	r2, r3, #3
 c006f54:	687b      	ldr	r3, [r7, #4]
 c006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c006f58:	429a      	cmp	r2, r3
 c006f5a:	d12c      	bne.n	c006fb6 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c006f5c:	697b      	ldr	r3, [r7, #20]
 c006f5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 c006f62:	687b      	ldr	r3, [r7, #4]
 c006f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c006f66:	3b01      	subs	r3, #1
 c006f68:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c006f6a:	429a      	cmp	r2, r3
 c006f6c:	d123      	bne.n	c006fb6 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c006f6e:	697b      	ldr	r3, [r7, #20]
 c006f70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 c006f74:	687b      	ldr	r3, [r7, #4]
 c006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c006f78:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c006f7a:	429a      	cmp	r2, r3
 c006f7c:	d11b      	bne.n	c006fb6 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c006f7e:	697b      	ldr	r3, [r7, #20]
 c006f80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 c006f84:	687b      	ldr	r3, [r7, #4]
 c006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c006f88:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c006f8a:	429a      	cmp	r2, r3
 c006f8c:	d113      	bne.n	c006fb6 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c006f8e:	697b      	ldr	r3, [r7, #20]
 c006f90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 c006f94:	687b      	ldr	r3, [r7, #4]
 c006f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c006f98:	085b      	lsrs	r3, r3, #1
 c006f9a:	3b01      	subs	r3, #1
 c006f9c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c006f9e:	429a      	cmp	r2, r3
 c006fa0:	d109      	bne.n	c006fb6 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c006fa2:	697b      	ldr	r3, [r7, #20]
 c006fa4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 c006fa8:	687b      	ldr	r3, [r7, #4]
 c006faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c006fac:	085b      	lsrs	r3, r3, #1
 c006fae:	3b01      	subs	r3, #1
 c006fb0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c006fb2:	429a      	cmp	r2, r3
 c006fb4:	d001      	beq.n	c006fba <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 c006fb6:	2301      	movs	r3, #1
 c006fb8:	e000      	b.n	c006fbc <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 c006fba:	2300      	movs	r3, #0
}
 c006fbc:	4618      	mov	r0, r3
 c006fbe:	3720      	adds	r7, #32
 c006fc0:	46bd      	mov	sp, r7
 c006fc2:	bd80      	pop	{r7, pc}
 c006fc4:	50021000 	.word	0x50021000
 c006fc8:	019f800c 	.word	0x019f800c

0c006fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c006fcc:	b580      	push	{r7, lr}
 c006fce:	b086      	sub	sp, #24
 c006fd0:	af00      	add	r7, sp, #0
 c006fd2:	6078      	str	r0, [r7, #4]
 c006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c006fd6:	2300      	movs	r3, #0
 c006fd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c006fda:	687b      	ldr	r3, [r7, #4]
 c006fdc:	2b00      	cmp	r3, #0
 c006fde:	d101      	bne.n	c006fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c006fe0:	2301      	movs	r3, #1
 c006fe2:	e10d      	b.n	c007200 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c006fe4:	4b88      	ldr	r3, [pc, #544]	@ (c007208 <HAL_RCC_ClockConfig+0x23c>)
 c006fe6:	681b      	ldr	r3, [r3, #0]
 c006fe8:	f003 030f 	and.w	r3, r3, #15
 c006fec:	683a      	ldr	r2, [r7, #0]
 c006fee:	429a      	cmp	r2, r3
 c006ff0:	d910      	bls.n	c007014 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c006ff2:	4b85      	ldr	r3, [pc, #532]	@ (c007208 <HAL_RCC_ClockConfig+0x23c>)
 c006ff4:	681b      	ldr	r3, [r3, #0]
 c006ff6:	f023 020f 	bic.w	r2, r3, #15
 c006ffa:	4983      	ldr	r1, [pc, #524]	@ (c007208 <HAL_RCC_ClockConfig+0x23c>)
 c006ffc:	683b      	ldr	r3, [r7, #0]
 c006ffe:	4313      	orrs	r3, r2
 c007000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c007002:	4b81      	ldr	r3, [pc, #516]	@ (c007208 <HAL_RCC_ClockConfig+0x23c>)
 c007004:	681b      	ldr	r3, [r3, #0]
 c007006:	f003 030f 	and.w	r3, r3, #15
 c00700a:	683a      	ldr	r2, [r7, #0]
 c00700c:	429a      	cmp	r2, r3
 c00700e:	d001      	beq.n	c007014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c007010:	2301      	movs	r3, #1
 c007012:	e0f5      	b.n	c007200 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c007014:	687b      	ldr	r3, [r7, #4]
 c007016:	681b      	ldr	r3, [r3, #0]
 c007018:	f003 0301 	and.w	r3, r3, #1
 c00701c:	2b00      	cmp	r3, #0
 c00701e:	f000 8094 	beq.w	c00714a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c007022:	687b      	ldr	r3, [r7, #4]
 c007024:	685b      	ldr	r3, [r3, #4]
 c007026:	2b03      	cmp	r3, #3
 c007028:	d134      	bne.n	c007094 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00702a:	4b78      	ldr	r3, [pc, #480]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c00702c:	681b      	ldr	r3, [r3, #0]
 c00702e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c007032:	2b00      	cmp	r3, #0
 c007034:	d101      	bne.n	c00703a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c007036:	2301      	movs	r3, #1
 c007038:	e0e2      	b.n	c007200 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c00703a:	f000 fa2b 	bl	c007494 <RCC_GetSysClockFreqFromPLLSource>
 c00703e:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c007040:	693b      	ldr	r3, [r7, #16]
 c007042:	4a73      	ldr	r2, [pc, #460]	@ (c007210 <HAL_RCC_ClockConfig+0x244>)
 c007044:	4293      	cmp	r3, r2
 c007046:	d956      	bls.n	c0070f6 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c007048:	4b70      	ldr	r3, [pc, #448]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c00704a:	689b      	ldr	r3, [r3, #8]
 c00704c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 c007050:	2b00      	cmp	r3, #0
 c007052:	d10a      	bne.n	c00706a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c007054:	4b6d      	ldr	r3, [pc, #436]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007056:	689b      	ldr	r3, [r3, #8]
 c007058:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 c00705c:	4a6b      	ldr	r2, [pc, #428]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c00705e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c007062:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c007064:	2380      	movs	r3, #128	@ 0x80
 c007066:	617b      	str	r3, [r7, #20]
 c007068:	e045      	b.n	c0070f6 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00706a:	687b      	ldr	r3, [r7, #4]
 c00706c:	681b      	ldr	r3, [r3, #0]
 c00706e:	f003 0302 	and.w	r3, r3, #2
 c007072:	2b00      	cmp	r3, #0
 c007074:	d03f      	beq.n	c0070f6 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c007076:	687b      	ldr	r3, [r7, #4]
 c007078:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00707a:	2b00      	cmp	r3, #0
 c00707c:	d13b      	bne.n	c0070f6 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00707e:	4b63      	ldr	r3, [pc, #396]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007080:	689b      	ldr	r3, [r3, #8]
 c007082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 c007086:	4a61      	ldr	r2, [pc, #388]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c00708c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00708e:	2380      	movs	r3, #128	@ 0x80
 c007090:	617b      	str	r3, [r7, #20]
 c007092:	e030      	b.n	c0070f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c007094:	687b      	ldr	r3, [r7, #4]
 c007096:	685b      	ldr	r3, [r3, #4]
 c007098:	2b02      	cmp	r3, #2
 c00709a:	d107      	bne.n	c0070ac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00709c:	4b5b      	ldr	r3, [pc, #364]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c00709e:	681b      	ldr	r3, [r3, #0]
 c0070a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0070a4:	2b00      	cmp	r3, #0
 c0070a6:	d115      	bne.n	c0070d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0070a8:	2301      	movs	r3, #1
 c0070aa:	e0a9      	b.n	c007200 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0070ac:	687b      	ldr	r3, [r7, #4]
 c0070ae:	685b      	ldr	r3, [r3, #4]
 c0070b0:	2b00      	cmp	r3, #0
 c0070b2:	d107      	bne.n	c0070c4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0070b4:	4b55      	ldr	r3, [pc, #340]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0070b6:	681b      	ldr	r3, [r3, #0]
 c0070b8:	f003 0302 	and.w	r3, r3, #2
 c0070bc:	2b00      	cmp	r3, #0
 c0070be:	d109      	bne.n	c0070d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0070c0:	2301      	movs	r3, #1
 c0070c2:	e09d      	b.n	c007200 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0070c4:	4b51      	ldr	r3, [pc, #324]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0070c6:	681b      	ldr	r3, [r3, #0]
 c0070c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0070cc:	2b00      	cmp	r3, #0
 c0070ce:	d101      	bne.n	c0070d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0070d0:	2301      	movs	r3, #1
 c0070d2:	e095      	b.n	c007200 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c0070d4:	f000 f8a2 	bl	c00721c <HAL_RCC_GetSysClockFreq>
 c0070d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c0070da:	693b      	ldr	r3, [r7, #16]
 c0070dc:	4a4c      	ldr	r2, [pc, #304]	@ (c007210 <HAL_RCC_ClockConfig+0x244>)
 c0070de:	4293      	cmp	r3, r2
 c0070e0:	d909      	bls.n	c0070f6 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0070e2:	4b4a      	ldr	r3, [pc, #296]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0070e4:	689b      	ldr	r3, [r3, #8]
 c0070e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 c0070ea:	4a48      	ldr	r2, [pc, #288]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0070ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c0070f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c0070f2:	2380      	movs	r3, #128	@ 0x80
 c0070f4:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0070f6:	4b45      	ldr	r3, [pc, #276]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0070f8:	689b      	ldr	r3, [r3, #8]
 c0070fa:	f023 0203 	bic.w	r2, r3, #3
 c0070fe:	687b      	ldr	r3, [r7, #4]
 c007100:	685b      	ldr	r3, [r3, #4]
 c007102:	4942      	ldr	r1, [pc, #264]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007104:	4313      	orrs	r3, r2
 c007106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c007108:	f7fe fc3e 	bl	c005988 <HAL_GetTick>
 c00710c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c00710e:	e013      	b.n	c007138 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c007110:	f7fe fc3a 	bl	c005988 <HAL_GetTick>
 c007114:	4602      	mov	r2, r0
 c007116:	68fb      	ldr	r3, [r7, #12]
 c007118:	1ad3      	subs	r3, r2, r3
 c00711a:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00711e:	4293      	cmp	r3, r2
 c007120:	d90a      	bls.n	c007138 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c007122:	4b3a      	ldr	r3, [pc, #232]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007124:	689b      	ldr	r3, [r3, #8]
 c007126:	f003 020c 	and.w	r2, r3, #12
 c00712a:	687b      	ldr	r3, [r7, #4]
 c00712c:	685b      	ldr	r3, [r3, #4]
 c00712e:	009b      	lsls	r3, r3, #2
 c007130:	429a      	cmp	r2, r3
 c007132:	d001      	beq.n	c007138 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 c007134:	2303      	movs	r3, #3
 c007136:	e063      	b.n	c007200 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c007138:	4b34      	ldr	r3, [pc, #208]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c00713a:	689b      	ldr	r3, [r3, #8]
 c00713c:	f003 020c 	and.w	r2, r3, #12
 c007140:	687b      	ldr	r3, [r7, #4]
 c007142:	685b      	ldr	r3, [r3, #4]
 c007144:	009b      	lsls	r3, r3, #2
 c007146:	429a      	cmp	r2, r3
 c007148:	d1e2      	bne.n	c007110 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c00714a:	687b      	ldr	r3, [r7, #4]
 c00714c:	681b      	ldr	r3, [r3, #0]
 c00714e:	f003 0302 	and.w	r3, r3, #2
 c007152:	2b00      	cmp	r3, #0
 c007154:	d009      	beq.n	c00716a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c007156:	4b2d      	ldr	r3, [pc, #180]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007158:	689b      	ldr	r3, [r3, #8]
 c00715a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 c00715e:	687b      	ldr	r3, [r7, #4]
 c007160:	689b      	ldr	r3, [r3, #8]
 c007162:	492a      	ldr	r1, [pc, #168]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007164:	4313      	orrs	r3, r2
 c007166:	608b      	str	r3, [r1, #8]
 c007168:	e008      	b.n	c00717c <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c00716a:	697b      	ldr	r3, [r7, #20]
 c00716c:	2b80      	cmp	r3, #128	@ 0x80
 c00716e:	d105      	bne.n	c00717c <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c007170:	4b26      	ldr	r3, [pc, #152]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007172:	689b      	ldr	r3, [r3, #8]
 c007174:	4a25      	ldr	r2, [pc, #148]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c007176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 c00717a:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c00717c:	4b22      	ldr	r3, [pc, #136]	@ (c007208 <HAL_RCC_ClockConfig+0x23c>)
 c00717e:	681b      	ldr	r3, [r3, #0]
 c007180:	f003 030f 	and.w	r3, r3, #15
 c007184:	683a      	ldr	r2, [r7, #0]
 c007186:	429a      	cmp	r2, r3
 c007188:	d210      	bcs.n	c0071ac <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00718a:	4b1f      	ldr	r3, [pc, #124]	@ (c007208 <HAL_RCC_ClockConfig+0x23c>)
 c00718c:	681b      	ldr	r3, [r3, #0]
 c00718e:	f023 020f 	bic.w	r2, r3, #15
 c007192:	491d      	ldr	r1, [pc, #116]	@ (c007208 <HAL_RCC_ClockConfig+0x23c>)
 c007194:	683b      	ldr	r3, [r7, #0]
 c007196:	4313      	orrs	r3, r2
 c007198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00719a:	4b1b      	ldr	r3, [pc, #108]	@ (c007208 <HAL_RCC_ClockConfig+0x23c>)
 c00719c:	681b      	ldr	r3, [r3, #0]
 c00719e:	f003 030f 	and.w	r3, r3, #15
 c0071a2:	683a      	ldr	r2, [r7, #0]
 c0071a4:	429a      	cmp	r2, r3
 c0071a6:	d001      	beq.n	c0071ac <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 c0071a8:	2301      	movs	r3, #1
 c0071aa:	e029      	b.n	c007200 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c0071ac:	687b      	ldr	r3, [r7, #4]
 c0071ae:	681b      	ldr	r3, [r3, #0]
 c0071b0:	f003 0304 	and.w	r3, r3, #4
 c0071b4:	2b00      	cmp	r3, #0
 c0071b6:	d008      	beq.n	c0071ca <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c0071b8:	4b14      	ldr	r3, [pc, #80]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0071ba:	689b      	ldr	r3, [r3, #8]
 c0071bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c0071c0:	687b      	ldr	r3, [r7, #4]
 c0071c2:	68db      	ldr	r3, [r3, #12]
 c0071c4:	4911      	ldr	r1, [pc, #68]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0071c6:	4313      	orrs	r3, r2
 c0071c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c0071ca:	687b      	ldr	r3, [r7, #4]
 c0071cc:	681b      	ldr	r3, [r3, #0]
 c0071ce:	f003 0308 	and.w	r3, r3, #8
 c0071d2:	2b00      	cmp	r3, #0
 c0071d4:	d009      	beq.n	c0071ea <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c0071d6:	4b0d      	ldr	r3, [pc, #52]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0071d8:	689b      	ldr	r3, [r3, #8]
 c0071da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 c0071de:	687b      	ldr	r3, [r7, #4]
 c0071e0:	691b      	ldr	r3, [r3, #16]
 c0071e2:	00db      	lsls	r3, r3, #3
 c0071e4:	4909      	ldr	r1, [pc, #36]	@ (c00720c <HAL_RCC_ClockConfig+0x240>)
 c0071e6:	4313      	orrs	r3, r2
 c0071e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0071ea:	f000 f8b3 	bl	c007354 <HAL_RCC_GetHCLKFreq>
 c0071ee:	4603      	mov	r3, r0
 c0071f0:	4a08      	ldr	r2, [pc, #32]	@ (c007214 <HAL_RCC_ClockConfig+0x248>)
 c0071f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c0071f4:	4b08      	ldr	r3, [pc, #32]	@ (c007218 <HAL_RCC_ClockConfig+0x24c>)
 c0071f6:	681b      	ldr	r3, [r3, #0]
 c0071f8:	4618      	mov	r0, r3
 c0071fa:	f7fe fb75 	bl	c0058e8 <HAL_InitTick>
 c0071fe:	4603      	mov	r3, r0
}
 c007200:	4618      	mov	r0, r3
 c007202:	3718      	adds	r7, #24
 c007204:	46bd      	mov	sp, r7
 c007206:	bd80      	pop	{r7, pc}
 c007208:	50022000 	.word	0x50022000
 c00720c:	50021000 	.word	0x50021000
 c007210:	04c4b400 	.word	0x04c4b400
 c007214:	30000610 	.word	0x30000610
 c007218:	30000618 	.word	0x30000618

0c00721c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c00721c:	b480      	push	{r7}
 c00721e:	b089      	sub	sp, #36	@ 0x24
 c007220:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c007222:	2300      	movs	r3, #0
 c007224:	61fb      	str	r3, [r7, #28]
 c007226:	2300      	movs	r3, #0
 c007228:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00722a:	4b47      	ldr	r3, [pc, #284]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00722c:	689b      	ldr	r3, [r3, #8]
 c00722e:	f003 030c 	and.w	r3, r3, #12
 c007232:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c007234:	4b44      	ldr	r3, [pc, #272]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c007236:	68db      	ldr	r3, [r3, #12]
 c007238:	f003 0303 	and.w	r3, r3, #3
 c00723c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00723e:	693b      	ldr	r3, [r7, #16]
 c007240:	2b00      	cmp	r3, #0
 c007242:	d005      	beq.n	c007250 <HAL_RCC_GetSysClockFreq+0x34>
 c007244:	693b      	ldr	r3, [r7, #16]
 c007246:	2b0c      	cmp	r3, #12
 c007248:	d121      	bne.n	c00728e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c00724a:	68fb      	ldr	r3, [r7, #12]
 c00724c:	2b01      	cmp	r3, #1
 c00724e:	d11e      	bne.n	c00728e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c007250:	4b3d      	ldr	r3, [pc, #244]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c007252:	681b      	ldr	r3, [r3, #0]
 c007254:	f003 0308 	and.w	r3, r3, #8
 c007258:	2b00      	cmp	r3, #0
 c00725a:	d107      	bne.n	c00726c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00725c:	4b3a      	ldr	r3, [pc, #232]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c007262:	0a1b      	lsrs	r3, r3, #8
 c007264:	f003 030f 	and.w	r3, r3, #15
 c007268:	61fb      	str	r3, [r7, #28]
 c00726a:	e005      	b.n	c007278 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00726c:	4b36      	ldr	r3, [pc, #216]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00726e:	681b      	ldr	r3, [r3, #0]
 c007270:	091b      	lsrs	r3, r3, #4
 c007272:	f003 030f 	and.w	r3, r3, #15
 c007276:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c007278:	4a34      	ldr	r2, [pc, #208]	@ (c00734c <HAL_RCC_GetSysClockFreq+0x130>)
 c00727a:	69fb      	ldr	r3, [r7, #28]
 c00727c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c007280:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c007282:	693b      	ldr	r3, [r7, #16]
 c007284:	2b00      	cmp	r3, #0
 c007286:	d10d      	bne.n	c0072a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c007288:	69fb      	ldr	r3, [r7, #28]
 c00728a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00728c:	e00a      	b.n	c0072a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00728e:	693b      	ldr	r3, [r7, #16]
 c007290:	2b04      	cmp	r3, #4
 c007292:	d102      	bne.n	c00729a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c007294:	4b2e      	ldr	r3, [pc, #184]	@ (c007350 <HAL_RCC_GetSysClockFreq+0x134>)
 c007296:	61bb      	str	r3, [r7, #24]
 c007298:	e004      	b.n	c0072a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00729a:	693b      	ldr	r3, [r7, #16]
 c00729c:	2b08      	cmp	r3, #8
 c00729e:	d101      	bne.n	c0072a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c0072a0:	4b2b      	ldr	r3, [pc, #172]	@ (c007350 <HAL_RCC_GetSysClockFreq+0x134>)
 c0072a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0072a4:	693b      	ldr	r3, [r7, #16]
 c0072a6:	2b0c      	cmp	r3, #12
 c0072a8:	d146      	bne.n	c007338 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0072aa:	4b27      	ldr	r3, [pc, #156]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0072ac:	68db      	ldr	r3, [r3, #12]
 c0072ae:	f003 0303 	and.w	r3, r3, #3
 c0072b2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0072b4:	4b24      	ldr	r3, [pc, #144]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0072b6:	68db      	ldr	r3, [r3, #12]
 c0072b8:	091b      	lsrs	r3, r3, #4
 c0072ba:	f003 030f 	and.w	r3, r3, #15
 c0072be:	3301      	adds	r3, #1
 c0072c0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c0072c2:	68bb      	ldr	r3, [r7, #8]
 c0072c4:	2b02      	cmp	r3, #2
 c0072c6:	d003      	beq.n	c0072d0 <HAL_RCC_GetSysClockFreq+0xb4>
 c0072c8:	68bb      	ldr	r3, [r7, #8]
 c0072ca:	2b03      	cmp	r3, #3
 c0072cc:	d00d      	beq.n	c0072ea <HAL_RCC_GetSysClockFreq+0xce>
 c0072ce:	e019      	b.n	c007304 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0072d0:	4a1f      	ldr	r2, [pc, #124]	@ (c007350 <HAL_RCC_GetSysClockFreq+0x134>)
 c0072d2:	687b      	ldr	r3, [r7, #4]
 c0072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0072d8:	4a1b      	ldr	r2, [pc, #108]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0072da:	68d2      	ldr	r2, [r2, #12]
 c0072dc:	0a12      	lsrs	r2, r2, #8
 c0072de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 c0072e2:	fb02 f303 	mul.w	r3, r2, r3
 c0072e6:	617b      	str	r3, [r7, #20]
        break;
 c0072e8:	e019      	b.n	c00731e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0072ea:	4a19      	ldr	r2, [pc, #100]	@ (c007350 <HAL_RCC_GetSysClockFreq+0x134>)
 c0072ec:	687b      	ldr	r3, [r7, #4]
 c0072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 c0072f2:	4a15      	ldr	r2, [pc, #84]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0072f4:	68d2      	ldr	r2, [r2, #12]
 c0072f6:	0a12      	lsrs	r2, r2, #8
 c0072f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 c0072fc:	fb02 f303 	mul.w	r3, r2, r3
 c007300:	617b      	str	r3, [r7, #20]
        break;
 c007302:	e00c      	b.n	c00731e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c007304:	69fa      	ldr	r2, [r7, #28]
 c007306:	687b      	ldr	r3, [r7, #4]
 c007308:	fbb2 f3f3 	udiv	r3, r2, r3
 c00730c:	4a0e      	ldr	r2, [pc, #56]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00730e:	68d2      	ldr	r2, [r2, #12]
 c007310:	0a12      	lsrs	r2, r2, #8
 c007312:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 c007316:	fb02 f303 	mul.w	r3, r2, r3
 c00731a:	617b      	str	r3, [r7, #20]
        break;
 c00731c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c00731e:	4b0a      	ldr	r3, [pc, #40]	@ (c007348 <HAL_RCC_GetSysClockFreq+0x12c>)
 c007320:	68db      	ldr	r3, [r3, #12]
 c007322:	0e5b      	lsrs	r3, r3, #25
 c007324:	f003 0303 	and.w	r3, r3, #3
 c007328:	3301      	adds	r3, #1
 c00732a:	005b      	lsls	r3, r3, #1
 c00732c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c00732e:	697a      	ldr	r2, [r7, #20]
 c007330:	683b      	ldr	r3, [r7, #0]
 c007332:	fbb2 f3f3 	udiv	r3, r2, r3
 c007336:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c007338:	69bb      	ldr	r3, [r7, #24]
}
 c00733a:	4618      	mov	r0, r3
 c00733c:	3724      	adds	r7, #36	@ 0x24
 c00733e:	46bd      	mov	sp, r7
 c007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007344:	4770      	bx	lr
 c007346:	bf00      	nop
 c007348:	50021000 	.word	0x50021000
 c00734c:	0c009e5c 	.word	0x0c009e5c
 c007350:	00f42400 	.word	0x00f42400

0c007354 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c007354:	b580      	push	{r7, lr}
 c007356:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c007358:	f7ff ff60 	bl	c00721c <HAL_RCC_GetSysClockFreq>
 c00735c:	4602      	mov	r2, r0
 c00735e:	4b05      	ldr	r3, [pc, #20]	@ (c007374 <HAL_RCC_GetHCLKFreq+0x20>)
 c007360:	689b      	ldr	r3, [r3, #8]
 c007362:	091b      	lsrs	r3, r3, #4
 c007364:	f003 030f 	and.w	r3, r3, #15
 c007368:	4903      	ldr	r1, [pc, #12]	@ (c007378 <HAL_RCC_GetHCLKFreq+0x24>)
 c00736a:	5ccb      	ldrb	r3, [r1, r3]
 c00736c:	fa22 f303 	lsr.w	r3, r2, r3
}
 c007370:	4618      	mov	r0, r3
 c007372:	bd80      	pop	{r7, pc}
 c007374:	50021000 	.word	0x50021000
 c007378:	0c009e44 	.word	0x0c009e44

0c00737c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c00737c:	b580      	push	{r7, lr}
 c00737e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c007380:	f7ff ffe8 	bl	c007354 <HAL_RCC_GetHCLKFreq>
 c007384:	4602      	mov	r2, r0
 c007386:	4b05      	ldr	r3, [pc, #20]	@ (c00739c <HAL_RCC_GetPCLK1Freq+0x20>)
 c007388:	689b      	ldr	r3, [r3, #8]
 c00738a:	0a1b      	lsrs	r3, r3, #8
 c00738c:	f003 0307 	and.w	r3, r3, #7
 c007390:	4903      	ldr	r1, [pc, #12]	@ (c0073a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 c007392:	5ccb      	ldrb	r3, [r1, r3]
 c007394:	fa22 f303 	lsr.w	r3, r2, r3
}
 c007398:	4618      	mov	r0, r3
 c00739a:	bd80      	pop	{r7, pc}
 c00739c:	50021000 	.word	0x50021000
 c0073a0:	0c009e54 	.word	0x0c009e54

0c0073a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c0073a4:	b580      	push	{r7, lr}
 c0073a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c0073a8:	f7ff ffd4 	bl	c007354 <HAL_RCC_GetHCLKFreq>
 c0073ac:	4602      	mov	r2, r0
 c0073ae:	4b05      	ldr	r3, [pc, #20]	@ (c0073c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 c0073b0:	689b      	ldr	r3, [r3, #8]
 c0073b2:	0adb      	lsrs	r3, r3, #11
 c0073b4:	f003 0307 	and.w	r3, r3, #7
 c0073b8:	4903      	ldr	r1, [pc, #12]	@ (c0073c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 c0073ba:	5ccb      	ldrb	r3, [r1, r3]
 c0073bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0073c0:	4618      	mov	r0, r3
 c0073c2:	bd80      	pop	{r7, pc}
 c0073c4:	50021000 	.word	0x50021000
 c0073c8:	0c009e54 	.word	0x0c009e54

0c0073cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0073cc:	b580      	push	{r7, lr}
 c0073ce:	b086      	sub	sp, #24
 c0073d0:	af00      	add	r7, sp, #0
 c0073d2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c0073d4:	2300      	movs	r3, #0
 c0073d6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0073d8:	4b2c      	ldr	r3, [pc, #176]	@ (c00748c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0073da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0073dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c0073e0:	2b00      	cmp	r3, #0
 c0073e2:	d003      	beq.n	c0073ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0073e4:	f7ff f862 	bl	c0064ac <HAL_PWREx_GetVoltageRange>
 c0073e8:	6138      	str	r0, [r7, #16]
 c0073ea:	e014      	b.n	c007416 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c0073ec:	4b27      	ldr	r3, [pc, #156]	@ (c00748c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0073ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0073f0:	4a26      	ldr	r2, [pc, #152]	@ (c00748c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0073f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c0073f6:	6593      	str	r3, [r2, #88]	@ 0x58
 c0073f8:	4b24      	ldr	r3, [pc, #144]	@ (c00748c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0073fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0073fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c007400:	60fb      	str	r3, [r7, #12]
 c007402:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c007404:	f7ff f852 	bl	c0064ac <HAL_PWREx_GetVoltageRange>
 c007408:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c00740a:	4b20      	ldr	r3, [pc, #128]	@ (c00748c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00740c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c00740e:	4a1f      	ldr	r2, [pc, #124]	@ (c00748c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c007410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c007414:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c007416:	693b      	ldr	r3, [r7, #16]
 c007418:	2b00      	cmp	r3, #0
 c00741a:	d003      	beq.n	c007424 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c00741c:	693b      	ldr	r3, [r7, #16]
 c00741e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c007422:	d10b      	bne.n	c00743c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c007424:	687b      	ldr	r3, [r7, #4]
 c007426:	2b80      	cmp	r3, #128	@ 0x80
 c007428:	d919      	bls.n	c00745e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c00742a:	687b      	ldr	r3, [r7, #4]
 c00742c:	2ba0      	cmp	r3, #160	@ 0xa0
 c00742e:	d902      	bls.n	c007436 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c007430:	2302      	movs	r3, #2
 c007432:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c007434:	e013      	b.n	c00745e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c007436:	2301      	movs	r3, #1
 c007438:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c00743a:	e010      	b.n	c00745e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c00743c:	687b      	ldr	r3, [r7, #4]
 c00743e:	2b80      	cmp	r3, #128	@ 0x80
 c007440:	d902      	bls.n	c007448 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c007442:	2303      	movs	r3, #3
 c007444:	617b      	str	r3, [r7, #20]
 c007446:	e00a      	b.n	c00745e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c007448:	687b      	ldr	r3, [r7, #4]
 c00744a:	2b80      	cmp	r3, #128	@ 0x80
 c00744c:	d102      	bne.n	c007454 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c00744e:	2302      	movs	r3, #2
 c007450:	617b      	str	r3, [r7, #20]
 c007452:	e004      	b.n	c00745e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c007454:	687b      	ldr	r3, [r7, #4]
 c007456:	2b70      	cmp	r3, #112	@ 0x70
 c007458:	d101      	bne.n	c00745e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00745a:	2301      	movs	r3, #1
 c00745c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c00745e:	4b0c      	ldr	r3, [pc, #48]	@ (c007490 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c007460:	681b      	ldr	r3, [r3, #0]
 c007462:	f023 020f 	bic.w	r2, r3, #15
 c007466:	490a      	ldr	r1, [pc, #40]	@ (c007490 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c007468:	697b      	ldr	r3, [r7, #20]
 c00746a:	4313      	orrs	r3, r2
 c00746c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c00746e:	4b08      	ldr	r3, [pc, #32]	@ (c007490 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c007470:	681b      	ldr	r3, [r3, #0]
 c007472:	f003 030f 	and.w	r3, r3, #15
 c007476:	697a      	ldr	r2, [r7, #20]
 c007478:	429a      	cmp	r2, r3
 c00747a:	d001      	beq.n	c007480 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c00747c:	2301      	movs	r3, #1
 c00747e:	e000      	b.n	c007482 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c007480:	2300      	movs	r3, #0
}
 c007482:	4618      	mov	r0, r3
 c007484:	3718      	adds	r7, #24
 c007486:	46bd      	mov	sp, r7
 c007488:	bd80      	pop	{r7, pc}
 c00748a:	bf00      	nop
 c00748c:	50021000 	.word	0x50021000
 c007490:	50022000 	.word	0x50022000

0c007494 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c007494:	b480      	push	{r7}
 c007496:	b087      	sub	sp, #28
 c007498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c00749a:	2300      	movs	r3, #0
 c00749c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c00749e:	4b36      	ldr	r3, [pc, #216]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0074a0:	68db      	ldr	r3, [r3, #12]
 c0074a2:	f003 0303 	and.w	r3, r3, #3
 c0074a6:	2b01      	cmp	r3, #1
 c0074a8:	d118      	bne.n	c0074dc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0074aa:	4b33      	ldr	r3, [pc, #204]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0074ac:	681b      	ldr	r3, [r3, #0]
 c0074ae:	f003 0308 	and.w	r3, r3, #8
 c0074b2:	2b00      	cmp	r3, #0
 c0074b4:	d107      	bne.n	c0074c6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0074b6:	4b30      	ldr	r3, [pc, #192]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0074b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0074bc:	0a1b      	lsrs	r3, r3, #8
 c0074be:	f003 030f 	and.w	r3, r3, #15
 c0074c2:	617b      	str	r3, [r7, #20]
 c0074c4:	e005      	b.n	c0074d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0074c6:	4b2c      	ldr	r3, [pc, #176]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0074c8:	681b      	ldr	r3, [r3, #0]
 c0074ca:	091b      	lsrs	r3, r3, #4
 c0074cc:	f003 030f 	and.w	r3, r3, #15
 c0074d0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0074d2:	4a2a      	ldr	r2, [pc, #168]	@ (c00757c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c0074d4:	697b      	ldr	r3, [r7, #20]
 c0074d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0074da:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0074dc:	4b26      	ldr	r3, [pc, #152]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0074de:	68db      	ldr	r3, [r3, #12]
 c0074e0:	f003 0303 	and.w	r3, r3, #3
 c0074e4:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0074e6:	4b24      	ldr	r3, [pc, #144]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0074e8:	68db      	ldr	r3, [r3, #12]
 c0074ea:	091b      	lsrs	r3, r3, #4
 c0074ec:	f003 030f 	and.w	r3, r3, #15
 c0074f0:	3301      	adds	r3, #1
 c0074f2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c0074f4:	68fb      	ldr	r3, [r7, #12]
 c0074f6:	2b02      	cmp	r3, #2
 c0074f8:	d003      	beq.n	c007502 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c0074fa:	68fb      	ldr	r3, [r7, #12]
 c0074fc:	2b03      	cmp	r3, #3
 c0074fe:	d00d      	beq.n	c00751c <RCC_GetSysClockFreqFromPLLSource+0x88>
 c007500:	e019      	b.n	c007536 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c007502:	4a1f      	ldr	r2, [pc, #124]	@ (c007580 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c007504:	68bb      	ldr	r3, [r7, #8]
 c007506:	fbb2 f3f3 	udiv	r3, r2, r3
 c00750a:	4a1b      	ldr	r2, [pc, #108]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00750c:	68d2      	ldr	r2, [r2, #12]
 c00750e:	0a12      	lsrs	r2, r2, #8
 c007510:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 c007514:	fb02 f303 	mul.w	r3, r2, r3
 c007518:	613b      	str	r3, [r7, #16]
      break;
 c00751a:	e019      	b.n	c007550 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00751c:	4a18      	ldr	r2, [pc, #96]	@ (c007580 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c00751e:	68bb      	ldr	r3, [r7, #8]
 c007520:	fbb2 f3f3 	udiv	r3, r2, r3
 c007524:	4a14      	ldr	r2, [pc, #80]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007526:	68d2      	ldr	r2, [r2, #12]
 c007528:	0a12      	lsrs	r2, r2, #8
 c00752a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 c00752e:	fb02 f303 	mul.w	r3, r2, r3
 c007532:	613b      	str	r3, [r7, #16]
      break;
 c007534:	e00c      	b.n	c007550 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c007536:	697a      	ldr	r2, [r7, #20]
 c007538:	68bb      	ldr	r3, [r7, #8]
 c00753a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00753e:	4a0e      	ldr	r2, [pc, #56]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007540:	68d2      	ldr	r2, [r2, #12]
 c007542:	0a12      	lsrs	r2, r2, #8
 c007544:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 c007548:	fb02 f303 	mul.w	r3, r2, r3
 c00754c:	613b      	str	r3, [r7, #16]
      break;
 c00754e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c007550:	4b09      	ldr	r3, [pc, #36]	@ (c007578 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007552:	68db      	ldr	r3, [r3, #12]
 c007554:	0e5b      	lsrs	r3, r3, #25
 c007556:	f003 0303 	and.w	r3, r3, #3
 c00755a:	3301      	adds	r3, #1
 c00755c:	005b      	lsls	r3, r3, #1
 c00755e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c007560:	693a      	ldr	r2, [r7, #16]
 c007562:	687b      	ldr	r3, [r7, #4]
 c007564:	fbb2 f3f3 	udiv	r3, r2, r3
 c007568:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c00756a:	683b      	ldr	r3, [r7, #0]
}
 c00756c:	4618      	mov	r0, r3
 c00756e:	371c      	adds	r7, #28
 c007570:	46bd      	mov	sp, r7
 c007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007576:	4770      	bx	lr
 c007578:	50021000 	.word	0x50021000
 c00757c:	0c009e5c 	.word	0x0c009e5c
 c007580:	00f42400 	.word	0x00f42400

0c007584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c007584:	b580      	push	{r7, lr}
 c007586:	b088      	sub	sp, #32
 c007588:	af00      	add	r7, sp, #0
 c00758a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c00758c:	2300      	movs	r3, #0
 c00758e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c007590:	2300      	movs	r3, #0
 c007592:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c007594:	687b      	ldr	r3, [r7, #4]
 c007596:	681b      	ldr	r3, [r3, #0]
 c007598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c00759c:	2b00      	cmp	r3, #0
 c00759e:	d040      	beq.n	c007622 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c0075a0:	687b      	ldr	r3, [r7, #4]
 c0075a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c0075a4:	2b80      	cmp	r3, #128	@ 0x80
 c0075a6:	d02a      	beq.n	c0075fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c0075a8:	2b80      	cmp	r3, #128	@ 0x80
 c0075aa:	d825      	bhi.n	c0075f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c0075ac:	2b60      	cmp	r3, #96	@ 0x60
 c0075ae:	d026      	beq.n	c0075fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c0075b0:	2b60      	cmp	r3, #96	@ 0x60
 c0075b2:	d821      	bhi.n	c0075f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c0075b4:	2b40      	cmp	r3, #64	@ 0x40
 c0075b6:	d006      	beq.n	c0075c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 c0075b8:	2b40      	cmp	r3, #64	@ 0x40
 c0075ba:	d81d      	bhi.n	c0075f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c0075bc:	2b00      	cmp	r3, #0
 c0075be:	d009      	beq.n	c0075d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c0075c0:	2b20      	cmp	r3, #32
 c0075c2:	d010      	beq.n	c0075e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 c0075c4:	e018      	b.n	c0075f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0075c6:	4b8f      	ldr	r3, [pc, #572]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0075c8:	68db      	ldr	r3, [r3, #12]
 c0075ca:	4a8e      	ldr	r2, [pc, #568]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0075cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0075d0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0075d2:	e015      	b.n	c007600 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0075d4:	687b      	ldr	r3, [r7, #4]
 c0075d6:	3304      	adds	r3, #4
 c0075d8:	2100      	movs	r1, #0
 c0075da:	4618      	mov	r0, r3
 c0075dc:	f000 fb56 	bl	c007c8c <RCCEx_PLLSAI1_Config>
 c0075e0:	4603      	mov	r3, r0
 c0075e2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0075e4:	e00c      	b.n	c007600 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c0075e6:	687b      	ldr	r3, [r7, #4]
 c0075e8:	3320      	adds	r3, #32
 c0075ea:	2100      	movs	r1, #0
 c0075ec:	4618      	mov	r0, r3
 c0075ee:	f000 fc33 	bl	c007e58 <RCCEx_PLLSAI2_Config>
 c0075f2:	4603      	mov	r3, r0
 c0075f4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0075f6:	e003      	b.n	c007600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0075f8:	2301      	movs	r3, #1
 c0075fa:	77fb      	strb	r3, [r7, #31]
        break;
 c0075fc:	e000      	b.n	c007600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c0075fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 c007600:	7ffb      	ldrb	r3, [r7, #31]
 c007602:	2b00      	cmp	r3, #0
 c007604:	d10b      	bne.n	c00761e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c007606:	4b7f      	ldr	r3, [pc, #508]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007608:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c00760c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 c007610:	687b      	ldr	r3, [r7, #4]
 c007612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c007614:	497b      	ldr	r1, [pc, #492]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007616:	4313      	orrs	r3, r2
 c007618:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 c00761c:	e001      	b.n	c007622 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00761e:	7ffb      	ldrb	r3, [r7, #31]
 c007620:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c007622:	687b      	ldr	r3, [r7, #4]
 c007624:	681b      	ldr	r3, [r3, #0]
 c007626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 c00762a:	2b00      	cmp	r3, #0
 c00762c:	d047      	beq.n	c0076be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c00762e:	687b      	ldr	r3, [r7, #4]
 c007630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 c007632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c007636:	d030      	beq.n	c00769a <HAL_RCCEx_PeriphCLKConfig+0x116>
 c007638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00763c:	d82a      	bhi.n	c007694 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00763e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c007642:	d02a      	beq.n	c00769a <HAL_RCCEx_PeriphCLKConfig+0x116>
 c007644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c007648:	d824      	bhi.n	c007694 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00764a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00764e:	d008      	beq.n	c007662 <HAL_RCCEx_PeriphCLKConfig+0xde>
 c007650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c007654:	d81e      	bhi.n	c007694 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c007656:	2b00      	cmp	r3, #0
 c007658:	d00a      	beq.n	c007670 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c00765a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c00765e:	d010      	beq.n	c007682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c007660:	e018      	b.n	c007694 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c007662:	4b68      	ldr	r3, [pc, #416]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007664:	68db      	ldr	r3, [r3, #12]
 c007666:	4a67      	ldr	r2, [pc, #412]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00766c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00766e:	e015      	b.n	c00769c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c007670:	687b      	ldr	r3, [r7, #4]
 c007672:	3304      	adds	r3, #4
 c007674:	2100      	movs	r1, #0
 c007676:	4618      	mov	r0, r3
 c007678:	f000 fb08 	bl	c007c8c <RCCEx_PLLSAI1_Config>
 c00767c:	4603      	mov	r3, r0
 c00767e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007680:	e00c      	b.n	c00769c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c007682:	687b      	ldr	r3, [r7, #4]
 c007684:	3320      	adds	r3, #32
 c007686:	2100      	movs	r1, #0
 c007688:	4618      	mov	r0, r3
 c00768a:	f000 fbe5 	bl	c007e58 <RCCEx_PLLSAI2_Config>
 c00768e:	4603      	mov	r3, r0
 c007690:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007692:	e003      	b.n	c00769c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c007694:	2301      	movs	r3, #1
 c007696:	77fb      	strb	r3, [r7, #31]
        break;
 c007698:	e000      	b.n	c00769c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c00769a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00769c:	7ffb      	ldrb	r3, [r7, #31]
 c00769e:	2b00      	cmp	r3, #0
 c0076a0:	d10b      	bne.n	c0076ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c0076a2:	4b58      	ldr	r3, [pc, #352]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0076a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c0076a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c0076ac:	687b      	ldr	r3, [r7, #4]
 c0076ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 c0076b0:	4954      	ldr	r1, [pc, #336]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0076b2:	4313      	orrs	r3, r2
 c0076b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 c0076b8:	e001      	b.n	c0076be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0076ba:	7ffb      	ldrb	r3, [r7, #31]
 c0076bc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c0076be:	687b      	ldr	r3, [r7, #4]
 c0076c0:	681b      	ldr	r3, [r3, #0]
 c0076c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0076c6:	2b00      	cmp	r3, #0
 c0076c8:	f000 80ab 	beq.w	c007822 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c0076cc:	2300      	movs	r3, #0
 c0076ce:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c0076d0:	4b4c      	ldr	r3, [pc, #304]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0076d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0076d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c0076d8:	2b00      	cmp	r3, #0
 c0076da:	d10d      	bne.n	c0076f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0076dc:	4b49      	ldr	r3, [pc, #292]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0076de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0076e0:	4a48      	ldr	r2, [pc, #288]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0076e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c0076e6:	6593      	str	r3, [r2, #88]	@ 0x58
 c0076e8:	4b46      	ldr	r3, [pc, #280]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0076ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0076ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c0076f0:	60fb      	str	r3, [r7, #12]
 c0076f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c0076f4:	2301      	movs	r3, #1
 c0076f6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0076f8:	4b43      	ldr	r3, [pc, #268]	@ (c007808 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0076fa:	681b      	ldr	r3, [r3, #0]
 c0076fc:	4a42      	ldr	r2, [pc, #264]	@ (c007808 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0076fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c007702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c007704:	f7fe f940 	bl	c005988 <HAL_GetTick>
 c007708:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00770a:	e00f      	b.n	c00772c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00770c:	f7fe f93c 	bl	c005988 <HAL_GetTick>
 c007710:	4602      	mov	r2, r0
 c007712:	693b      	ldr	r3, [r7, #16]
 c007714:	1ad3      	subs	r3, r2, r3
 c007716:	2b02      	cmp	r3, #2
 c007718:	d908      	bls.n	c00772c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00771a:	4b3b      	ldr	r3, [pc, #236]	@ (c007808 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00771c:	681b      	ldr	r3, [r3, #0]
 c00771e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c007722:	2b00      	cmp	r3, #0
 c007724:	d109      	bne.n	c00773a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c007726:	2303      	movs	r3, #3
 c007728:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c00772a:	e006      	b.n	c00773a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00772c:	4b36      	ldr	r3, [pc, #216]	@ (c007808 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00772e:	681b      	ldr	r3, [r3, #0]
 c007730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c007734:	2b00      	cmp	r3, #0
 c007736:	d0e9      	beq.n	c00770c <HAL_RCCEx_PeriphCLKConfig+0x188>
 c007738:	e000      	b.n	c00773c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c00773a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c00773c:	7ffb      	ldrb	r3, [r7, #31]
 c00773e:	2b00      	cmp	r3, #0
 c007740:	d164      	bne.n	c00780c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c007742:	4b30      	ldr	r3, [pc, #192]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c007748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c00774c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c00774e:	69bb      	ldr	r3, [r7, #24]
 c007750:	2b00      	cmp	r3, #0
 c007752:	d01f      	beq.n	c007794 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c007754:	687b      	ldr	r3, [r7, #4]
 c007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c00775a:	69ba      	ldr	r2, [r7, #24]
 c00775c:	429a      	cmp	r2, r3
 c00775e:	d019      	beq.n	c007794 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c007760:	4b28      	ldr	r3, [pc, #160]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c007766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 c00776a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c00776c:	4b25      	ldr	r3, [pc, #148]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c007772:	4a24      	ldr	r2, [pc, #144]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c007778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c00777c:	4b21      	ldr	r3, [pc, #132]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c007782:	4a20      	ldr	r2, [pc, #128]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c007788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c00778c:	4a1d      	ldr	r2, [pc, #116]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00778e:	69bb      	ldr	r3, [r7, #24]
 c007790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c007794:	69bb      	ldr	r3, [r7, #24]
 c007796:	f003 0301 	and.w	r3, r3, #1
 c00779a:	2b00      	cmp	r3, #0
 c00779c:	d01f      	beq.n	c0077de <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00779e:	f7fe f8f3 	bl	c005988 <HAL_GetTick>
 c0077a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0077a4:	e012      	b.n	c0077cc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0077a6:	f7fe f8ef 	bl	c005988 <HAL_GetTick>
 c0077aa:	4602      	mov	r2, r0
 c0077ac:	693b      	ldr	r3, [r7, #16]
 c0077ae:	1ad3      	subs	r3, r2, r3
 c0077b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 c0077b4:	4293      	cmp	r3, r2
 c0077b6:	d909      	bls.n	c0077cc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0077b8:	4b12      	ldr	r3, [pc, #72]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c0077be:	f003 0302 	and.w	r3, r3, #2
 c0077c2:	2b00      	cmp	r3, #0
 c0077c4:	d10a      	bne.n	c0077dc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c0077c6:	2303      	movs	r3, #3
 c0077c8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c0077ca:	e007      	b.n	c0077dc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0077cc:	4b0d      	ldr	r3, [pc, #52]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0077ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c0077d2:	f003 0302 	and.w	r3, r3, #2
 c0077d6:	2b00      	cmp	r3, #0
 c0077d8:	d0e5      	beq.n	c0077a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 c0077da:	e000      	b.n	c0077de <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c0077dc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c0077de:	7ffb      	ldrb	r3, [r7, #31]
 c0077e0:	2b00      	cmp	r3, #0
 c0077e2:	d10c      	bne.n	c0077fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c0077e4:	4b07      	ldr	r3, [pc, #28]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c0077ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 c0077ee:	687b      	ldr	r3, [r7, #4]
 c0077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c0077f4:	4903      	ldr	r1, [pc, #12]	@ (c007804 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0077f6:	4313      	orrs	r3, r2
 c0077f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 c0077fc:	e008      	b.n	c007810 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c0077fe:	7ffb      	ldrb	r3, [r7, #31]
 c007800:	77bb      	strb	r3, [r7, #30]
 c007802:	e005      	b.n	c007810 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c007804:	50021000 	.word	0x50021000
 c007808:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00780c:	7ffb      	ldrb	r3, [r7, #31]
 c00780e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c007810:	7dfb      	ldrb	r3, [r7, #23]
 c007812:	2b01      	cmp	r3, #1
 c007814:	d105      	bne.n	c007822 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c007816:	4b9c      	ldr	r3, [pc, #624]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c00781a:	4a9b      	ldr	r2, [pc, #620]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00781c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c007820:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c007822:	687b      	ldr	r3, [r7, #4]
 c007824:	681b      	ldr	r3, [r3, #0]
 c007826:	f003 0301 	and.w	r3, r3, #1
 c00782a:	2b00      	cmp	r3, #0
 c00782c:	d00a      	beq.n	c007844 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c00782e:	4b96      	ldr	r3, [pc, #600]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007834:	f023 0203 	bic.w	r2, r3, #3
 c007838:	687b      	ldr	r3, [r7, #4]
 c00783a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00783c:	4992      	ldr	r1, [pc, #584]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00783e:	4313      	orrs	r3, r2
 c007840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c007844:	687b      	ldr	r3, [r7, #4]
 c007846:	681b      	ldr	r3, [r3, #0]
 c007848:	f003 0302 	and.w	r3, r3, #2
 c00784c:	2b00      	cmp	r3, #0
 c00784e:	d00a      	beq.n	c007866 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c007850:	4b8d      	ldr	r3, [pc, #564]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007856:	f023 020c 	bic.w	r2, r3, #12
 c00785a:	687b      	ldr	r3, [r7, #4]
 c00785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00785e:	498a      	ldr	r1, [pc, #552]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007860:	4313      	orrs	r3, r2
 c007862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c007866:	687b      	ldr	r3, [r7, #4]
 c007868:	681b      	ldr	r3, [r3, #0]
 c00786a:	f003 0304 	and.w	r3, r3, #4
 c00786e:	2b00      	cmp	r3, #0
 c007870:	d00a      	beq.n	c007888 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c007872:	4b85      	ldr	r3, [pc, #532]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007878:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 c00787c:	687b      	ldr	r3, [r7, #4]
 c00787e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c007880:	4981      	ldr	r1, [pc, #516]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007882:	4313      	orrs	r3, r2
 c007884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c007888:	687b      	ldr	r3, [r7, #4]
 c00788a:	681b      	ldr	r3, [r3, #0]
 c00788c:	f003 0308 	and.w	r3, r3, #8
 c007890:	2b00      	cmp	r3, #0
 c007892:	d00a      	beq.n	c0078aa <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c007894:	4b7c      	ldr	r3, [pc, #496]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00789a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 c00789e:	687b      	ldr	r3, [r7, #4]
 c0078a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c0078a2:	4979      	ldr	r1, [pc, #484]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078a4:	4313      	orrs	r3, r2
 c0078a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c0078aa:	687b      	ldr	r3, [r7, #4]
 c0078ac:	681b      	ldr	r3, [r3, #0]
 c0078ae:	f003 0310 	and.w	r3, r3, #16
 c0078b2:	2b00      	cmp	r3, #0
 c0078b4:	d00a      	beq.n	c0078cc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c0078b6:	4b74      	ldr	r3, [pc, #464]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0078bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 c0078c0:	687b      	ldr	r3, [r7, #4]
 c0078c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c0078c4:	4970      	ldr	r1, [pc, #448]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078c6:	4313      	orrs	r3, r2
 c0078c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c0078cc:	687b      	ldr	r3, [r7, #4]
 c0078ce:	681b      	ldr	r3, [r3, #0]
 c0078d0:	f003 0320 	and.w	r3, r3, #32
 c0078d4:	2b00      	cmp	r3, #0
 c0078d6:	d00a      	beq.n	c0078ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c0078d8:	4b6b      	ldr	r3, [pc, #428]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0078de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 c0078e2:	687b      	ldr	r3, [r7, #4]
 c0078e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c0078e6:	4968      	ldr	r1, [pc, #416]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078e8:	4313      	orrs	r3, r2
 c0078ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c0078ee:	687b      	ldr	r3, [r7, #4]
 c0078f0:	681b      	ldr	r3, [r3, #0]
 c0078f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c0078f6:	2b00      	cmp	r3, #0
 c0078f8:	d00a      	beq.n	c007910 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c0078fa:	4b63      	ldr	r3, [pc, #396]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 c007904:	687b      	ldr	r3, [r7, #4]
 c007906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c007908:	495f      	ldr	r1, [pc, #380]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00790a:	4313      	orrs	r3, r2
 c00790c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c007910:	687b      	ldr	r3, [r7, #4]
 c007912:	681b      	ldr	r3, [r3, #0]
 c007914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c007918:	2b00      	cmp	r3, #0
 c00791a:	d00a      	beq.n	c007932 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c00791c:	4b5a      	ldr	r3, [pc, #360]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c007926:	687b      	ldr	r3, [r7, #4]
 c007928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 c00792a:	4957      	ldr	r1, [pc, #348]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00792c:	4313      	orrs	r3, r2
 c00792e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c007932:	687b      	ldr	r3, [r7, #4]
 c007934:	681b      	ldr	r3, [r3, #0]
 c007936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 c00793a:	2b00      	cmp	r3, #0
 c00793c:	d00a      	beq.n	c007954 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c00793e:	4b52      	ldr	r3, [pc, #328]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007944:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 c007948:	687b      	ldr	r3, [r7, #4]
 c00794a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c00794c:	494e      	ldr	r1, [pc, #312]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00794e:	4313      	orrs	r3, r2
 c007950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c007954:	687b      	ldr	r3, [r7, #4]
 c007956:	681b      	ldr	r3, [r3, #0]
 c007958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c00795c:	2b00      	cmp	r3, #0
 c00795e:	d031      	beq.n	c0079c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c007960:	687b      	ldr	r3, [r7, #4]
 c007962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 c007964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c007968:	d00e      	beq.n	c007988 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c00796a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c00796e:	d814      	bhi.n	c00799a <HAL_RCCEx_PeriphCLKConfig+0x416>
 c007970:	2b00      	cmp	r3, #0
 c007972:	d015      	beq.n	c0079a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c007974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c007978:	d10f      	bne.n	c00799a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00797a:	4b43      	ldr	r3, [pc, #268]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00797c:	68db      	ldr	r3, [r3, #12]
 c00797e:	4a42      	ldr	r2, [pc, #264]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007980:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c007984:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c007986:	e00c      	b.n	c0079a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c007988:	687b      	ldr	r3, [r7, #4]
 c00798a:	3304      	adds	r3, #4
 c00798c:	2100      	movs	r1, #0
 c00798e:	4618      	mov	r0, r3
 c007990:	f000 f97c 	bl	c007c8c <RCCEx_PLLSAI1_Config>
 c007994:	4603      	mov	r3, r0
 c007996:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c007998:	e003      	b.n	c0079a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c00799a:	2301      	movs	r3, #1
 c00799c:	77fb      	strb	r3, [r7, #31]
        break;
 c00799e:	e000      	b.n	c0079a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c0079a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0079a2:	7ffb      	ldrb	r3, [r7, #31]
 c0079a4:	2b00      	cmp	r3, #0
 c0079a6:	d10b      	bne.n	c0079c0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c0079a8:	4b37      	ldr	r3, [pc, #220]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0079ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 c0079b2:	687b      	ldr	r3, [r7, #4]
 c0079b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 c0079b6:	4934      	ldr	r1, [pc, #208]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079b8:	4313      	orrs	r3, r2
 c0079ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 c0079be:	e001      	b.n	c0079c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0079c0:	7ffb      	ldrb	r3, [r7, #31]
 c0079c2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c0079c4:	687b      	ldr	r3, [r7, #4]
 c0079c6:	681b      	ldr	r3, [r3, #0]
 c0079c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c0079cc:	2b00      	cmp	r3, #0
 c0079ce:	d00a      	beq.n	c0079e6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c0079d0:	4b2d      	ldr	r3, [pc, #180]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0079d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 c0079da:	687b      	ldr	r3, [r7, #4]
 c0079dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c0079de:	492a      	ldr	r1, [pc, #168]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079e0:	4313      	orrs	r3, r2
 c0079e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c0079e6:	687b      	ldr	r3, [r7, #4]
 c0079e8:	681b      	ldr	r3, [r3, #0]
 c0079ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c0079ee:	2b00      	cmp	r3, #0
 c0079f0:	d00a      	beq.n	c007a08 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c0079f2:	4b25      	ldr	r3, [pc, #148]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0079f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 c0079fc:	687b      	ldr	r3, [r7, #4]
 c0079fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c007a00:	4921      	ldr	r1, [pc, #132]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a02:	4313      	orrs	r3, r2
 c007a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c007a08:	687b      	ldr	r3, [r7, #4]
 c007a0a:	681b      	ldr	r3, [r3, #0]
 c007a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c007a10:	2b00      	cmp	r3, #0
 c007a12:	d00a      	beq.n	c007a2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c007a14:	4b1c      	ldr	r3, [pc, #112]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007a1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 c007a1e:	687b      	ldr	r3, [r7, #4]
 c007a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c007a22:	4919      	ldr	r1, [pc, #100]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a24:	4313      	orrs	r3, r2
 c007a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c007a2a:	687b      	ldr	r3, [r7, #4]
 c007a2c:	681b      	ldr	r3, [r3, #0]
 c007a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 c007a32:	2b00      	cmp	r3, #0
 c007a34:	d00a      	beq.n	c007a4c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c007a36:	4b14      	ldr	r3, [pc, #80]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c007a3c:	f023 0203 	bic.w	r2, r3, #3
 c007a40:	687b      	ldr	r3, [r7, #4]
 c007a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c007a44:	4910      	ldr	r1, [pc, #64]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a46:	4313      	orrs	r3, r2
 c007a48:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c007a4c:	687b      	ldr	r3, [r7, #4]
 c007a4e:	681b      	ldr	r3, [r3, #0]
 c007a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c007a54:	2b00      	cmp	r3, #0
 c007a56:	d02b      	beq.n	c007ab0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c007a58:	4b0b      	ldr	r3, [pc, #44]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007a5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 c007a62:	687b      	ldr	r3, [r7, #4]
 c007a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c007a66:	4908      	ldr	r1, [pc, #32]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a68:	4313      	orrs	r3, r2
 c007a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c007a6e:	687b      	ldr	r3, [r7, #4]
 c007a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c007a72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c007a76:	d109      	bne.n	c007a8c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007a78:	4b03      	ldr	r3, [pc, #12]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a7a:	68db      	ldr	r3, [r3, #12]
 c007a7c:	4a02      	ldr	r2, [pc, #8]	@ (c007a88 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c007a82:	60d3      	str	r3, [r2, #12]
 c007a84:	e014      	b.n	c007ab0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c007a86:	bf00      	nop
 c007a88:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c007a8c:	687b      	ldr	r3, [r7, #4]
 c007a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c007a90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c007a94:	d10c      	bne.n	c007ab0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c007a96:	687b      	ldr	r3, [r7, #4]
 c007a98:	3304      	adds	r3, #4
 c007a9a:	2101      	movs	r1, #1
 c007a9c:	4618      	mov	r0, r3
 c007a9e:	f000 f8f5 	bl	c007c8c <RCCEx_PLLSAI1_Config>
 c007aa2:	4603      	mov	r3, r0
 c007aa4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c007aa6:	7ffb      	ldrb	r3, [r7, #31]
 c007aa8:	2b00      	cmp	r3, #0
 c007aaa:	d001      	beq.n	c007ab0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c007aac:	7ffb      	ldrb	r3, [r7, #31]
 c007aae:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c007ab0:	687b      	ldr	r3, [r7, #4]
 c007ab2:	681b      	ldr	r3, [r3, #0]
 c007ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 c007ab8:	2b00      	cmp	r3, #0
 c007aba:	d04a      	beq.n	c007b52 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c007abc:	687b      	ldr	r3, [r7, #4]
 c007abe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c007ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c007ac4:	d108      	bne.n	c007ad8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c007ac6:	4b70      	ldr	r3, [pc, #448]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c007acc:	4a6e      	ldr	r2, [pc, #440]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007ace:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c007ad2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 c007ad6:	e012      	b.n	c007afe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c007ad8:	4b6b      	ldr	r3, [pc, #428]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007ade:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 c007ae2:	687b      	ldr	r3, [r7, #4]
 c007ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c007ae6:	4968      	ldr	r1, [pc, #416]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007ae8:	4313      	orrs	r3, r2
 c007aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 c007aee:	4b66      	ldr	r3, [pc, #408]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c007af4:	4a64      	ldr	r2, [pc, #400]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 c007afa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c007afe:	687b      	ldr	r3, [r7, #4]
 c007b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c007b02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c007b06:	d10d      	bne.n	c007b24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c007b08:	687b      	ldr	r3, [r7, #4]
 c007b0a:	3304      	adds	r3, #4
 c007b0c:	2101      	movs	r1, #1
 c007b0e:	4618      	mov	r0, r3
 c007b10:	f000 f8bc 	bl	c007c8c <RCCEx_PLLSAI1_Config>
 c007b14:	4603      	mov	r3, r0
 c007b16:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007b18:	7ffb      	ldrb	r3, [r7, #31]
 c007b1a:	2b00      	cmp	r3, #0
 c007b1c:	d019      	beq.n	c007b52 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c007b1e:	7ffb      	ldrb	r3, [r7, #31]
 c007b20:	77bb      	strb	r3, [r7, #30]
 c007b22:	e016      	b.n	c007b52 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c007b24:	687b      	ldr	r3, [r7, #4]
 c007b26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c007b28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c007b2c:	d106      	bne.n	c007b3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007b2e:	4b56      	ldr	r3, [pc, #344]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b30:	68db      	ldr	r3, [r3, #12]
 c007b32:	4a55      	ldr	r2, [pc, #340]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c007b38:	60d3      	str	r3, [r2, #12]
 c007b3a:	e00a      	b.n	c007b52 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c007b3c:	687b      	ldr	r3, [r7, #4]
 c007b3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c007b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c007b44:	d105      	bne.n	c007b52 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c007b46:	4b50      	ldr	r3, [pc, #320]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b48:	68db      	ldr	r3, [r3, #12]
 c007b4a:	4a4f      	ldr	r2, [pc, #316]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c007b50:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c007b52:	687b      	ldr	r3, [r7, #4]
 c007b54:	681b      	ldr	r3, [r3, #0]
 c007b56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c007b5a:	2b00      	cmp	r3, #0
 c007b5c:	d028      	beq.n	c007bb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c007b5e:	4b4a      	ldr	r3, [pc, #296]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007b64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 c007b68:	687b      	ldr	r3, [r7, #4]
 c007b6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c007b6c:	4946      	ldr	r1, [pc, #280]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b6e:	4313      	orrs	r3, r2
 c007b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c007b74:	687b      	ldr	r3, [r7, #4]
 c007b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c007b78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c007b7c:	d106      	bne.n	c007b8c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007b7e:	4b42      	ldr	r3, [pc, #264]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b80:	68db      	ldr	r3, [r3, #12]
 c007b82:	4a41      	ldr	r2, [pc, #260]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c007b88:	60d3      	str	r3, [r2, #12]
 c007b8a:	e011      	b.n	c007bb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c007b8c:	687b      	ldr	r3, [r7, #4]
 c007b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c007b90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c007b94:	d10c      	bne.n	c007bb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c007b96:	687b      	ldr	r3, [r7, #4]
 c007b98:	3304      	adds	r3, #4
 c007b9a:	2101      	movs	r1, #1
 c007b9c:	4618      	mov	r0, r3
 c007b9e:	f000 f875 	bl	c007c8c <RCCEx_PLLSAI1_Config>
 c007ba2:	4603      	mov	r3, r0
 c007ba4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007ba6:	7ffb      	ldrb	r3, [r7, #31]
 c007ba8:	2b00      	cmp	r3, #0
 c007baa:	d001      	beq.n	c007bb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c007bac:	7ffb      	ldrb	r3, [r7, #31]
 c007bae:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c007bb0:	687b      	ldr	r3, [r7, #4]
 c007bb2:	681b      	ldr	r3, [r3, #0]
 c007bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c007bb8:	2b00      	cmp	r3, #0
 c007bba:	d01e      	beq.n	c007bfa <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c007bbc:	4b32      	ldr	r3, [pc, #200]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007bc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 c007bc6:	687b      	ldr	r3, [r7, #4]
 c007bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c007bcc:	492e      	ldr	r1, [pc, #184]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007bce:	4313      	orrs	r3, r2
 c007bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c007bd4:	687b      	ldr	r3, [r7, #4]
 c007bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c007bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c007bde:	d10c      	bne.n	c007bfa <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c007be0:	687b      	ldr	r3, [r7, #4]
 c007be2:	3304      	adds	r3, #4
 c007be4:	2102      	movs	r1, #2
 c007be6:	4618      	mov	r0, r3
 c007be8:	f000 f850 	bl	c007c8c <RCCEx_PLLSAI1_Config>
 c007bec:	4603      	mov	r3, r0
 c007bee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007bf0:	7ffb      	ldrb	r3, [r7, #31]
 c007bf2:	2b00      	cmp	r3, #0
 c007bf4:	d001      	beq.n	c007bfa <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c007bf6:	7ffb      	ldrb	r3, [r7, #31]
 c007bf8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c007bfa:	687b      	ldr	r3, [r7, #4]
 c007bfc:	681b      	ldr	r3, [r3, #0]
 c007bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c007c02:	2b00      	cmp	r3, #0
 c007c04:	d00b      	beq.n	c007c1e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c007c06:	4b20      	ldr	r3, [pc, #128]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c007c0c:	f023 0204 	bic.w	r2, r3, #4
 c007c10:	687b      	ldr	r3, [r7, #4]
 c007c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c007c16:	491c      	ldr	r1, [pc, #112]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c18:	4313      	orrs	r3, r2
 c007c1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c007c1e:	687b      	ldr	r3, [r7, #4]
 c007c20:	681b      	ldr	r3, [r3, #0]
 c007c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c007c26:	2b00      	cmp	r3, #0
 c007c28:	d00b      	beq.n	c007c42 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c007c2a:	4b17      	ldr	r3, [pc, #92]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c007c30:	f023 0218 	bic.w	r2, r3, #24
 c007c34:	687b      	ldr	r3, [r7, #4]
 c007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c007c3a:	4913      	ldr	r1, [pc, #76]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c3c:	4313      	orrs	r3, r2
 c007c3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c007c42:	687b      	ldr	r3, [r7, #4]
 c007c44:	681b      	ldr	r3, [r3, #0]
 c007c46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 c007c4a:	2b00      	cmp	r3, #0
 c007c4c:	d017      	beq.n	c007c7e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c007c4e:	4b0e      	ldr	r3, [pc, #56]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c007c54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c007c58:	687b      	ldr	r3, [r7, #4]
 c007c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c007c5e:	490a      	ldr	r1, [pc, #40]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c60:	4313      	orrs	r3, r2
 c007c62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c007c66:	687b      	ldr	r3, [r7, #4]
 c007c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c007c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c007c70:	d105      	bne.n	c007c7e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007c72:	4b05      	ldr	r3, [pc, #20]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c74:	68db      	ldr	r3, [r3, #12]
 c007c76:	4a04      	ldr	r2, [pc, #16]	@ (c007c88 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c007c7c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c007c7e:	7fbb      	ldrb	r3, [r7, #30]
}
 c007c80:	4618      	mov	r0, r3
 c007c82:	3720      	adds	r7, #32
 c007c84:	46bd      	mov	sp, r7
 c007c86:	bd80      	pop	{r7, pc}
 c007c88:	50021000 	.word	0x50021000

0c007c8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c007c8c:	b580      	push	{r7, lr}
 c007c8e:	b084      	sub	sp, #16
 c007c90:	af00      	add	r7, sp, #0
 c007c92:	6078      	str	r0, [r7, #4]
 c007c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c007c96:	2300      	movs	r3, #0
 c007c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c007c9a:	687b      	ldr	r3, [r7, #4]
 c007c9c:	681b      	ldr	r3, [r3, #0]
 c007c9e:	2b03      	cmp	r3, #3
 c007ca0:	d018      	beq.n	c007cd4 <RCCEx_PLLSAI1_Config+0x48>
 c007ca2:	2b03      	cmp	r3, #3
 c007ca4:	d81f      	bhi.n	c007ce6 <RCCEx_PLLSAI1_Config+0x5a>
 c007ca6:	2b01      	cmp	r3, #1
 c007ca8:	d002      	beq.n	c007cb0 <RCCEx_PLLSAI1_Config+0x24>
 c007caa:	2b02      	cmp	r3, #2
 c007cac:	d009      	beq.n	c007cc2 <RCCEx_PLLSAI1_Config+0x36>
 c007cae:	e01a      	b.n	c007ce6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007cb0:	4b65      	ldr	r3, [pc, #404]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007cb2:	681b      	ldr	r3, [r3, #0]
 c007cb4:	f003 0302 	and.w	r3, r3, #2
 c007cb8:	2b00      	cmp	r3, #0
 c007cba:	d117      	bne.n	c007cec <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c007cbc:	2301      	movs	r3, #1
 c007cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007cc0:	e014      	b.n	c007cec <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c007cc2:	4b61      	ldr	r3, [pc, #388]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007cc4:	681b      	ldr	r3, [r3, #0]
 c007cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c007cca:	2b00      	cmp	r3, #0
 c007ccc:	d110      	bne.n	c007cf0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c007cce:	2301      	movs	r3, #1
 c007cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007cd2:	e00d      	b.n	c007cf0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c007cd4:	4b5c      	ldr	r3, [pc, #368]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007cd6:	681b      	ldr	r3, [r3, #0]
 c007cd8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 c007cdc:	2b00      	cmp	r3, #0
 c007cde:	d109      	bne.n	c007cf4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c007ce0:	2301      	movs	r3, #1
 c007ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007ce4:	e006      	b.n	c007cf4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c007ce6:	2301      	movs	r3, #1
 c007ce8:	73fb      	strb	r3, [r7, #15]
      break;
 c007cea:	e004      	b.n	c007cf6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007cec:	bf00      	nop
 c007cee:	e002      	b.n	c007cf6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007cf0:	bf00      	nop
 c007cf2:	e000      	b.n	c007cf6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007cf4:	bf00      	nop
  }

  if (status == HAL_OK)
 c007cf6:	7bfb      	ldrb	r3, [r7, #15]
 c007cf8:	2b00      	cmp	r3, #0
 c007cfa:	f040 809f 	bne.w	c007e3c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c007cfe:	4b52      	ldr	r3, [pc, #328]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d00:	681b      	ldr	r3, [r3, #0]
 c007d02:	4a51      	ldr	r2, [pc, #324]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d04:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 c007d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c007d0a:	f7fd fe3d 	bl	c005988 <HAL_GetTick>
 c007d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007d10:	e00f      	b.n	c007d32 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c007d12:	f7fd fe39 	bl	c005988 <HAL_GetTick>
 c007d16:	4602      	mov	r2, r0
 c007d18:	68bb      	ldr	r3, [r7, #8]
 c007d1a:	1ad3      	subs	r3, r2, r3
 c007d1c:	2b02      	cmp	r3, #2
 c007d1e:	d908      	bls.n	c007d32 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007d20:	4b49      	ldr	r3, [pc, #292]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d22:	681b      	ldr	r3, [r3, #0]
 c007d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c007d28:	2b00      	cmp	r3, #0
 c007d2a:	d009      	beq.n	c007d40 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c007d2c:	2303      	movs	r3, #3
 c007d2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007d30:	e006      	b.n	c007d40 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007d32:	4b45      	ldr	r3, [pc, #276]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d34:	681b      	ldr	r3, [r3, #0]
 c007d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c007d3a:	2b00      	cmp	r3, #0
 c007d3c:	d1e9      	bne.n	c007d12 <RCCEx_PLLSAI1_Config+0x86>
 c007d3e:	e000      	b.n	c007d42 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c007d40:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c007d42:	7bfb      	ldrb	r3, [r7, #15]
 c007d44:	2b00      	cmp	r3, #0
 c007d46:	d179      	bne.n	c007e3c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c007d48:	683b      	ldr	r3, [r7, #0]
 c007d4a:	2b00      	cmp	r3, #0
 c007d4c:	d116      	bne.n	c007d7c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007d4e:	4b3e      	ldr	r3, [pc, #248]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d50:	691a      	ldr	r2, [r3, #16]
 c007d52:	4b3e      	ldr	r3, [pc, #248]	@ (c007e4c <RCCEx_PLLSAI1_Config+0x1c0>)
 c007d54:	4013      	ands	r3, r2
 c007d56:	687a      	ldr	r2, [r7, #4]
 c007d58:	6892      	ldr	r2, [r2, #8]
 c007d5a:	0211      	lsls	r1, r2, #8
 c007d5c:	687a      	ldr	r2, [r7, #4]
 c007d5e:	68d2      	ldr	r2, [r2, #12]
 c007d60:	06d2      	lsls	r2, r2, #27
 c007d62:	4311      	orrs	r1, r2
 c007d64:	687a      	ldr	r2, [r7, #4]
 c007d66:	6852      	ldr	r2, [r2, #4]
 c007d68:	3a01      	subs	r2, #1
 c007d6a:	0112      	lsls	r2, r2, #4
 c007d6c:	4311      	orrs	r1, r2
 c007d6e:	687a      	ldr	r2, [r7, #4]
 c007d70:	6812      	ldr	r2, [r2, #0]
 c007d72:	430a      	orrs	r2, r1
 c007d74:	4934      	ldr	r1, [pc, #208]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d76:	4313      	orrs	r3, r2
 c007d78:	610b      	str	r3, [r1, #16]
 c007d7a:	e033      	b.n	c007de4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c007d7c:	683b      	ldr	r3, [r7, #0]
 c007d7e:	2b01      	cmp	r3, #1
 c007d80:	d118      	bne.n	c007db4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007d82:	4b31      	ldr	r3, [pc, #196]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d84:	691a      	ldr	r2, [r3, #16]
 c007d86:	4b32      	ldr	r3, [pc, #200]	@ (c007e50 <RCCEx_PLLSAI1_Config+0x1c4>)
 c007d88:	4013      	ands	r3, r2
 c007d8a:	687a      	ldr	r2, [r7, #4]
 c007d8c:	6892      	ldr	r2, [r2, #8]
 c007d8e:	0211      	lsls	r1, r2, #8
 c007d90:	687a      	ldr	r2, [r7, #4]
 c007d92:	6912      	ldr	r2, [r2, #16]
 c007d94:	0852      	lsrs	r2, r2, #1
 c007d96:	3a01      	subs	r2, #1
 c007d98:	0552      	lsls	r2, r2, #21
 c007d9a:	4311      	orrs	r1, r2
 c007d9c:	687a      	ldr	r2, [r7, #4]
 c007d9e:	6852      	ldr	r2, [r2, #4]
 c007da0:	3a01      	subs	r2, #1
 c007da2:	0112      	lsls	r2, r2, #4
 c007da4:	4311      	orrs	r1, r2
 c007da6:	687a      	ldr	r2, [r7, #4]
 c007da8:	6812      	ldr	r2, [r2, #0]
 c007daa:	430a      	orrs	r2, r1
 c007dac:	4926      	ldr	r1, [pc, #152]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007dae:	4313      	orrs	r3, r2
 c007db0:	610b      	str	r3, [r1, #16]
 c007db2:	e017      	b.n	c007de4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007db4:	4b24      	ldr	r3, [pc, #144]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007db6:	691a      	ldr	r2, [r3, #16]
 c007db8:	4b26      	ldr	r3, [pc, #152]	@ (c007e54 <RCCEx_PLLSAI1_Config+0x1c8>)
 c007dba:	4013      	ands	r3, r2
 c007dbc:	687a      	ldr	r2, [r7, #4]
 c007dbe:	6892      	ldr	r2, [r2, #8]
 c007dc0:	0211      	lsls	r1, r2, #8
 c007dc2:	687a      	ldr	r2, [r7, #4]
 c007dc4:	6952      	ldr	r2, [r2, #20]
 c007dc6:	0852      	lsrs	r2, r2, #1
 c007dc8:	3a01      	subs	r2, #1
 c007dca:	0652      	lsls	r2, r2, #25
 c007dcc:	4311      	orrs	r1, r2
 c007dce:	687a      	ldr	r2, [r7, #4]
 c007dd0:	6852      	ldr	r2, [r2, #4]
 c007dd2:	3a01      	subs	r2, #1
 c007dd4:	0112      	lsls	r2, r2, #4
 c007dd6:	4311      	orrs	r1, r2
 c007dd8:	687a      	ldr	r2, [r7, #4]
 c007dda:	6812      	ldr	r2, [r2, #0]
 c007ddc:	430a      	orrs	r2, r1
 c007dde:	491a      	ldr	r1, [pc, #104]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007de0:	4313      	orrs	r3, r2
 c007de2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c007de4:	4b18      	ldr	r3, [pc, #96]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007de6:	681b      	ldr	r3, [r3, #0]
 c007de8:	4a17      	ldr	r2, [pc, #92]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007dea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c007dee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c007df0:	f7fd fdca 	bl	c005988 <HAL_GetTick>
 c007df4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007df6:	e00f      	b.n	c007e18 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c007df8:	f7fd fdc6 	bl	c005988 <HAL_GetTick>
 c007dfc:	4602      	mov	r2, r0
 c007dfe:	68bb      	ldr	r3, [r7, #8]
 c007e00:	1ad3      	subs	r3, r2, r3
 c007e02:	2b02      	cmp	r3, #2
 c007e04:	d908      	bls.n	c007e18 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007e06:	4b10      	ldr	r3, [pc, #64]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e08:	681b      	ldr	r3, [r3, #0]
 c007e0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c007e0e:	2b00      	cmp	r3, #0
 c007e10:	d109      	bne.n	c007e26 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c007e12:	2303      	movs	r3, #3
 c007e14:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c007e16:	e006      	b.n	c007e26 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007e18:	4b0b      	ldr	r3, [pc, #44]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e1a:	681b      	ldr	r3, [r3, #0]
 c007e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c007e20:	2b00      	cmp	r3, #0
 c007e22:	d0e9      	beq.n	c007df8 <RCCEx_PLLSAI1_Config+0x16c>
 c007e24:	e000      	b.n	c007e28 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c007e26:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c007e28:	7bfb      	ldrb	r3, [r7, #15]
 c007e2a:	2b00      	cmp	r3, #0
 c007e2c:	d106      	bne.n	c007e3c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c007e2e:	4b06      	ldr	r3, [pc, #24]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e30:	691a      	ldr	r2, [r3, #16]
 c007e32:	687b      	ldr	r3, [r7, #4]
 c007e34:	699b      	ldr	r3, [r3, #24]
 c007e36:	4904      	ldr	r1, [pc, #16]	@ (c007e48 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e38:	4313      	orrs	r3, r2
 c007e3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 c007e3e:	4618      	mov	r0, r3
 c007e40:	3710      	adds	r7, #16
 c007e42:	46bd      	mov	sp, r7
 c007e44:	bd80      	pop	{r7, pc}
 c007e46:	bf00      	nop
 c007e48:	50021000 	.word	0x50021000
 c007e4c:	07ff800c 	.word	0x07ff800c
 c007e50:	ff9f800c 	.word	0xff9f800c
 c007e54:	f9ff800c 	.word	0xf9ff800c

0c007e58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c007e58:	b580      	push	{r7, lr}
 c007e5a:	b084      	sub	sp, #16
 c007e5c:	af00      	add	r7, sp, #0
 c007e5e:	6078      	str	r0, [r7, #4]
 c007e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c007e62:	2300      	movs	r3, #0
 c007e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c007e66:	687b      	ldr	r3, [r7, #4]
 c007e68:	681b      	ldr	r3, [r3, #0]
 c007e6a:	2b03      	cmp	r3, #3
 c007e6c:	d018      	beq.n	c007ea0 <RCCEx_PLLSAI2_Config+0x48>
 c007e6e:	2b03      	cmp	r3, #3
 c007e70:	d81f      	bhi.n	c007eb2 <RCCEx_PLLSAI2_Config+0x5a>
 c007e72:	2b01      	cmp	r3, #1
 c007e74:	d002      	beq.n	c007e7c <RCCEx_PLLSAI2_Config+0x24>
 c007e76:	2b02      	cmp	r3, #2
 c007e78:	d009      	beq.n	c007e8e <RCCEx_PLLSAI2_Config+0x36>
 c007e7a:	e01a      	b.n	c007eb2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007e7c:	4b4a      	ldr	r3, [pc, #296]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007e7e:	681b      	ldr	r3, [r3, #0]
 c007e80:	f003 0302 	and.w	r3, r3, #2
 c007e84:	2b00      	cmp	r3, #0
 c007e86:	d117      	bne.n	c007eb8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c007e88:	2301      	movs	r3, #1
 c007e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007e8c:	e014      	b.n	c007eb8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c007e8e:	4b46      	ldr	r3, [pc, #280]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007e90:	681b      	ldr	r3, [r3, #0]
 c007e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c007e96:	2b00      	cmp	r3, #0
 c007e98:	d110      	bne.n	c007ebc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c007e9a:	2301      	movs	r3, #1
 c007e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007e9e:	e00d      	b.n	c007ebc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c007ea0:	4b41      	ldr	r3, [pc, #260]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007ea2:	681b      	ldr	r3, [r3, #0]
 c007ea4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 c007ea8:	2b00      	cmp	r3, #0
 c007eaa:	d109      	bne.n	c007ec0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c007eac:	2301      	movs	r3, #1
 c007eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007eb0:	e006      	b.n	c007ec0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c007eb2:	2301      	movs	r3, #1
 c007eb4:	73fb      	strb	r3, [r7, #15]
      break;
 c007eb6:	e004      	b.n	c007ec2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007eb8:	bf00      	nop
 c007eba:	e002      	b.n	c007ec2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007ebc:	bf00      	nop
 c007ebe:	e000      	b.n	c007ec2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007ec0:	bf00      	nop
  }

  if (status == HAL_OK)
 c007ec2:	7bfb      	ldrb	r3, [r7, #15]
 c007ec4:	2b00      	cmp	r3, #0
 c007ec6:	d169      	bne.n	c007f9c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c007ec8:	4b37      	ldr	r3, [pc, #220]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007eca:	681b      	ldr	r3, [r3, #0]
 c007ecc:	4a36      	ldr	r2, [pc, #216]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c007ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c007ed4:	f7fd fd58 	bl	c005988 <HAL_GetTick>
 c007ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007eda:	e00f      	b.n	c007efc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c007edc:	f7fd fd54 	bl	c005988 <HAL_GetTick>
 c007ee0:	4602      	mov	r2, r0
 c007ee2:	68bb      	ldr	r3, [r7, #8]
 c007ee4:	1ad3      	subs	r3, r2, r3
 c007ee6:	2b02      	cmp	r3, #2
 c007ee8:	d908      	bls.n	c007efc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007eea:	4b2f      	ldr	r3, [pc, #188]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007eec:	681b      	ldr	r3, [r3, #0]
 c007eee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c007ef2:	2b00      	cmp	r3, #0
 c007ef4:	d009      	beq.n	c007f0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c007ef6:	2303      	movs	r3, #3
 c007ef8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007efa:	e006      	b.n	c007f0a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007efc:	4b2a      	ldr	r3, [pc, #168]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007efe:	681b      	ldr	r3, [r3, #0]
 c007f00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c007f04:	2b00      	cmp	r3, #0
 c007f06:	d1e9      	bne.n	c007edc <RCCEx_PLLSAI2_Config+0x84>
 c007f08:	e000      	b.n	c007f0c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c007f0a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c007f0c:	7bfb      	ldrb	r3, [r7, #15]
 c007f0e:	2b00      	cmp	r3, #0
 c007f10:	d144      	bne.n	c007f9c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c007f12:	683b      	ldr	r3, [r7, #0]
 c007f14:	2b00      	cmp	r3, #0
 c007f16:	d115      	bne.n	c007f44 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c007f18:	4b23      	ldr	r3, [pc, #140]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007f1a:	695a      	ldr	r2, [r3, #20]
 c007f1c:	4b23      	ldr	r3, [pc, #140]	@ (c007fac <RCCEx_PLLSAI2_Config+0x154>)
 c007f1e:	4013      	ands	r3, r2
 c007f20:	687a      	ldr	r2, [r7, #4]
 c007f22:	6892      	ldr	r2, [r2, #8]
 c007f24:	0211      	lsls	r1, r2, #8
 c007f26:	687a      	ldr	r2, [r7, #4]
 c007f28:	68d2      	ldr	r2, [r2, #12]
 c007f2a:	06d2      	lsls	r2, r2, #27
 c007f2c:	4311      	orrs	r1, r2
 c007f2e:	687a      	ldr	r2, [r7, #4]
 c007f30:	6852      	ldr	r2, [r2, #4]
 c007f32:	3a01      	subs	r2, #1
 c007f34:	0112      	lsls	r2, r2, #4
 c007f36:	4311      	orrs	r1, r2
 c007f38:	687a      	ldr	r2, [r7, #4]
 c007f3a:	6812      	ldr	r2, [r2, #0]
 c007f3c:	430a      	orrs	r2, r1
 c007f3e:	491a      	ldr	r1, [pc, #104]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007f40:	4313      	orrs	r3, r2
 c007f42:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c007f44:	4b18      	ldr	r3, [pc, #96]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007f46:	681b      	ldr	r3, [r3, #0]
 c007f48:	4a17      	ldr	r2, [pc, #92]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c007f4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c007f50:	f7fd fd1a 	bl	c005988 <HAL_GetTick>
 c007f54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007f56:	e00f      	b.n	c007f78 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c007f58:	f7fd fd16 	bl	c005988 <HAL_GetTick>
 c007f5c:	4602      	mov	r2, r0
 c007f5e:	68bb      	ldr	r3, [r7, #8]
 c007f60:	1ad3      	subs	r3, r2, r3
 c007f62:	2b02      	cmp	r3, #2
 c007f64:	d908      	bls.n	c007f78 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007f66:	4b10      	ldr	r3, [pc, #64]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007f68:	681b      	ldr	r3, [r3, #0]
 c007f6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c007f6e:	2b00      	cmp	r3, #0
 c007f70:	d109      	bne.n	c007f86 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c007f72:	2303      	movs	r3, #3
 c007f74:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c007f76:	e006      	b.n	c007f86 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007f78:	4b0b      	ldr	r3, [pc, #44]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007f7a:	681b      	ldr	r3, [r3, #0]
 c007f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c007f80:	2b00      	cmp	r3, #0
 c007f82:	d0e9      	beq.n	c007f58 <RCCEx_PLLSAI2_Config+0x100>
 c007f84:	e000      	b.n	c007f88 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c007f86:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c007f88:	7bfb      	ldrb	r3, [r7, #15]
 c007f8a:	2b00      	cmp	r3, #0
 c007f8c:	d106      	bne.n	c007f9c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c007f8e:	4b06      	ldr	r3, [pc, #24]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007f90:	695a      	ldr	r2, [r3, #20]
 c007f92:	687b      	ldr	r3, [r7, #4]
 c007f94:	691b      	ldr	r3, [r3, #16]
 c007f96:	4904      	ldr	r1, [pc, #16]	@ (c007fa8 <RCCEx_PLLSAI2_Config+0x150>)
 c007f98:	4313      	orrs	r3, r2
 c007f9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c007f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 c007f9e:	4618      	mov	r0, r3
 c007fa0:	3710      	adds	r7, #16
 c007fa2:	46bd      	mov	sp, r7
 c007fa4:	bd80      	pop	{r7, pc}
 c007fa6:	bf00      	nop
 c007fa8:	50021000 	.word	0x50021000
 c007fac:	07ff800c 	.word	0x07ff800c

0c007fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c007fb0:	b580      	push	{r7, lr}
 c007fb2:	b082      	sub	sp, #8
 c007fb4:	af00      	add	r7, sp, #0
 c007fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c007fb8:	687b      	ldr	r3, [r7, #4]
 c007fba:	2b00      	cmp	r3, #0
 c007fbc:	d101      	bne.n	c007fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c007fbe:	2301      	movs	r3, #1
 c007fc0:	e042      	b.n	c008048 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c007fc2:	687b      	ldr	r3, [r7, #4]
 c007fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c007fc8:	2b00      	cmp	r3, #0
 c007fca:	d106      	bne.n	c007fda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c007fcc:	687b      	ldr	r3, [r7, #4]
 c007fce:	2200      	movs	r2, #0
 c007fd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c007fd4:	6878      	ldr	r0, [r7, #4]
 c007fd6:	f7fd fbbb 	bl	c005750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c007fda:	687b      	ldr	r3, [r7, #4]
 c007fdc:	2224      	movs	r2, #36	@ 0x24
 c007fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 c007fe2:	687b      	ldr	r3, [r7, #4]
 c007fe4:	681b      	ldr	r3, [r3, #0]
 c007fe6:	681a      	ldr	r2, [r3, #0]
 c007fe8:	687b      	ldr	r3, [r7, #4]
 c007fea:	681b      	ldr	r3, [r3, #0]
 c007fec:	f022 0201 	bic.w	r2, r2, #1
 c007ff0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c007ff2:	6878      	ldr	r0, [r7, #4]
 c007ff4:	f000 f996 	bl	c008324 <UART_SetConfig>
 c007ff8:	4603      	mov	r3, r0
 c007ffa:	2b01      	cmp	r3, #1
 c007ffc:	d101      	bne.n	c008002 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c007ffe:	2301      	movs	r3, #1
 c008000:	e022      	b.n	c008048 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c008002:	687b      	ldr	r3, [r7, #4]
 c008004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c008006:	2b00      	cmp	r3, #0
 c008008:	d002      	beq.n	c008010 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c00800a:	6878      	ldr	r0, [r7, #4]
 c00800c:	f000 fc88 	bl	c008920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c008010:	687b      	ldr	r3, [r7, #4]
 c008012:	681b      	ldr	r3, [r3, #0]
 c008014:	685a      	ldr	r2, [r3, #4]
 c008016:	687b      	ldr	r3, [r7, #4]
 c008018:	681b      	ldr	r3, [r3, #0]
 c00801a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 c00801e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c008020:	687b      	ldr	r3, [r7, #4]
 c008022:	681b      	ldr	r3, [r3, #0]
 c008024:	689a      	ldr	r2, [r3, #8]
 c008026:	687b      	ldr	r3, [r7, #4]
 c008028:	681b      	ldr	r3, [r3, #0]
 c00802a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 c00802e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c008030:	687b      	ldr	r3, [r7, #4]
 c008032:	681b      	ldr	r3, [r3, #0]
 c008034:	681a      	ldr	r2, [r3, #0]
 c008036:	687b      	ldr	r3, [r7, #4]
 c008038:	681b      	ldr	r3, [r3, #0]
 c00803a:	f042 0201 	orr.w	r2, r2, #1
 c00803e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c008040:	6878      	ldr	r0, [r7, #4]
 c008042:	f000 fd0f 	bl	c008a64 <UART_CheckIdleState>
 c008046:	4603      	mov	r3, r0
}
 c008048:	4618      	mov	r0, r3
 c00804a:	3708      	adds	r7, #8
 c00804c:	46bd      	mov	sp, r7
 c00804e:	bd80      	pop	{r7, pc}

0c008050 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c008050:	b580      	push	{r7, lr}
 c008052:	b08a      	sub	sp, #40	@ 0x28
 c008054:	af02      	add	r7, sp, #8
 c008056:	60f8      	str	r0, [r7, #12]
 c008058:	60b9      	str	r1, [r7, #8]
 c00805a:	603b      	str	r3, [r7, #0]
 c00805c:	4613      	mov	r3, r2
 c00805e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c008060:	68fb      	ldr	r3, [r7, #12]
 c008062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c008066:	2b20      	cmp	r3, #32
 c008068:	f040 8083 	bne.w	c008172 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 c00806c:	68bb      	ldr	r3, [r7, #8]
 c00806e:	2b00      	cmp	r3, #0
 c008070:	d002      	beq.n	c008078 <HAL_UART_Transmit+0x28>
 c008072:	88fb      	ldrh	r3, [r7, #6]
 c008074:	2b00      	cmp	r3, #0
 c008076:	d101      	bne.n	c00807c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 c008078:	2301      	movs	r3, #1
 c00807a:	e07b      	b.n	c008174 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 c00807c:	68fb      	ldr	r3, [r7, #12]
 c00807e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 c008082:	2b01      	cmp	r3, #1
 c008084:	d101      	bne.n	c00808a <HAL_UART_Transmit+0x3a>
 c008086:	2302      	movs	r3, #2
 c008088:	e074      	b.n	c008174 <HAL_UART_Transmit+0x124>
 c00808a:	68fb      	ldr	r3, [r7, #12]
 c00808c:	2201      	movs	r2, #1
 c00808e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c008092:	68fb      	ldr	r3, [r7, #12]
 c008094:	2200      	movs	r2, #0
 c008096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c00809a:	68fb      	ldr	r3, [r7, #12]
 c00809c:	2221      	movs	r2, #33	@ 0x21
 c00809e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c0080a2:	f7fd fc71 	bl	c005988 <HAL_GetTick>
 c0080a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c0080a8:	68fb      	ldr	r3, [r7, #12]
 c0080aa:	88fa      	ldrh	r2, [r7, #6]
 c0080ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 c0080b0:	68fb      	ldr	r3, [r7, #12]
 c0080b2:	88fa      	ldrh	r2, [r7, #6]
 c0080b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0080b8:	68fb      	ldr	r3, [r7, #12]
 c0080ba:	689b      	ldr	r3, [r3, #8]
 c0080bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c0080c0:	d108      	bne.n	c0080d4 <HAL_UART_Transmit+0x84>
 c0080c2:	68fb      	ldr	r3, [r7, #12]
 c0080c4:	691b      	ldr	r3, [r3, #16]
 c0080c6:	2b00      	cmp	r3, #0
 c0080c8:	d104      	bne.n	c0080d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 c0080ca:	2300      	movs	r3, #0
 c0080cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c0080ce:	68bb      	ldr	r3, [r7, #8]
 c0080d0:	61bb      	str	r3, [r7, #24]
 c0080d2:	e003      	b.n	c0080dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 c0080d4:	68bb      	ldr	r3, [r7, #8]
 c0080d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c0080d8:	2300      	movs	r3, #0
 c0080da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c0080dc:	68fb      	ldr	r3, [r7, #12]
 c0080de:	2200      	movs	r2, #0
 c0080e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 c0080e4:	e02c      	b.n	c008140 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c0080e6:	683b      	ldr	r3, [r7, #0]
 c0080e8:	9300      	str	r3, [sp, #0]
 c0080ea:	697b      	ldr	r3, [r7, #20]
 c0080ec:	2200      	movs	r2, #0
 c0080ee:	2180      	movs	r1, #128	@ 0x80
 c0080f0:	68f8      	ldr	r0, [r7, #12]
 c0080f2:	f000 fd02 	bl	c008afa <UART_WaitOnFlagUntilTimeout>
 c0080f6:	4603      	mov	r3, r0
 c0080f8:	2b00      	cmp	r3, #0
 c0080fa:	d001      	beq.n	c008100 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 c0080fc:	2303      	movs	r3, #3
 c0080fe:	e039      	b.n	c008174 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 c008100:	69fb      	ldr	r3, [r7, #28]
 c008102:	2b00      	cmp	r3, #0
 c008104:	d10b      	bne.n	c00811e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c008106:	69bb      	ldr	r3, [r7, #24]
 c008108:	881b      	ldrh	r3, [r3, #0]
 c00810a:	461a      	mov	r2, r3
 c00810c:	68fb      	ldr	r3, [r7, #12]
 c00810e:	681b      	ldr	r3, [r3, #0]
 c008110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c008114:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 c008116:	69bb      	ldr	r3, [r7, #24]
 c008118:	3302      	adds	r3, #2
 c00811a:	61bb      	str	r3, [r7, #24]
 c00811c:	e007      	b.n	c00812e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c00811e:	69fb      	ldr	r3, [r7, #28]
 c008120:	781a      	ldrb	r2, [r3, #0]
 c008122:	68fb      	ldr	r3, [r7, #12]
 c008124:	681b      	ldr	r3, [r3, #0]
 c008126:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 c008128:	69fb      	ldr	r3, [r7, #28]
 c00812a:	3301      	adds	r3, #1
 c00812c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c00812e:	68fb      	ldr	r3, [r7, #12]
 c008130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 c008134:	b29b      	uxth	r3, r3
 c008136:	3b01      	subs	r3, #1
 c008138:	b29a      	uxth	r2, r3
 c00813a:	68fb      	ldr	r3, [r7, #12]
 c00813c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 c008140:	68fb      	ldr	r3, [r7, #12]
 c008142:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 c008146:	b29b      	uxth	r3, r3
 c008148:	2b00      	cmp	r3, #0
 c00814a:	d1cc      	bne.n	c0080e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c00814c:	683b      	ldr	r3, [r7, #0]
 c00814e:	9300      	str	r3, [sp, #0]
 c008150:	697b      	ldr	r3, [r7, #20]
 c008152:	2200      	movs	r2, #0
 c008154:	2140      	movs	r1, #64	@ 0x40
 c008156:	68f8      	ldr	r0, [r7, #12]
 c008158:	f000 fccf 	bl	c008afa <UART_WaitOnFlagUntilTimeout>
 c00815c:	4603      	mov	r3, r0
 c00815e:	2b00      	cmp	r3, #0
 c008160:	d001      	beq.n	c008166 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 c008162:	2303      	movs	r3, #3
 c008164:	e006      	b.n	c008174 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c008166:	68fb      	ldr	r3, [r7, #12]
 c008168:	2220      	movs	r2, #32
 c00816a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 c00816e:	2300      	movs	r3, #0
 c008170:	e000      	b.n	c008174 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 c008172:	2302      	movs	r3, #2
  }
}
 c008174:	4618      	mov	r0, r3
 c008176:	3720      	adds	r7, #32
 c008178:	46bd      	mov	sp, r7
 c00817a:	bd80      	pop	{r7, pc}

0c00817c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c00817c:	b580      	push	{r7, lr}
 c00817e:	b08a      	sub	sp, #40	@ 0x28
 c008180:	af02      	add	r7, sp, #8
 c008182:	60f8      	str	r0, [r7, #12]
 c008184:	60b9      	str	r1, [r7, #8]
 c008186:	603b      	str	r3, [r7, #0]
 c008188:	4613      	mov	r3, r2
 c00818a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c00818c:	68fb      	ldr	r3, [r7, #12]
 c00818e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c008192:	2b20      	cmp	r3, #32
 c008194:	f040 80c0 	bne.w	c008318 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 c008198:	68bb      	ldr	r3, [r7, #8]
 c00819a:	2b00      	cmp	r3, #0
 c00819c:	d002      	beq.n	c0081a4 <HAL_UART_Receive+0x28>
 c00819e:	88fb      	ldrh	r3, [r7, #6]
 c0081a0:	2b00      	cmp	r3, #0
 c0081a2:	d101      	bne.n	c0081a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 c0081a4:	2301      	movs	r3, #1
 c0081a6:	e0b8      	b.n	c00831a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 c0081a8:	68fb      	ldr	r3, [r7, #12]
 c0081aa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 c0081ae:	2b01      	cmp	r3, #1
 c0081b0:	d101      	bne.n	c0081b6 <HAL_UART_Receive+0x3a>
 c0081b2:	2302      	movs	r3, #2
 c0081b4:	e0b1      	b.n	c00831a <HAL_UART_Receive+0x19e>
 c0081b6:	68fb      	ldr	r3, [r7, #12]
 c0081b8:	2201      	movs	r2, #1
 c0081ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0081be:	68fb      	ldr	r3, [r7, #12]
 c0081c0:	2200      	movs	r2, #0
 c0081c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c0081c6:	68fb      	ldr	r3, [r7, #12]
 c0081c8:	2222      	movs	r2, #34	@ 0x22
 c0081ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0081ce:	68fb      	ldr	r3, [r7, #12]
 c0081d0:	2200      	movs	r2, #0
 c0081d2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c0081d4:	f7fd fbd8 	bl	c005988 <HAL_GetTick>
 c0081d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 c0081da:	68fb      	ldr	r3, [r7, #12]
 c0081dc:	88fa      	ldrh	r2, [r7, #6]
 c0081de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 c0081e2:	68fb      	ldr	r3, [r7, #12]
 c0081e4:	88fa      	ldrh	r2, [r7, #6]
 c0081e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c0081ea:	68fb      	ldr	r3, [r7, #12]
 c0081ec:	689b      	ldr	r3, [r3, #8]
 c0081ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c0081f2:	d10e      	bne.n	c008212 <HAL_UART_Receive+0x96>
 c0081f4:	68fb      	ldr	r3, [r7, #12]
 c0081f6:	691b      	ldr	r3, [r3, #16]
 c0081f8:	2b00      	cmp	r3, #0
 c0081fa:	d105      	bne.n	c008208 <HAL_UART_Receive+0x8c>
 c0081fc:	68fb      	ldr	r3, [r7, #12]
 c0081fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 c008202:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c008206:	e02d      	b.n	c008264 <HAL_UART_Receive+0xe8>
 c008208:	68fb      	ldr	r3, [r7, #12]
 c00820a:	22ff      	movs	r2, #255	@ 0xff
 c00820c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c008210:	e028      	b.n	c008264 <HAL_UART_Receive+0xe8>
 c008212:	68fb      	ldr	r3, [r7, #12]
 c008214:	689b      	ldr	r3, [r3, #8]
 c008216:	2b00      	cmp	r3, #0
 c008218:	d10d      	bne.n	c008236 <HAL_UART_Receive+0xba>
 c00821a:	68fb      	ldr	r3, [r7, #12]
 c00821c:	691b      	ldr	r3, [r3, #16]
 c00821e:	2b00      	cmp	r3, #0
 c008220:	d104      	bne.n	c00822c <HAL_UART_Receive+0xb0>
 c008222:	68fb      	ldr	r3, [r7, #12]
 c008224:	22ff      	movs	r2, #255	@ 0xff
 c008226:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c00822a:	e01b      	b.n	c008264 <HAL_UART_Receive+0xe8>
 c00822c:	68fb      	ldr	r3, [r7, #12]
 c00822e:	227f      	movs	r2, #127	@ 0x7f
 c008230:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c008234:	e016      	b.n	c008264 <HAL_UART_Receive+0xe8>
 c008236:	68fb      	ldr	r3, [r7, #12]
 c008238:	689b      	ldr	r3, [r3, #8]
 c00823a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00823e:	d10d      	bne.n	c00825c <HAL_UART_Receive+0xe0>
 c008240:	68fb      	ldr	r3, [r7, #12]
 c008242:	691b      	ldr	r3, [r3, #16]
 c008244:	2b00      	cmp	r3, #0
 c008246:	d104      	bne.n	c008252 <HAL_UART_Receive+0xd6>
 c008248:	68fb      	ldr	r3, [r7, #12]
 c00824a:	227f      	movs	r2, #127	@ 0x7f
 c00824c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c008250:	e008      	b.n	c008264 <HAL_UART_Receive+0xe8>
 c008252:	68fb      	ldr	r3, [r7, #12]
 c008254:	223f      	movs	r2, #63	@ 0x3f
 c008256:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c00825a:	e003      	b.n	c008264 <HAL_UART_Receive+0xe8>
 c00825c:	68fb      	ldr	r3, [r7, #12]
 c00825e:	2200      	movs	r2, #0
 c008260:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 c008264:	68fb      	ldr	r3, [r7, #12]
 c008266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 c00826a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c00826c:	68fb      	ldr	r3, [r7, #12]
 c00826e:	689b      	ldr	r3, [r3, #8]
 c008270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c008274:	d108      	bne.n	c008288 <HAL_UART_Receive+0x10c>
 c008276:	68fb      	ldr	r3, [r7, #12]
 c008278:	691b      	ldr	r3, [r3, #16]
 c00827a:	2b00      	cmp	r3, #0
 c00827c:	d104      	bne.n	c008288 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 c00827e:	2300      	movs	r3, #0
 c008280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c008282:	68bb      	ldr	r3, [r7, #8]
 c008284:	61bb      	str	r3, [r7, #24]
 c008286:	e003      	b.n	c008290 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 c008288:	68bb      	ldr	r3, [r7, #8]
 c00828a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c00828c:	2300      	movs	r3, #0
 c00828e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c008290:	68fb      	ldr	r3, [r7, #12]
 c008292:	2200      	movs	r2, #0
 c008294:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c008298:	e032      	b.n	c008300 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 c00829a:	683b      	ldr	r3, [r7, #0]
 c00829c:	9300      	str	r3, [sp, #0]
 c00829e:	697b      	ldr	r3, [r7, #20]
 c0082a0:	2200      	movs	r2, #0
 c0082a2:	2120      	movs	r1, #32
 c0082a4:	68f8      	ldr	r0, [r7, #12]
 c0082a6:	f000 fc28 	bl	c008afa <UART_WaitOnFlagUntilTimeout>
 c0082aa:	4603      	mov	r3, r0
 c0082ac:	2b00      	cmp	r3, #0
 c0082ae:	d001      	beq.n	c0082b4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 c0082b0:	2303      	movs	r3, #3
 c0082b2:	e032      	b.n	c00831a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 c0082b4:	69fb      	ldr	r3, [r7, #28]
 c0082b6:	2b00      	cmp	r3, #0
 c0082b8:	d10c      	bne.n	c0082d4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c0082ba:	68fb      	ldr	r3, [r7, #12]
 c0082bc:	681b      	ldr	r3, [r3, #0]
 c0082be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0082c0:	b29a      	uxth	r2, r3
 c0082c2:	8a7b      	ldrh	r3, [r7, #18]
 c0082c4:	4013      	ands	r3, r2
 c0082c6:	b29a      	uxth	r2, r3
 c0082c8:	69bb      	ldr	r3, [r7, #24]
 c0082ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 c0082cc:	69bb      	ldr	r3, [r7, #24]
 c0082ce:	3302      	adds	r3, #2
 c0082d0:	61bb      	str	r3, [r7, #24]
 c0082d2:	e00c      	b.n	c0082ee <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c0082d4:	68fb      	ldr	r3, [r7, #12]
 c0082d6:	681b      	ldr	r3, [r3, #0]
 c0082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0082da:	b2da      	uxtb	r2, r3
 c0082dc:	8a7b      	ldrh	r3, [r7, #18]
 c0082de:	b2db      	uxtb	r3, r3
 c0082e0:	4013      	ands	r3, r2
 c0082e2:	b2da      	uxtb	r2, r3
 c0082e4:	69fb      	ldr	r3, [r7, #28]
 c0082e6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 c0082e8:	69fb      	ldr	r3, [r7, #28]
 c0082ea:	3301      	adds	r3, #1
 c0082ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 c0082ee:	68fb      	ldr	r3, [r7, #12]
 c0082f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 c0082f4:	b29b      	uxth	r3, r3
 c0082f6:	3b01      	subs	r3, #1
 c0082f8:	b29a      	uxth	r2, r3
 c0082fa:	68fb      	ldr	r3, [r7, #12]
 c0082fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 c008300:	68fb      	ldr	r3, [r7, #12]
 c008302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 c008306:	b29b      	uxth	r3, r3
 c008308:	2b00      	cmp	r3, #0
 c00830a:	d1c6      	bne.n	c00829a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 c00830c:	68fb      	ldr	r3, [r7, #12]
 c00830e:	2220      	movs	r2, #32
 c008310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 c008314:	2300      	movs	r3, #0
 c008316:	e000      	b.n	c00831a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 c008318:	2302      	movs	r3, #2
  }
}
 c00831a:	4618      	mov	r0, r3
 c00831c:	3720      	adds	r7, #32
 c00831e:	46bd      	mov	sp, r7
 c008320:	bd80      	pop	{r7, pc}
	...

0c008324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c008324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c008328:	b08c      	sub	sp, #48	@ 0x30
 c00832a:	af00      	add	r7, sp, #0
 c00832c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c00832e:	2300      	movs	r3, #0
 c008330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c008334:	697b      	ldr	r3, [r7, #20]
 c008336:	689a      	ldr	r2, [r3, #8]
 c008338:	697b      	ldr	r3, [r7, #20]
 c00833a:	691b      	ldr	r3, [r3, #16]
 c00833c:	431a      	orrs	r2, r3
 c00833e:	697b      	ldr	r3, [r7, #20]
 c008340:	695b      	ldr	r3, [r3, #20]
 c008342:	431a      	orrs	r2, r3
 c008344:	697b      	ldr	r3, [r7, #20]
 c008346:	69db      	ldr	r3, [r3, #28]
 c008348:	4313      	orrs	r3, r2
 c00834a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c00834c:	697b      	ldr	r3, [r7, #20]
 c00834e:	681b      	ldr	r3, [r3, #0]
 c008350:	681a      	ldr	r2, [r3, #0]
 c008352:	4baa      	ldr	r3, [pc, #680]	@ (c0085fc <UART_SetConfig+0x2d8>)
 c008354:	4013      	ands	r3, r2
 c008356:	697a      	ldr	r2, [r7, #20]
 c008358:	6812      	ldr	r2, [r2, #0]
 c00835a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 c00835c:	430b      	orrs	r3, r1
 c00835e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c008360:	697b      	ldr	r3, [r7, #20]
 c008362:	681b      	ldr	r3, [r3, #0]
 c008364:	685b      	ldr	r3, [r3, #4]
 c008366:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c00836a:	697b      	ldr	r3, [r7, #20]
 c00836c:	68da      	ldr	r2, [r3, #12]
 c00836e:	697b      	ldr	r3, [r7, #20]
 c008370:	681b      	ldr	r3, [r3, #0]
 c008372:	430a      	orrs	r2, r1
 c008374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c008376:	697b      	ldr	r3, [r7, #20]
 c008378:	699b      	ldr	r3, [r3, #24]
 c00837a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c00837c:	697b      	ldr	r3, [r7, #20]
 c00837e:	681b      	ldr	r3, [r3, #0]
 c008380:	4a9f      	ldr	r2, [pc, #636]	@ (c008600 <UART_SetConfig+0x2dc>)
 c008382:	4293      	cmp	r3, r2
 c008384:	d004      	beq.n	c008390 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c008386:	697b      	ldr	r3, [r7, #20]
 c008388:	6a1b      	ldr	r3, [r3, #32]
 c00838a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 c00838c:	4313      	orrs	r3, r2
 c00838e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c008390:	697b      	ldr	r3, [r7, #20]
 c008392:	681b      	ldr	r3, [r3, #0]
 c008394:	689b      	ldr	r3, [r3, #8]
 c008396:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 c00839a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 c00839e:	697a      	ldr	r2, [r7, #20]
 c0083a0:	6812      	ldr	r2, [r2, #0]
 c0083a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 c0083a4:	430b      	orrs	r3, r1
 c0083a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0083a8:	697b      	ldr	r3, [r7, #20]
 c0083aa:	681b      	ldr	r3, [r3, #0]
 c0083ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0083ae:	f023 010f 	bic.w	r1, r3, #15
 c0083b2:	697b      	ldr	r3, [r7, #20]
 c0083b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c0083b6:	697b      	ldr	r3, [r7, #20]
 c0083b8:	681b      	ldr	r3, [r3, #0]
 c0083ba:	430a      	orrs	r2, r1
 c0083bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0083be:	697b      	ldr	r3, [r7, #20]
 c0083c0:	681b      	ldr	r3, [r3, #0]
 c0083c2:	4a90      	ldr	r2, [pc, #576]	@ (c008604 <UART_SetConfig+0x2e0>)
 c0083c4:	4293      	cmp	r3, r2
 c0083c6:	d125      	bne.n	c008414 <UART_SetConfig+0xf0>
 c0083c8:	4b8f      	ldr	r3, [pc, #572]	@ (c008608 <UART_SetConfig+0x2e4>)
 c0083ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0083ce:	f003 0303 	and.w	r3, r3, #3
 c0083d2:	2b03      	cmp	r3, #3
 c0083d4:	d81a      	bhi.n	c00840c <UART_SetConfig+0xe8>
 c0083d6:	a201      	add	r2, pc, #4	@ (adr r2, c0083dc <UART_SetConfig+0xb8>)
 c0083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0083dc:	0c0083ed 	.word	0x0c0083ed
 c0083e0:	0c0083fd 	.word	0x0c0083fd
 c0083e4:	0c0083f5 	.word	0x0c0083f5
 c0083e8:	0c008405 	.word	0x0c008405
 c0083ec:	2301      	movs	r3, #1
 c0083ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0083f2:	e114      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0083f4:	2302      	movs	r3, #2
 c0083f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0083fa:	e110      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0083fc:	2304      	movs	r3, #4
 c0083fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c008402:	e10c      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008404:	2308      	movs	r3, #8
 c008406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00840a:	e108      	b.n	c00861e <UART_SetConfig+0x2fa>
 c00840c:	2310      	movs	r3, #16
 c00840e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c008412:	e104      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008414:	697b      	ldr	r3, [r7, #20]
 c008416:	681b      	ldr	r3, [r3, #0]
 c008418:	4a7c      	ldr	r2, [pc, #496]	@ (c00860c <UART_SetConfig+0x2e8>)
 c00841a:	4293      	cmp	r3, r2
 c00841c:	d138      	bne.n	c008490 <UART_SetConfig+0x16c>
 c00841e:	4b7a      	ldr	r3, [pc, #488]	@ (c008608 <UART_SetConfig+0x2e4>)
 c008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c008424:	f003 030c 	and.w	r3, r3, #12
 c008428:	2b0c      	cmp	r3, #12
 c00842a:	d82d      	bhi.n	c008488 <UART_SetConfig+0x164>
 c00842c:	a201      	add	r2, pc, #4	@ (adr r2, c008434 <UART_SetConfig+0x110>)
 c00842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008432:	bf00      	nop
 c008434:	0c008469 	.word	0x0c008469
 c008438:	0c008489 	.word	0x0c008489
 c00843c:	0c008489 	.word	0x0c008489
 c008440:	0c008489 	.word	0x0c008489
 c008444:	0c008479 	.word	0x0c008479
 c008448:	0c008489 	.word	0x0c008489
 c00844c:	0c008489 	.word	0x0c008489
 c008450:	0c008489 	.word	0x0c008489
 c008454:	0c008471 	.word	0x0c008471
 c008458:	0c008489 	.word	0x0c008489
 c00845c:	0c008489 	.word	0x0c008489
 c008460:	0c008489 	.word	0x0c008489
 c008464:	0c008481 	.word	0x0c008481
 c008468:	2300      	movs	r3, #0
 c00846a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00846e:	e0d6      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008470:	2302      	movs	r3, #2
 c008472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c008476:	e0d2      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008478:	2304      	movs	r3, #4
 c00847a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00847e:	e0ce      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008480:	2308      	movs	r3, #8
 c008482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c008486:	e0ca      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008488:	2310      	movs	r3, #16
 c00848a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00848e:	e0c6      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008490:	697b      	ldr	r3, [r7, #20]
 c008492:	681b      	ldr	r3, [r3, #0]
 c008494:	4a5e      	ldr	r2, [pc, #376]	@ (c008610 <UART_SetConfig+0x2ec>)
 c008496:	4293      	cmp	r3, r2
 c008498:	d125      	bne.n	c0084e6 <UART_SetConfig+0x1c2>
 c00849a:	4b5b      	ldr	r3, [pc, #364]	@ (c008608 <UART_SetConfig+0x2e4>)
 c00849c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0084a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 c0084a4:	2b30      	cmp	r3, #48	@ 0x30
 c0084a6:	d016      	beq.n	c0084d6 <UART_SetConfig+0x1b2>
 c0084a8:	2b30      	cmp	r3, #48	@ 0x30
 c0084aa:	d818      	bhi.n	c0084de <UART_SetConfig+0x1ba>
 c0084ac:	2b20      	cmp	r3, #32
 c0084ae:	d00a      	beq.n	c0084c6 <UART_SetConfig+0x1a2>
 c0084b0:	2b20      	cmp	r3, #32
 c0084b2:	d814      	bhi.n	c0084de <UART_SetConfig+0x1ba>
 c0084b4:	2b00      	cmp	r3, #0
 c0084b6:	d002      	beq.n	c0084be <UART_SetConfig+0x19a>
 c0084b8:	2b10      	cmp	r3, #16
 c0084ba:	d008      	beq.n	c0084ce <UART_SetConfig+0x1aa>
 c0084bc:	e00f      	b.n	c0084de <UART_SetConfig+0x1ba>
 c0084be:	2300      	movs	r3, #0
 c0084c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0084c4:	e0ab      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0084c6:	2302      	movs	r3, #2
 c0084c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0084cc:	e0a7      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0084ce:	2304      	movs	r3, #4
 c0084d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0084d4:	e0a3      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0084d6:	2308      	movs	r3, #8
 c0084d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0084dc:	e09f      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0084de:	2310      	movs	r3, #16
 c0084e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0084e4:	e09b      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0084e6:	697b      	ldr	r3, [r7, #20]
 c0084e8:	681b      	ldr	r3, [r3, #0]
 c0084ea:	4a4a      	ldr	r2, [pc, #296]	@ (c008614 <UART_SetConfig+0x2f0>)
 c0084ec:	4293      	cmp	r3, r2
 c0084ee:	d125      	bne.n	c00853c <UART_SetConfig+0x218>
 c0084f0:	4b45      	ldr	r3, [pc, #276]	@ (c008608 <UART_SetConfig+0x2e4>)
 c0084f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0084f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 c0084fa:	2bc0      	cmp	r3, #192	@ 0xc0
 c0084fc:	d016      	beq.n	c00852c <UART_SetConfig+0x208>
 c0084fe:	2bc0      	cmp	r3, #192	@ 0xc0
 c008500:	d818      	bhi.n	c008534 <UART_SetConfig+0x210>
 c008502:	2b80      	cmp	r3, #128	@ 0x80
 c008504:	d00a      	beq.n	c00851c <UART_SetConfig+0x1f8>
 c008506:	2b80      	cmp	r3, #128	@ 0x80
 c008508:	d814      	bhi.n	c008534 <UART_SetConfig+0x210>
 c00850a:	2b00      	cmp	r3, #0
 c00850c:	d002      	beq.n	c008514 <UART_SetConfig+0x1f0>
 c00850e:	2b40      	cmp	r3, #64	@ 0x40
 c008510:	d008      	beq.n	c008524 <UART_SetConfig+0x200>
 c008512:	e00f      	b.n	c008534 <UART_SetConfig+0x210>
 c008514:	2300      	movs	r3, #0
 c008516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00851a:	e080      	b.n	c00861e <UART_SetConfig+0x2fa>
 c00851c:	2302      	movs	r3, #2
 c00851e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c008522:	e07c      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008524:	2304      	movs	r3, #4
 c008526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00852a:	e078      	b.n	c00861e <UART_SetConfig+0x2fa>
 c00852c:	2308      	movs	r3, #8
 c00852e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c008532:	e074      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008534:	2310      	movs	r3, #16
 c008536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00853a:	e070      	b.n	c00861e <UART_SetConfig+0x2fa>
 c00853c:	697b      	ldr	r3, [r7, #20]
 c00853e:	681b      	ldr	r3, [r3, #0]
 c008540:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 c008544:	d12a      	bne.n	c00859c <UART_SetConfig+0x278>
 c008546:	4b30      	ldr	r3, [pc, #192]	@ (c008608 <UART_SetConfig+0x2e4>)
 c008548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00854c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c008550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c008554:	d01a      	beq.n	c00858c <UART_SetConfig+0x268>
 c008556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00855a:	d81b      	bhi.n	c008594 <UART_SetConfig+0x270>
 c00855c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c008560:	d00c      	beq.n	c00857c <UART_SetConfig+0x258>
 c008562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c008566:	d815      	bhi.n	c008594 <UART_SetConfig+0x270>
 c008568:	2b00      	cmp	r3, #0
 c00856a:	d003      	beq.n	c008574 <UART_SetConfig+0x250>
 c00856c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c008570:	d008      	beq.n	c008584 <UART_SetConfig+0x260>
 c008572:	e00f      	b.n	c008594 <UART_SetConfig+0x270>
 c008574:	2300      	movs	r3, #0
 c008576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00857a:	e050      	b.n	c00861e <UART_SetConfig+0x2fa>
 c00857c:	2302      	movs	r3, #2
 c00857e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c008582:	e04c      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008584:	2304      	movs	r3, #4
 c008586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00858a:	e048      	b.n	c00861e <UART_SetConfig+0x2fa>
 c00858c:	2308      	movs	r3, #8
 c00858e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c008592:	e044      	b.n	c00861e <UART_SetConfig+0x2fa>
 c008594:	2310      	movs	r3, #16
 c008596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c00859a:	e040      	b.n	c00861e <UART_SetConfig+0x2fa>
 c00859c:	697b      	ldr	r3, [r7, #20]
 c00859e:	681b      	ldr	r3, [r3, #0]
 c0085a0:	4a17      	ldr	r2, [pc, #92]	@ (c008600 <UART_SetConfig+0x2dc>)
 c0085a2:	4293      	cmp	r3, r2
 c0085a4:	d138      	bne.n	c008618 <UART_SetConfig+0x2f4>
 c0085a6:	4b18      	ldr	r3, [pc, #96]	@ (c008608 <UART_SetConfig+0x2e4>)
 c0085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0085ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 c0085b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c0085b4:	d01a      	beq.n	c0085ec <UART_SetConfig+0x2c8>
 c0085b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c0085ba:	d81b      	bhi.n	c0085f4 <UART_SetConfig+0x2d0>
 c0085bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c0085c0:	d00c      	beq.n	c0085dc <UART_SetConfig+0x2b8>
 c0085c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c0085c6:	d815      	bhi.n	c0085f4 <UART_SetConfig+0x2d0>
 c0085c8:	2b00      	cmp	r3, #0
 c0085ca:	d003      	beq.n	c0085d4 <UART_SetConfig+0x2b0>
 c0085cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0085d0:	d008      	beq.n	c0085e4 <UART_SetConfig+0x2c0>
 c0085d2:	e00f      	b.n	c0085f4 <UART_SetConfig+0x2d0>
 c0085d4:	2300      	movs	r3, #0
 c0085d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0085da:	e020      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0085dc:	2302      	movs	r3, #2
 c0085de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0085e2:	e01c      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0085e4:	2304      	movs	r3, #4
 c0085e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0085ea:	e018      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0085ec:	2308      	movs	r3, #8
 c0085ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0085f2:	e014      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0085f4:	2310      	movs	r3, #16
 c0085f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 c0085fa:	e010      	b.n	c00861e <UART_SetConfig+0x2fa>
 c0085fc:	cfff69f3 	.word	0xcfff69f3
 c008600:	50008000 	.word	0x50008000
 c008604:	50013800 	.word	0x50013800
 c008608:	50021000 	.word	0x50021000
 c00860c:	50004400 	.word	0x50004400
 c008610:	50004800 	.word	0x50004800
 c008614:	50004c00 	.word	0x50004c00
 c008618:	2310      	movs	r3, #16
 c00861a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c00861e:	697b      	ldr	r3, [r7, #20]
 c008620:	681b      	ldr	r3, [r3, #0]
 c008622:	4ab0      	ldr	r2, [pc, #704]	@ (c0088e4 <UART_SetConfig+0x5c0>)
 c008624:	4293      	cmp	r3, r2
 c008626:	f040 809b 	bne.w	c008760 <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c00862a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 c00862e:	2b08      	cmp	r3, #8
 c008630:	d827      	bhi.n	c008682 <UART_SetConfig+0x35e>
 c008632:	a201      	add	r2, pc, #4	@ (adr r2, c008638 <UART_SetConfig+0x314>)
 c008634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008638:	0c00865d 	.word	0x0c00865d
 c00863c:	0c008665 	.word	0x0c008665
 c008640:	0c00866d 	.word	0x0c00866d
 c008644:	0c008683 	.word	0x0c008683
 c008648:	0c008673 	.word	0x0c008673
 c00864c:	0c008683 	.word	0x0c008683
 c008650:	0c008683 	.word	0x0c008683
 c008654:	0c008683 	.word	0x0c008683
 c008658:	0c00867b 	.word	0x0c00867b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c00865c:	f7fe fe8e 	bl	c00737c <HAL_RCC_GetPCLK1Freq>
 c008660:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c008662:	e014      	b.n	c00868e <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c008664:	f7fe fe9e 	bl	c0073a4 <HAL_RCC_GetPCLK2Freq>
 c008668:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c00866a:	e010      	b.n	c00868e <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c00866c:	4b9e      	ldr	r3, [pc, #632]	@ (c0088e8 <UART_SetConfig+0x5c4>)
 c00866e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 c008670:	e00d      	b.n	c00868e <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c008672:	f7fe fdd3 	bl	c00721c <HAL_RCC_GetSysClockFreq>
 c008676:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c008678:	e009      	b.n	c00868e <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c00867a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00867e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 c008680:	e005      	b.n	c00868e <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c008682:	2300      	movs	r3, #0
 c008684:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 c008686:	2301      	movs	r3, #1
 c008688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 c00868c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c00868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c008690:	2b00      	cmp	r3, #0
 c008692:	f000 8130 	beq.w	c0088f6 <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c008696:	697b      	ldr	r3, [r7, #20]
 c008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00869a:	4a94      	ldr	r2, [pc, #592]	@ (c0088ec <UART_SetConfig+0x5c8>)
 c00869c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0086a0:	461a      	mov	r2, r3
 c0086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0086a4:	fbb3 f3f2 	udiv	r3, r3, r2
 c0086a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
//      volatile uint32_t value1 = 3U * huart->Init.BaudRate;
//      volatile uint32_t value2 = 4096U * huart->Init.BaudRate;
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0086aa:	697b      	ldr	r3, [r7, #20]
 c0086ac:	685a      	ldr	r2, [r3, #4]
 c0086ae:	4613      	mov	r3, r2
 c0086b0:	005b      	lsls	r3, r3, #1
 c0086b2:	4413      	add	r3, r2
 c0086b4:	69ba      	ldr	r2, [r7, #24]
 c0086b6:	429a      	cmp	r2, r3
 c0086b8:	d305      	bcc.n	c0086c6 <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c0086ba:	697b      	ldr	r3, [r7, #20]
 c0086bc:	685b      	ldr	r3, [r3, #4]
 c0086be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0086c0:	69ba      	ldr	r2, [r7, #24]
 c0086c2:	429a      	cmp	r2, r3
 c0086c4:	d903      	bls.n	c0086ce <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c0086c6:	2301      	movs	r3, #1
 c0086c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 c0086cc:	e113      	b.n	c0088f6 <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0086d0:	2200      	movs	r2, #0
 c0086d2:	60bb      	str	r3, [r7, #8]
 c0086d4:	60fa      	str	r2, [r7, #12]
 c0086d6:	697b      	ldr	r3, [r7, #20]
 c0086d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0086da:	4a84      	ldr	r2, [pc, #528]	@ (c0088ec <UART_SetConfig+0x5c8>)
 c0086dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0086e0:	b29b      	uxth	r3, r3
 c0086e2:	2200      	movs	r2, #0
 c0086e4:	603b      	str	r3, [r7, #0]
 c0086e6:	607a      	str	r2, [r7, #4]
 c0086e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0086ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c0086f0:	f7f7 fdde 	bl	c0002b0 <__aeabi_uldivmod>
 c0086f4:	4602      	mov	r2, r0
 c0086f6:	460b      	mov	r3, r1
 c0086f8:	4610      	mov	r0, r2
 c0086fa:	4619      	mov	r1, r3
 c0086fc:	f04f 0200 	mov.w	r2, #0
 c008700:	f04f 0300 	mov.w	r3, #0
 c008704:	020b      	lsls	r3, r1, #8
 c008706:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c00870a:	0202      	lsls	r2, r0, #8
 c00870c:	6979      	ldr	r1, [r7, #20]
 c00870e:	6849      	ldr	r1, [r1, #4]
 c008710:	0849      	lsrs	r1, r1, #1
 c008712:	2000      	movs	r0, #0
 c008714:	460c      	mov	r4, r1
 c008716:	4605      	mov	r5, r0
 c008718:	eb12 0804 	adds.w	r8, r2, r4
 c00871c:	eb43 0905 	adc.w	r9, r3, r5
 c008720:	697b      	ldr	r3, [r7, #20]
 c008722:	685b      	ldr	r3, [r3, #4]
 c008724:	2200      	movs	r2, #0
 c008726:	469a      	mov	sl, r3
 c008728:	4693      	mov	fp, r2
 c00872a:	4652      	mov	r2, sl
 c00872c:	465b      	mov	r3, fp
 c00872e:	4640      	mov	r0, r8
 c008730:	4649      	mov	r1, r9
 c008732:	f7f7 fdbd 	bl	c0002b0 <__aeabi_uldivmod>
 c008736:	4602      	mov	r2, r0
 c008738:	460b      	mov	r3, r1
 c00873a:	4613      	mov	r3, r2
 c00873c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c00873e:	6a3b      	ldr	r3, [r7, #32]
 c008740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c008744:	d308      	bcc.n	c008758 <UART_SetConfig+0x434>
 c008746:	6a3b      	ldr	r3, [r7, #32]
 c008748:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c00874c:	d204      	bcs.n	c008758 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c00874e:	697b      	ldr	r3, [r7, #20]
 c008750:	681b      	ldr	r3, [r3, #0]
 c008752:	6a3a      	ldr	r2, [r7, #32]
 c008754:	60da      	str	r2, [r3, #12]
 c008756:	e0ce      	b.n	c0088f6 <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c008758:	2301      	movs	r3, #1
 c00875a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 c00875e:	e0ca      	b.n	c0088f6 <UART_SetConfig+0x5d2>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c008760:	697b      	ldr	r3, [r7, #20]
 c008762:	69db      	ldr	r3, [r3, #28]
 c008764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c008768:	d167      	bne.n	c00883a <UART_SetConfig+0x516>
  {
    switch (clocksource)
 c00876a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 c00876e:	2b08      	cmp	r3, #8
 c008770:	d827      	bhi.n	c0087c2 <UART_SetConfig+0x49e>
 c008772:	a201      	add	r2, pc, #4	@ (adr r2, c008778 <UART_SetConfig+0x454>)
 c008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008778:	0c00879d 	.word	0x0c00879d
 c00877c:	0c0087a5 	.word	0x0c0087a5
 c008780:	0c0087ad 	.word	0x0c0087ad
 c008784:	0c0087c3 	.word	0x0c0087c3
 c008788:	0c0087b3 	.word	0x0c0087b3
 c00878c:	0c0087c3 	.word	0x0c0087c3
 c008790:	0c0087c3 	.word	0x0c0087c3
 c008794:	0c0087c3 	.word	0x0c0087c3
 c008798:	0c0087bb 	.word	0x0c0087bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c00879c:	f7fe fdee 	bl	c00737c <HAL_RCC_GetPCLK1Freq>
 c0087a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c0087a2:	e014      	b.n	c0087ce <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0087a4:	f7fe fdfe 	bl	c0073a4 <HAL_RCC_GetPCLK2Freq>
 c0087a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c0087aa:	e010      	b.n	c0087ce <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0087ac:	4b4e      	ldr	r3, [pc, #312]	@ (c0088e8 <UART_SetConfig+0x5c4>)
 c0087ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 c0087b0:	e00d      	b.n	c0087ce <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0087b2:	f7fe fd33 	bl	c00721c <HAL_RCC_GetSysClockFreq>
 c0087b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c0087b8:	e009      	b.n	c0087ce <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0087ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c0087be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 c0087c0:	e005      	b.n	c0087ce <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c0087c2:	2300      	movs	r3, #0
 c0087c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 c0087c6:	2301      	movs	r3, #1
 c0087c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 c0087cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c0087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0087d0:	2b00      	cmp	r3, #0
 c0087d2:	f000 8090 	beq.w	c0088f6 <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0087d6:	697b      	ldr	r3, [r7, #20]
 c0087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0087da:	4a44      	ldr	r2, [pc, #272]	@ (c0088ec <UART_SetConfig+0x5c8>)
 c0087dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0087e0:	461a      	mov	r2, r3
 c0087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0087e4:	fbb3 f3f2 	udiv	r3, r3, r2
 c0087e8:	005a      	lsls	r2, r3, #1
 c0087ea:	697b      	ldr	r3, [r7, #20]
 c0087ec:	685b      	ldr	r3, [r3, #4]
 c0087ee:	085b      	lsrs	r3, r3, #1
 c0087f0:	441a      	add	r2, r3
 c0087f2:	697b      	ldr	r3, [r7, #20]
 c0087f4:	685b      	ldr	r3, [r3, #4]
 c0087f6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0087fa:	b29b      	uxth	r3, r3
 c0087fc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c0087fe:	6a3b      	ldr	r3, [r7, #32]
 c008800:	2b0f      	cmp	r3, #15
 c008802:	d916      	bls.n	c008832 <UART_SetConfig+0x50e>
 c008804:	6a3b      	ldr	r3, [r7, #32]
 c008806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00880a:	d212      	bcs.n	c008832 <UART_SetConfig+0x50e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c00880c:	6a3b      	ldr	r3, [r7, #32]
 c00880e:	b29b      	uxth	r3, r3
 c008810:	f023 030f 	bic.w	r3, r3, #15
 c008814:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c008816:	6a3b      	ldr	r3, [r7, #32]
 c008818:	085b      	lsrs	r3, r3, #1
 c00881a:	b29b      	uxth	r3, r3
 c00881c:	f003 0307 	and.w	r3, r3, #7
 c008820:	b29a      	uxth	r2, r3
 c008822:	8bfb      	ldrh	r3, [r7, #30]
 c008824:	4313      	orrs	r3, r2
 c008826:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c008828:	697b      	ldr	r3, [r7, #20]
 c00882a:	681b      	ldr	r3, [r3, #0]
 c00882c:	8bfa      	ldrh	r2, [r7, #30]
 c00882e:	60da      	str	r2, [r3, #12]
 c008830:	e061      	b.n	c0088f6 <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c008832:	2301      	movs	r3, #1
 c008834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 c008838:	e05d      	b.n	c0088f6 <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c00883a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 c00883e:	2b08      	cmp	r3, #8
 c008840:	d827      	bhi.n	c008892 <UART_SetConfig+0x56e>
 c008842:	a201      	add	r2, pc, #4	@ (adr r2, c008848 <UART_SetConfig+0x524>)
 c008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008848:	0c00886d 	.word	0x0c00886d
 c00884c:	0c008875 	.word	0x0c008875
 c008850:	0c00887d 	.word	0x0c00887d
 c008854:	0c008893 	.word	0x0c008893
 c008858:	0c008883 	.word	0x0c008883
 c00885c:	0c008893 	.word	0x0c008893
 c008860:	0c008893 	.word	0x0c008893
 c008864:	0c008893 	.word	0x0c008893
 c008868:	0c00888b 	.word	0x0c00888b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c00886c:	f7fe fd86 	bl	c00737c <HAL_RCC_GetPCLK1Freq>
 c008870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c008872:	e014      	b.n	c00889e <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c008874:	f7fe fd96 	bl	c0073a4 <HAL_RCC_GetPCLK2Freq>
 c008878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c00887a:	e010      	b.n	c00889e <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c00887c:	4b1a      	ldr	r3, [pc, #104]	@ (c0088e8 <UART_SetConfig+0x5c4>)
 c00887e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 c008880:	e00d      	b.n	c00889e <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c008882:	f7fe fccb 	bl	c00721c <HAL_RCC_GetSysClockFreq>
 c008886:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 c008888:	e009      	b.n	c00889e <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c00888a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00888e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 c008890:	e005      	b.n	c00889e <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c008892:	2300      	movs	r3, #0
 c008894:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 c008896:	2301      	movs	r3, #1
 c008898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 c00889c:	bf00      	nop
    }

    if (pclk != 0U)
 c00889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0088a0:	2b00      	cmp	r3, #0
 c0088a2:	d028      	beq.n	c0088f6 <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0088a4:	697b      	ldr	r3, [r7, #20]
 c0088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0088a8:	4a10      	ldr	r2, [pc, #64]	@ (c0088ec <UART_SetConfig+0x5c8>)
 c0088aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0088ae:	461a      	mov	r2, r3
 c0088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0088b2:	fbb3 f2f2 	udiv	r2, r3, r2
 c0088b6:	697b      	ldr	r3, [r7, #20]
 c0088b8:	685b      	ldr	r3, [r3, #4]
 c0088ba:	085b      	lsrs	r3, r3, #1
 c0088bc:	441a      	add	r2, r3
 c0088be:	697b      	ldr	r3, [r7, #20]
 c0088c0:	685b      	ldr	r3, [r3, #4]
 c0088c2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0088c6:	b29b      	uxth	r3, r3
 c0088c8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c0088ca:	6a3b      	ldr	r3, [r7, #32]
 c0088cc:	2b0f      	cmp	r3, #15
 c0088ce:	d90f      	bls.n	c0088f0 <UART_SetConfig+0x5cc>
 c0088d0:	6a3b      	ldr	r3, [r7, #32]
 c0088d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c0088d6:	d20b      	bcs.n	c0088f0 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = usartdiv;
 c0088d8:	697b      	ldr	r3, [r7, #20]
 c0088da:	681b      	ldr	r3, [r3, #0]
 c0088dc:	6a3a      	ldr	r2, [r7, #32]
 c0088de:	60da      	str	r2, [r3, #12]
 c0088e0:	e009      	b.n	c0088f6 <UART_SetConfig+0x5d2>
 c0088e2:	bf00      	nop
 c0088e4:	50008000 	.word	0x50008000
 c0088e8:	00f42400 	.word	0x00f42400
 c0088ec:	0c009f50 	.word	0x0c009f50
      }
      else
      {
        ret = HAL_ERROR;
 c0088f0:	2301      	movs	r3, #1
 c0088f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c0088f6:	697b      	ldr	r3, [r7, #20]
 c0088f8:	2201      	movs	r2, #1
 c0088fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 c0088fe:	697b      	ldr	r3, [r7, #20]
 c008900:	2201      	movs	r2, #1
 c008902:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c008906:	697b      	ldr	r3, [r7, #20]
 c008908:	2200      	movs	r2, #0
 c00890a:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 c00890c:	697b      	ldr	r3, [r7, #20]
 c00890e:	2200      	movs	r2, #0
 c008910:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 c008912:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 c008916:	4618      	mov	r0, r3
 c008918:	3730      	adds	r7, #48	@ 0x30
 c00891a:	46bd      	mov	sp, r7
 c00891c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c008920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c008920:	b480      	push	{r7}
 c008922:	b083      	sub	sp, #12
 c008924:	af00      	add	r7, sp, #0
 c008926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c008928:	687b      	ldr	r3, [r7, #4]
 c00892a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00892c:	f003 0301 	and.w	r3, r3, #1
 c008930:	2b00      	cmp	r3, #0
 c008932:	d00a      	beq.n	c00894a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c008934:	687b      	ldr	r3, [r7, #4]
 c008936:	681b      	ldr	r3, [r3, #0]
 c008938:	685b      	ldr	r3, [r3, #4]
 c00893a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 c00893e:	687b      	ldr	r3, [r7, #4]
 c008940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c008942:	687b      	ldr	r3, [r7, #4]
 c008944:	681b      	ldr	r3, [r3, #0]
 c008946:	430a      	orrs	r2, r1
 c008948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c00894a:	687b      	ldr	r3, [r7, #4]
 c00894c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00894e:	f003 0302 	and.w	r3, r3, #2
 c008952:	2b00      	cmp	r3, #0
 c008954:	d00a      	beq.n	c00896c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c008956:	687b      	ldr	r3, [r7, #4]
 c008958:	681b      	ldr	r3, [r3, #0]
 c00895a:	685b      	ldr	r3, [r3, #4]
 c00895c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 c008960:	687b      	ldr	r3, [r7, #4]
 c008962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c008964:	687b      	ldr	r3, [r7, #4]
 c008966:	681b      	ldr	r3, [r3, #0]
 c008968:	430a      	orrs	r2, r1
 c00896a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c00896c:	687b      	ldr	r3, [r7, #4]
 c00896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c008970:	f003 0304 	and.w	r3, r3, #4
 c008974:	2b00      	cmp	r3, #0
 c008976:	d00a      	beq.n	c00898e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c008978:	687b      	ldr	r3, [r7, #4]
 c00897a:	681b      	ldr	r3, [r3, #0]
 c00897c:	685b      	ldr	r3, [r3, #4]
 c00897e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 c008982:	687b      	ldr	r3, [r7, #4]
 c008984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c008986:	687b      	ldr	r3, [r7, #4]
 c008988:	681b      	ldr	r3, [r3, #0]
 c00898a:	430a      	orrs	r2, r1
 c00898c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c00898e:	687b      	ldr	r3, [r7, #4]
 c008990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c008992:	f003 0308 	and.w	r3, r3, #8
 c008996:	2b00      	cmp	r3, #0
 c008998:	d00a      	beq.n	c0089b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c00899a:	687b      	ldr	r3, [r7, #4]
 c00899c:	681b      	ldr	r3, [r3, #0]
 c00899e:	685b      	ldr	r3, [r3, #4]
 c0089a0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 c0089a4:	687b      	ldr	r3, [r7, #4]
 c0089a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 c0089a8:	687b      	ldr	r3, [r7, #4]
 c0089aa:	681b      	ldr	r3, [r3, #0]
 c0089ac:	430a      	orrs	r2, r1
 c0089ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c0089b0:	687b      	ldr	r3, [r7, #4]
 c0089b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0089b4:	f003 0310 	and.w	r3, r3, #16
 c0089b8:	2b00      	cmp	r3, #0
 c0089ba:	d00a      	beq.n	c0089d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c0089bc:	687b      	ldr	r3, [r7, #4]
 c0089be:	681b      	ldr	r3, [r3, #0]
 c0089c0:	689b      	ldr	r3, [r3, #8]
 c0089c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 c0089c6:	687b      	ldr	r3, [r7, #4]
 c0089c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 c0089ca:	687b      	ldr	r3, [r7, #4]
 c0089cc:	681b      	ldr	r3, [r3, #0]
 c0089ce:	430a      	orrs	r2, r1
 c0089d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c0089d2:	687b      	ldr	r3, [r7, #4]
 c0089d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0089d6:	f003 0320 	and.w	r3, r3, #32
 c0089da:	2b00      	cmp	r3, #0
 c0089dc:	d00a      	beq.n	c0089f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c0089de:	687b      	ldr	r3, [r7, #4]
 c0089e0:	681b      	ldr	r3, [r3, #0]
 c0089e2:	689b      	ldr	r3, [r3, #8]
 c0089e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 c0089e8:	687b      	ldr	r3, [r7, #4]
 c0089ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 c0089ec:	687b      	ldr	r3, [r7, #4]
 c0089ee:	681b      	ldr	r3, [r3, #0]
 c0089f0:	430a      	orrs	r2, r1
 c0089f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c0089f4:	687b      	ldr	r3, [r7, #4]
 c0089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0089f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c0089fc:	2b00      	cmp	r3, #0
 c0089fe:	d01a      	beq.n	c008a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c008a00:	687b      	ldr	r3, [r7, #4]
 c008a02:	681b      	ldr	r3, [r3, #0]
 c008a04:	685b      	ldr	r3, [r3, #4]
 c008a06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 c008a0a:	687b      	ldr	r3, [r7, #4]
 c008a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 c008a0e:	687b      	ldr	r3, [r7, #4]
 c008a10:	681b      	ldr	r3, [r3, #0]
 c008a12:	430a      	orrs	r2, r1
 c008a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c008a16:	687b      	ldr	r3, [r7, #4]
 c008a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c008a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c008a1e:	d10a      	bne.n	c008a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c008a20:	687b      	ldr	r3, [r7, #4]
 c008a22:	681b      	ldr	r3, [r3, #0]
 c008a24:	685b      	ldr	r3, [r3, #4]
 c008a26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 c008a2a:	687b      	ldr	r3, [r7, #4]
 c008a2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 c008a2e:	687b      	ldr	r3, [r7, #4]
 c008a30:	681b      	ldr	r3, [r3, #0]
 c008a32:	430a      	orrs	r2, r1
 c008a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c008a36:	687b      	ldr	r3, [r7, #4]
 c008a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c008a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c008a3e:	2b00      	cmp	r3, #0
 c008a40:	d00a      	beq.n	c008a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c008a42:	687b      	ldr	r3, [r7, #4]
 c008a44:	681b      	ldr	r3, [r3, #0]
 c008a46:	685b      	ldr	r3, [r3, #4]
 c008a48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 c008a4c:	687b      	ldr	r3, [r7, #4]
 c008a4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 c008a50:	687b      	ldr	r3, [r7, #4]
 c008a52:	681b      	ldr	r3, [r3, #0]
 c008a54:	430a      	orrs	r2, r1
 c008a56:	605a      	str	r2, [r3, #4]
  }
}
 c008a58:	bf00      	nop
 c008a5a:	370c      	adds	r7, #12
 c008a5c:	46bd      	mov	sp, r7
 c008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008a62:	4770      	bx	lr

0c008a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c008a64:	b580      	push	{r7, lr}
 c008a66:	b086      	sub	sp, #24
 c008a68:	af02      	add	r7, sp, #8
 c008a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c008a6c:	687b      	ldr	r3, [r7, #4]
 c008a6e:	2200      	movs	r2, #0
 c008a70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c008a74:	f7fc ff88 	bl	c005988 <HAL_GetTick>
 c008a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c008a7a:	687b      	ldr	r3, [r7, #4]
 c008a7c:	681b      	ldr	r3, [r3, #0]
 c008a7e:	681b      	ldr	r3, [r3, #0]
 c008a80:	f003 0308 	and.w	r3, r3, #8
 c008a84:	2b08      	cmp	r3, #8
 c008a86:	d10e      	bne.n	c008aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c008a88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 c008a8c:	9300      	str	r3, [sp, #0]
 c008a8e:	68fb      	ldr	r3, [r7, #12]
 c008a90:	2200      	movs	r2, #0
 c008a92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 c008a96:	6878      	ldr	r0, [r7, #4]
 c008a98:	f000 f82f 	bl	c008afa <UART_WaitOnFlagUntilTimeout>
 c008a9c:	4603      	mov	r3, r0
 c008a9e:	2b00      	cmp	r3, #0
 c008aa0:	d001      	beq.n	c008aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c008aa2:	2303      	movs	r3, #3
 c008aa4:	e025      	b.n	c008af2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c008aa6:	687b      	ldr	r3, [r7, #4]
 c008aa8:	681b      	ldr	r3, [r3, #0]
 c008aaa:	681b      	ldr	r3, [r3, #0]
 c008aac:	f003 0304 	and.w	r3, r3, #4
 c008ab0:	2b04      	cmp	r3, #4
 c008ab2:	d10e      	bne.n	c008ad2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c008ab4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 c008ab8:	9300      	str	r3, [sp, #0]
 c008aba:	68fb      	ldr	r3, [r7, #12]
 c008abc:	2200      	movs	r2, #0
 c008abe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 c008ac2:	6878      	ldr	r0, [r7, #4]
 c008ac4:	f000 f819 	bl	c008afa <UART_WaitOnFlagUntilTimeout>
 c008ac8:	4603      	mov	r3, r0
 c008aca:	2b00      	cmp	r3, #0
 c008acc:	d001      	beq.n	c008ad2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c008ace:	2303      	movs	r3, #3
 c008ad0:	e00f      	b.n	c008af2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c008ad2:	687b      	ldr	r3, [r7, #4]
 c008ad4:	2220      	movs	r2, #32
 c008ad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c008ada:	687b      	ldr	r3, [r7, #4]
 c008adc:	2220      	movs	r2, #32
 c008ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c008ae2:	687b      	ldr	r3, [r7, #4]
 c008ae4:	2200      	movs	r2, #0
 c008ae6:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 c008ae8:	687b      	ldr	r3, [r7, #4]
 c008aea:	2200      	movs	r2, #0
 c008aec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 c008af0:	2300      	movs	r3, #0
}
 c008af2:	4618      	mov	r0, r3
 c008af4:	3710      	adds	r7, #16
 c008af6:	46bd      	mov	sp, r7
 c008af8:	bd80      	pop	{r7, pc}

0c008afa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c008afa:	b580      	push	{r7, lr}
 c008afc:	b084      	sub	sp, #16
 c008afe:	af00      	add	r7, sp, #0
 c008b00:	60f8      	str	r0, [r7, #12]
 c008b02:	60b9      	str	r1, [r7, #8]
 c008b04:	603b      	str	r3, [r7, #0]
 c008b06:	4613      	mov	r3, r2
 c008b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c008b0a:	e062      	b.n	c008bd2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c008b0c:	69bb      	ldr	r3, [r7, #24]
 c008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 c008b12:	d05e      	beq.n	c008bd2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c008b14:	f7fc ff38 	bl	c005988 <HAL_GetTick>
 c008b18:	4602      	mov	r2, r0
 c008b1a:	683b      	ldr	r3, [r7, #0]
 c008b1c:	1ad3      	subs	r3, r2, r3
 c008b1e:	69ba      	ldr	r2, [r7, #24]
 c008b20:	429a      	cmp	r2, r3
 c008b22:	d302      	bcc.n	c008b2a <UART_WaitOnFlagUntilTimeout+0x30>
 c008b24:	69bb      	ldr	r3, [r7, #24]
 c008b26:	2b00      	cmp	r3, #0
 c008b28:	d11d      	bne.n	c008b66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c008b2a:	68fb      	ldr	r3, [r7, #12]
 c008b2c:	681b      	ldr	r3, [r3, #0]
 c008b2e:	681a      	ldr	r2, [r3, #0]
 c008b30:	68fb      	ldr	r3, [r7, #12]
 c008b32:	681b      	ldr	r3, [r3, #0]
 c008b34:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 c008b38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c008b3a:	68fb      	ldr	r3, [r7, #12]
 c008b3c:	681b      	ldr	r3, [r3, #0]
 c008b3e:	689a      	ldr	r2, [r3, #8]
 c008b40:	68fb      	ldr	r3, [r7, #12]
 c008b42:	681b      	ldr	r3, [r3, #0]
 c008b44:	f022 0201 	bic.w	r2, r2, #1
 c008b48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c008b4a:	68fb      	ldr	r3, [r7, #12]
 c008b4c:	2220      	movs	r2, #32
 c008b4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c008b52:	68fb      	ldr	r3, [r7, #12]
 c008b54:	2220      	movs	r2, #32
 c008b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 c008b5a:	68fb      	ldr	r3, [r7, #12]
 c008b5c:	2200      	movs	r2, #0
 c008b5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 c008b62:	2303      	movs	r3, #3
 c008b64:	e045      	b.n	c008bf2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c008b66:	68fb      	ldr	r3, [r7, #12]
 c008b68:	681b      	ldr	r3, [r3, #0]
 c008b6a:	681b      	ldr	r3, [r3, #0]
 c008b6c:	f003 0304 	and.w	r3, r3, #4
 c008b70:	2b00      	cmp	r3, #0
 c008b72:	d02e      	beq.n	c008bd2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c008b74:	68fb      	ldr	r3, [r7, #12]
 c008b76:	681b      	ldr	r3, [r3, #0]
 c008b78:	69db      	ldr	r3, [r3, #28]
 c008b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c008b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c008b82:	d126      	bne.n	c008bd2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c008b84:	68fb      	ldr	r3, [r7, #12]
 c008b86:	681b      	ldr	r3, [r3, #0]
 c008b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 c008b8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c008b8e:	68fb      	ldr	r3, [r7, #12]
 c008b90:	681b      	ldr	r3, [r3, #0]
 c008b92:	681a      	ldr	r2, [r3, #0]
 c008b94:	68fb      	ldr	r3, [r7, #12]
 c008b96:	681b      	ldr	r3, [r3, #0]
 c008b98:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 c008b9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c008b9e:	68fb      	ldr	r3, [r7, #12]
 c008ba0:	681b      	ldr	r3, [r3, #0]
 c008ba2:	689a      	ldr	r2, [r3, #8]
 c008ba4:	68fb      	ldr	r3, [r7, #12]
 c008ba6:	681b      	ldr	r3, [r3, #0]
 c008ba8:	f022 0201 	bic.w	r2, r2, #1
 c008bac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c008bae:	68fb      	ldr	r3, [r7, #12]
 c008bb0:	2220      	movs	r2, #32
 c008bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c008bb6:	68fb      	ldr	r3, [r7, #12]
 c008bb8:	2220      	movs	r2, #32
 c008bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c008bbe:	68fb      	ldr	r3, [r7, #12]
 c008bc0:	2220      	movs	r2, #32
 c008bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c008bc6:	68fb      	ldr	r3, [r7, #12]
 c008bc8:	2200      	movs	r2, #0
 c008bca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 c008bce:	2303      	movs	r3, #3
 c008bd0:	e00f      	b.n	c008bf2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c008bd2:	68fb      	ldr	r3, [r7, #12]
 c008bd4:	681b      	ldr	r3, [r3, #0]
 c008bd6:	69da      	ldr	r2, [r3, #28]
 c008bd8:	68bb      	ldr	r3, [r7, #8]
 c008bda:	4013      	ands	r3, r2
 c008bdc:	68ba      	ldr	r2, [r7, #8]
 c008bde:	429a      	cmp	r2, r3
 c008be0:	bf0c      	ite	eq
 c008be2:	2301      	moveq	r3, #1
 c008be4:	2300      	movne	r3, #0
 c008be6:	b2db      	uxtb	r3, r3
 c008be8:	461a      	mov	r2, r3
 c008bea:	79fb      	ldrb	r3, [r7, #7]
 c008bec:	429a      	cmp	r2, r3
 c008bee:	d08d      	beq.n	c008b0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c008bf0:	2300      	movs	r3, #0
}
 c008bf2:	4618      	mov	r0, r3
 c008bf4:	3710      	adds	r7, #16
 c008bf6:	46bd      	mov	sp, r7
 c008bf8:	bd80      	pop	{r7, pc}

0c008bfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c008bfa:	b480      	push	{r7}
 c008bfc:	b085      	sub	sp, #20
 c008bfe:	af00      	add	r7, sp, #0
 c008c00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c008c02:	687b      	ldr	r3, [r7, #4]
 c008c04:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 c008c08:	2b01      	cmp	r3, #1
 c008c0a:	d101      	bne.n	c008c10 <HAL_UARTEx_DisableFifoMode+0x16>
 c008c0c:	2302      	movs	r3, #2
 c008c0e:	e027      	b.n	c008c60 <HAL_UARTEx_DisableFifoMode+0x66>
 c008c10:	687b      	ldr	r3, [r7, #4]
 c008c12:	2201      	movs	r2, #1
 c008c14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c008c18:	687b      	ldr	r3, [r7, #4]
 c008c1a:	2224      	movs	r2, #36	@ 0x24
 c008c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c008c20:	687b      	ldr	r3, [r7, #4]
 c008c22:	681b      	ldr	r3, [r3, #0]
 c008c24:	681b      	ldr	r3, [r3, #0]
 c008c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c008c28:	687b      	ldr	r3, [r7, #4]
 c008c2a:	681b      	ldr	r3, [r3, #0]
 c008c2c:	681a      	ldr	r2, [r3, #0]
 c008c2e:	687b      	ldr	r3, [r7, #4]
 c008c30:	681b      	ldr	r3, [r3, #0]
 c008c32:	f022 0201 	bic.w	r2, r2, #1
 c008c36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c008c38:	68fb      	ldr	r3, [r7, #12]
 c008c3a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 c008c3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c008c40:	687b      	ldr	r3, [r7, #4]
 c008c42:	2200      	movs	r2, #0
 c008c44:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c008c46:	687b      	ldr	r3, [r7, #4]
 c008c48:	681b      	ldr	r3, [r3, #0]
 c008c4a:	68fa      	ldr	r2, [r7, #12]
 c008c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c008c4e:	687b      	ldr	r3, [r7, #4]
 c008c50:	2220      	movs	r2, #32
 c008c52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c008c56:	687b      	ldr	r3, [r7, #4]
 c008c58:	2200      	movs	r2, #0
 c008c5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 c008c5e:	2300      	movs	r3, #0
}
 c008c60:	4618      	mov	r0, r3
 c008c62:	3714      	adds	r7, #20
 c008c64:	46bd      	mov	sp, r7
 c008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008c6a:	4770      	bx	lr

0c008c6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c008c6c:	b580      	push	{r7, lr}
 c008c6e:	b084      	sub	sp, #16
 c008c70:	af00      	add	r7, sp, #0
 c008c72:	6078      	str	r0, [r7, #4]
 c008c74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c008c76:	687b      	ldr	r3, [r7, #4]
 c008c78:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 c008c7c:	2b01      	cmp	r3, #1
 c008c7e:	d101      	bne.n	c008c84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c008c80:	2302      	movs	r3, #2
 c008c82:	e02d      	b.n	c008ce0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c008c84:	687b      	ldr	r3, [r7, #4]
 c008c86:	2201      	movs	r2, #1
 c008c88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c008c8c:	687b      	ldr	r3, [r7, #4]
 c008c8e:	2224      	movs	r2, #36	@ 0x24
 c008c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c008c94:	687b      	ldr	r3, [r7, #4]
 c008c96:	681b      	ldr	r3, [r3, #0]
 c008c98:	681b      	ldr	r3, [r3, #0]
 c008c9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c008c9c:	687b      	ldr	r3, [r7, #4]
 c008c9e:	681b      	ldr	r3, [r3, #0]
 c008ca0:	681a      	ldr	r2, [r3, #0]
 c008ca2:	687b      	ldr	r3, [r7, #4]
 c008ca4:	681b      	ldr	r3, [r3, #0]
 c008ca6:	f022 0201 	bic.w	r2, r2, #1
 c008caa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c008cac:	687b      	ldr	r3, [r7, #4]
 c008cae:	681b      	ldr	r3, [r3, #0]
 c008cb0:	689b      	ldr	r3, [r3, #8]
 c008cb2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 c008cb6:	687b      	ldr	r3, [r7, #4]
 c008cb8:	681b      	ldr	r3, [r3, #0]
 c008cba:	683a      	ldr	r2, [r7, #0]
 c008cbc:	430a      	orrs	r2, r1
 c008cbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c008cc0:	6878      	ldr	r0, [r7, #4]
 c008cc2:	f000 f84f 	bl	c008d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c008cc6:	687b      	ldr	r3, [r7, #4]
 c008cc8:	681b      	ldr	r3, [r3, #0]
 c008cca:	68fa      	ldr	r2, [r7, #12]
 c008ccc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c008cce:	687b      	ldr	r3, [r7, #4]
 c008cd0:	2220      	movs	r2, #32
 c008cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c008cd6:	687b      	ldr	r3, [r7, #4]
 c008cd8:	2200      	movs	r2, #0
 c008cda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 c008cde:	2300      	movs	r3, #0
}
 c008ce0:	4618      	mov	r0, r3
 c008ce2:	3710      	adds	r7, #16
 c008ce4:	46bd      	mov	sp, r7
 c008ce6:	bd80      	pop	{r7, pc}

0c008ce8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c008ce8:	b580      	push	{r7, lr}
 c008cea:	b084      	sub	sp, #16
 c008cec:	af00      	add	r7, sp, #0
 c008cee:	6078      	str	r0, [r7, #4]
 c008cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c008cf2:	687b      	ldr	r3, [r7, #4]
 c008cf4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 c008cf8:	2b01      	cmp	r3, #1
 c008cfa:	d101      	bne.n	c008d00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c008cfc:	2302      	movs	r3, #2
 c008cfe:	e02d      	b.n	c008d5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c008d00:	687b      	ldr	r3, [r7, #4]
 c008d02:	2201      	movs	r2, #1
 c008d04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c008d08:	687b      	ldr	r3, [r7, #4]
 c008d0a:	2224      	movs	r2, #36	@ 0x24
 c008d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c008d10:	687b      	ldr	r3, [r7, #4]
 c008d12:	681b      	ldr	r3, [r3, #0]
 c008d14:	681b      	ldr	r3, [r3, #0]
 c008d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c008d18:	687b      	ldr	r3, [r7, #4]
 c008d1a:	681b      	ldr	r3, [r3, #0]
 c008d1c:	681a      	ldr	r2, [r3, #0]
 c008d1e:	687b      	ldr	r3, [r7, #4]
 c008d20:	681b      	ldr	r3, [r3, #0]
 c008d22:	f022 0201 	bic.w	r2, r2, #1
 c008d26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c008d28:	687b      	ldr	r3, [r7, #4]
 c008d2a:	681b      	ldr	r3, [r3, #0]
 c008d2c:	689b      	ldr	r3, [r3, #8]
 c008d2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 c008d32:	687b      	ldr	r3, [r7, #4]
 c008d34:	681b      	ldr	r3, [r3, #0]
 c008d36:	683a      	ldr	r2, [r7, #0]
 c008d38:	430a      	orrs	r2, r1
 c008d3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c008d3c:	6878      	ldr	r0, [r7, #4]
 c008d3e:	f000 f811 	bl	c008d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c008d42:	687b      	ldr	r3, [r7, #4]
 c008d44:	681b      	ldr	r3, [r3, #0]
 c008d46:	68fa      	ldr	r2, [r7, #12]
 c008d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c008d4a:	687b      	ldr	r3, [r7, #4]
 c008d4c:	2220      	movs	r2, #32
 c008d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c008d52:	687b      	ldr	r3, [r7, #4]
 c008d54:	2200      	movs	r2, #0
 c008d56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 c008d5a:	2300      	movs	r3, #0
}
 c008d5c:	4618      	mov	r0, r3
 c008d5e:	3710      	adds	r7, #16
 c008d60:	46bd      	mov	sp, r7
 c008d62:	bd80      	pop	{r7, pc}

0c008d64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c008d64:	b480      	push	{r7}
 c008d66:	b085      	sub	sp, #20
 c008d68:	af00      	add	r7, sp, #0
 c008d6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c008d6c:	687b      	ldr	r3, [r7, #4]
 c008d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c008d70:	2b00      	cmp	r3, #0
 c008d72:	d108      	bne.n	c008d86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c008d74:	687b      	ldr	r3, [r7, #4]
 c008d76:	2201      	movs	r2, #1
 c008d78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 c008d7c:	687b      	ldr	r3, [r7, #4]
 c008d7e:	2201      	movs	r2, #1
 c008d80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c008d84:	e031      	b.n	c008dea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c008d86:	2308      	movs	r3, #8
 c008d88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c008d8a:	2308      	movs	r3, #8
 c008d8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c008d8e:	687b      	ldr	r3, [r7, #4]
 c008d90:	681b      	ldr	r3, [r3, #0]
 c008d92:	689b      	ldr	r3, [r3, #8]
 c008d94:	0e5b      	lsrs	r3, r3, #25
 c008d96:	b2db      	uxtb	r3, r3
 c008d98:	f003 0307 	and.w	r3, r3, #7
 c008d9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c008d9e:	687b      	ldr	r3, [r7, #4]
 c008da0:	681b      	ldr	r3, [r3, #0]
 c008da2:	689b      	ldr	r3, [r3, #8]
 c008da4:	0f5b      	lsrs	r3, r3, #29
 c008da6:	b2db      	uxtb	r3, r3
 c008da8:	f003 0307 	and.w	r3, r3, #7
 c008dac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c008dae:	7bbb      	ldrb	r3, [r7, #14]
 c008db0:	7b3a      	ldrb	r2, [r7, #12]
 c008db2:	4911      	ldr	r1, [pc, #68]	@ (c008df8 <UARTEx_SetNbDataToProcess+0x94>)
 c008db4:	5c8a      	ldrb	r2, [r1, r2]
 c008db6:	fb02 f303 	mul.w	r3, r2, r3
 c008dba:	7b3a      	ldrb	r2, [r7, #12]
 c008dbc:	490f      	ldr	r1, [pc, #60]	@ (c008dfc <UARTEx_SetNbDataToProcess+0x98>)
 c008dbe:	5c8a      	ldrb	r2, [r1, r2]
 c008dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 c008dc4:	b29a      	uxth	r2, r3
 c008dc6:	687b      	ldr	r3, [r7, #4]
 c008dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c008dcc:	7bfb      	ldrb	r3, [r7, #15]
 c008dce:	7b7a      	ldrb	r2, [r7, #13]
 c008dd0:	4909      	ldr	r1, [pc, #36]	@ (c008df8 <UARTEx_SetNbDataToProcess+0x94>)
 c008dd2:	5c8a      	ldrb	r2, [r1, r2]
 c008dd4:	fb02 f303 	mul.w	r3, r2, r3
 c008dd8:	7b7a      	ldrb	r2, [r7, #13]
 c008dda:	4908      	ldr	r1, [pc, #32]	@ (c008dfc <UARTEx_SetNbDataToProcess+0x98>)
 c008ddc:	5c8a      	ldrb	r2, [r1, r2]
 c008dde:	fb93 f3f2 	sdiv	r3, r3, r2
 c008de2:	b29a      	uxth	r2, r3
 c008de4:	687b      	ldr	r3, [r7, #4]
 c008de6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 c008dea:	bf00      	nop
 c008dec:	3714      	adds	r7, #20
 c008dee:	46bd      	mov	sp, r7
 c008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008df4:	4770      	bx	lr
 c008df6:	bf00      	nop
 c008df8:	0c009f68 	.word	0x0c009f68
 c008dfc:	0c009f70 	.word	0x0c009f70

0c008e00 <rand>:
 c008e00:	4b16      	ldr	r3, [pc, #88]	@ (c008e5c <rand+0x5c>)
 c008e02:	b510      	push	{r4, lr}
 c008e04:	681c      	ldr	r4, [r3, #0]
 c008e06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 c008e08:	b9b3      	cbnz	r3, c008e38 <rand+0x38>
 c008e0a:	2018      	movs	r0, #24
 c008e0c:	f000 fa2c 	bl	c009268 <malloc>
 c008e10:	4602      	mov	r2, r0
 c008e12:	6320      	str	r0, [r4, #48]	@ 0x30
 c008e14:	b920      	cbnz	r0, c008e20 <rand+0x20>
 c008e16:	4b12      	ldr	r3, [pc, #72]	@ (c008e60 <rand+0x60>)
 c008e18:	2152      	movs	r1, #82	@ 0x52
 c008e1a:	4812      	ldr	r0, [pc, #72]	@ (c008e64 <rand+0x64>)
 c008e1c:	f000 f9bc 	bl	c009198 <__assert_func>
 c008e20:	4911      	ldr	r1, [pc, #68]	@ (c008e68 <rand+0x68>)
 c008e22:	4b12      	ldr	r3, [pc, #72]	@ (c008e6c <rand+0x6c>)
 c008e24:	e9c0 1300 	strd	r1, r3, [r0]
 c008e28:	4b11      	ldr	r3, [pc, #68]	@ (c008e70 <rand+0x70>)
 c008e2a:	2100      	movs	r1, #0
 c008e2c:	6083      	str	r3, [r0, #8]
 c008e2e:	230b      	movs	r3, #11
 c008e30:	8183      	strh	r3, [r0, #12]
 c008e32:	2001      	movs	r0, #1
 c008e34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 c008e38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 c008e3a:	480e      	ldr	r0, [pc, #56]	@ (c008e74 <rand+0x74>)
 c008e3c:	690b      	ldr	r3, [r1, #16]
 c008e3e:	694c      	ldr	r4, [r1, #20]
 c008e40:	4a0d      	ldr	r2, [pc, #52]	@ (c008e78 <rand+0x78>)
 c008e42:	4358      	muls	r0, r3
 c008e44:	fb02 0004 	mla	r0, r2, r4, r0
 c008e48:	fba3 3202 	umull	r3, r2, r3, r2
 c008e4c:	3301      	adds	r3, #1
 c008e4e:	eb40 0002 	adc.w	r0, r0, r2
 c008e52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 c008e56:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 c008e5a:	bd10      	pop	{r4, pc}
 c008e5c:	3000062c 	.word	0x3000062c
 c008e60:	0c009f78 	.word	0x0c009f78
 c008e64:	0c009f8f 	.word	0x0c009f8f
 c008e68:	abcd330e 	.word	0xabcd330e
 c008e6c:	e66d1234 	.word	0xe66d1234
 c008e70:	0005deec 	.word	0x0005deec
 c008e74:	5851f42d 	.word	0x5851f42d
 c008e78:	4c957f2d 	.word	0x4c957f2d

0c008e7c <std>:
 c008e7c:	2300      	movs	r3, #0
 c008e7e:	b510      	push	{r4, lr}
 c008e80:	4604      	mov	r4, r0
 c008e82:	6083      	str	r3, [r0, #8]
 c008e84:	8181      	strh	r1, [r0, #12]
 c008e86:	4619      	mov	r1, r3
 c008e88:	6643      	str	r3, [r0, #100]	@ 0x64
 c008e8a:	81c2      	strh	r2, [r0, #14]
 c008e8c:	2208      	movs	r2, #8
 c008e8e:	6183      	str	r3, [r0, #24]
 c008e90:	e9c0 3300 	strd	r3, r3, [r0]
 c008e94:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c008e98:	305c      	adds	r0, #92	@ 0x5c
 c008e9a:	f000 f8f4 	bl	c009086 <memset>
 c008e9e:	4b0d      	ldr	r3, [pc, #52]	@ (c008ed4 <std+0x58>)
 c008ea0:	6224      	str	r4, [r4, #32]
 c008ea2:	6263      	str	r3, [r4, #36]	@ 0x24
 c008ea4:	4b0c      	ldr	r3, [pc, #48]	@ (c008ed8 <std+0x5c>)
 c008ea6:	62a3      	str	r3, [r4, #40]	@ 0x28
 c008ea8:	4b0c      	ldr	r3, [pc, #48]	@ (c008edc <std+0x60>)
 c008eaa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 c008eac:	4b0c      	ldr	r3, [pc, #48]	@ (c008ee0 <std+0x64>)
 c008eae:	6323      	str	r3, [r4, #48]	@ 0x30
 c008eb0:	4b0c      	ldr	r3, [pc, #48]	@ (c008ee4 <std+0x68>)
 c008eb2:	429c      	cmp	r4, r3
 c008eb4:	d006      	beq.n	c008ec4 <std+0x48>
 c008eb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 c008eba:	4294      	cmp	r4, r2
 c008ebc:	d002      	beq.n	c008ec4 <std+0x48>
 c008ebe:	33d0      	adds	r3, #208	@ 0xd0
 c008ec0:	429c      	cmp	r4, r3
 c008ec2:	d105      	bne.n	c008ed0 <std+0x54>
 c008ec4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 c008ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c008ecc:	f000 b954 	b.w	c009178 <__retarget_lock_init_recursive>
 c008ed0:	bd10      	pop	{r4, pc}
 c008ed2:	bf00      	nop
 c008ed4:	0c009001 	.word	0x0c009001
 c008ed8:	0c009023 	.word	0x0c009023
 c008edc:	0c00905b 	.word	0x0c00905b
 c008ee0:	0c00907f 	.word	0x0c00907f
 c008ee4:	30000b0c 	.word	0x30000b0c

0c008ee8 <stdio_exit_handler>:
 c008ee8:	4a02      	ldr	r2, [pc, #8]	@ (c008ef4 <stdio_exit_handler+0xc>)
 c008eea:	4903      	ldr	r1, [pc, #12]	@ (c008ef8 <stdio_exit_handler+0x10>)
 c008eec:	4803      	ldr	r0, [pc, #12]	@ (c008efc <stdio_exit_handler+0x14>)
 c008eee:	f000 b869 	b.w	c008fc4 <_fwalk_sglue>
 c008ef2:	bf00      	nop
 c008ef4:	30000620 	.word	0x30000620
 c008ef8:	0c009a85 	.word	0x0c009a85
 c008efc:	30000630 	.word	0x30000630

0c008f00 <cleanup_stdio>:
 c008f00:	6841      	ldr	r1, [r0, #4]
 c008f02:	4b0c      	ldr	r3, [pc, #48]	@ (c008f34 <cleanup_stdio+0x34>)
 c008f04:	4299      	cmp	r1, r3
 c008f06:	b510      	push	{r4, lr}
 c008f08:	4604      	mov	r4, r0
 c008f0a:	d001      	beq.n	c008f10 <cleanup_stdio+0x10>
 c008f0c:	f000 fdba 	bl	c009a84 <_fflush_r>
 c008f10:	68a1      	ldr	r1, [r4, #8]
 c008f12:	4b09      	ldr	r3, [pc, #36]	@ (c008f38 <cleanup_stdio+0x38>)
 c008f14:	4299      	cmp	r1, r3
 c008f16:	d002      	beq.n	c008f1e <cleanup_stdio+0x1e>
 c008f18:	4620      	mov	r0, r4
 c008f1a:	f000 fdb3 	bl	c009a84 <_fflush_r>
 c008f1e:	68e1      	ldr	r1, [r4, #12]
 c008f20:	4b06      	ldr	r3, [pc, #24]	@ (c008f3c <cleanup_stdio+0x3c>)
 c008f22:	4299      	cmp	r1, r3
 c008f24:	d004      	beq.n	c008f30 <cleanup_stdio+0x30>
 c008f26:	4620      	mov	r0, r4
 c008f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c008f2c:	f000 bdaa 	b.w	c009a84 <_fflush_r>
 c008f30:	bd10      	pop	{r4, pc}
 c008f32:	bf00      	nop
 c008f34:	30000b0c 	.word	0x30000b0c
 c008f38:	30000b74 	.word	0x30000b74
 c008f3c:	30000bdc 	.word	0x30000bdc

0c008f40 <global_stdio_init.part.0>:
 c008f40:	b510      	push	{r4, lr}
 c008f42:	4b0b      	ldr	r3, [pc, #44]	@ (c008f70 <global_stdio_init.part.0+0x30>)
 c008f44:	2104      	movs	r1, #4
 c008f46:	4c0b      	ldr	r4, [pc, #44]	@ (c008f74 <global_stdio_init.part.0+0x34>)
 c008f48:	4a0b      	ldr	r2, [pc, #44]	@ (c008f78 <global_stdio_init.part.0+0x38>)
 c008f4a:	4620      	mov	r0, r4
 c008f4c:	601a      	str	r2, [r3, #0]
 c008f4e:	2200      	movs	r2, #0
 c008f50:	f7ff ff94 	bl	c008e7c <std>
 c008f54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 c008f58:	2201      	movs	r2, #1
 c008f5a:	2109      	movs	r1, #9
 c008f5c:	f7ff ff8e 	bl	c008e7c <std>
 c008f60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 c008f64:	2202      	movs	r2, #2
 c008f66:	2112      	movs	r1, #18
 c008f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c008f6c:	f7ff bf86 	b.w	c008e7c <std>
 c008f70:	30000c44 	.word	0x30000c44
 c008f74:	30000b0c 	.word	0x30000b0c
 c008f78:	0c008ee9 	.word	0x0c008ee9

0c008f7c <__sfp_lock_acquire>:
 c008f7c:	4801      	ldr	r0, [pc, #4]	@ (c008f84 <__sfp_lock_acquire+0x8>)
 c008f7e:	f000 b8fc 	b.w	c00917a <__retarget_lock_acquire_recursive>
 c008f82:	bf00      	nop
 c008f84:	30000c4d 	.word	0x30000c4d

0c008f88 <__sfp_lock_release>:
 c008f88:	4801      	ldr	r0, [pc, #4]	@ (c008f90 <__sfp_lock_release+0x8>)
 c008f8a:	f000 b8f7 	b.w	c00917c <__retarget_lock_release_recursive>
 c008f8e:	bf00      	nop
 c008f90:	30000c4d 	.word	0x30000c4d

0c008f94 <__sinit>:
 c008f94:	b510      	push	{r4, lr}
 c008f96:	4604      	mov	r4, r0
 c008f98:	f7ff fff0 	bl	c008f7c <__sfp_lock_acquire>
 c008f9c:	6a23      	ldr	r3, [r4, #32]
 c008f9e:	b11b      	cbz	r3, c008fa8 <__sinit+0x14>
 c008fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c008fa4:	f7ff bff0 	b.w	c008f88 <__sfp_lock_release>
 c008fa8:	4b04      	ldr	r3, [pc, #16]	@ (c008fbc <__sinit+0x28>)
 c008faa:	6223      	str	r3, [r4, #32]
 c008fac:	4b04      	ldr	r3, [pc, #16]	@ (c008fc0 <__sinit+0x2c>)
 c008fae:	681b      	ldr	r3, [r3, #0]
 c008fb0:	2b00      	cmp	r3, #0
 c008fb2:	d1f5      	bne.n	c008fa0 <__sinit+0xc>
 c008fb4:	f7ff ffc4 	bl	c008f40 <global_stdio_init.part.0>
 c008fb8:	e7f2      	b.n	c008fa0 <__sinit+0xc>
 c008fba:	bf00      	nop
 c008fbc:	0c008f01 	.word	0x0c008f01
 c008fc0:	30000c44 	.word	0x30000c44

0c008fc4 <_fwalk_sglue>:
 c008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c008fc8:	4607      	mov	r7, r0
 c008fca:	4688      	mov	r8, r1
 c008fcc:	4614      	mov	r4, r2
 c008fce:	2600      	movs	r6, #0
 c008fd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c008fd4:	f1b9 0901 	subs.w	r9, r9, #1
 c008fd8:	d505      	bpl.n	c008fe6 <_fwalk_sglue+0x22>
 c008fda:	6824      	ldr	r4, [r4, #0]
 c008fdc:	2c00      	cmp	r4, #0
 c008fde:	d1f7      	bne.n	c008fd0 <_fwalk_sglue+0xc>
 c008fe0:	4630      	mov	r0, r6
 c008fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c008fe6:	89ab      	ldrh	r3, [r5, #12]
 c008fe8:	2b01      	cmp	r3, #1
 c008fea:	d907      	bls.n	c008ffc <_fwalk_sglue+0x38>
 c008fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c008ff0:	3301      	adds	r3, #1
 c008ff2:	d003      	beq.n	c008ffc <_fwalk_sglue+0x38>
 c008ff4:	4629      	mov	r1, r5
 c008ff6:	4638      	mov	r0, r7
 c008ff8:	47c0      	blx	r8
 c008ffa:	4306      	orrs	r6, r0
 c008ffc:	3568      	adds	r5, #104	@ 0x68
 c008ffe:	e7e9      	b.n	c008fd4 <_fwalk_sglue+0x10>

0c009000 <__sread>:
 c009000:	b510      	push	{r4, lr}
 c009002:	460c      	mov	r4, r1
 c009004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c009008:	f000 f868 	bl	c0090dc <_read_r>
 c00900c:	2800      	cmp	r0, #0
 c00900e:	bfab      	itete	ge
 c009010:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 c009012:	89a3      	ldrhlt	r3, [r4, #12]
 c009014:	181b      	addge	r3, r3, r0
 c009016:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 c00901a:	bfac      	ite	ge
 c00901c:	6563      	strge	r3, [r4, #84]	@ 0x54
 c00901e:	81a3      	strhlt	r3, [r4, #12]
 c009020:	bd10      	pop	{r4, pc}

0c009022 <__swrite>:
 c009022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c009026:	461f      	mov	r7, r3
 c009028:	898b      	ldrh	r3, [r1, #12]
 c00902a:	4605      	mov	r5, r0
 c00902c:	460c      	mov	r4, r1
 c00902e:	05db      	lsls	r3, r3, #23
 c009030:	4616      	mov	r6, r2
 c009032:	d505      	bpl.n	c009040 <__swrite+0x1e>
 c009034:	2302      	movs	r3, #2
 c009036:	2200      	movs	r2, #0
 c009038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00903c:	f000 f83c 	bl	c0090b8 <_lseek_r>
 c009040:	89a3      	ldrh	r3, [r4, #12]
 c009042:	4632      	mov	r2, r6
 c009044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c009048:	4628      	mov	r0, r5
 c00904a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 c00904e:	81a3      	strh	r3, [r4, #12]
 c009050:	463b      	mov	r3, r7
 c009052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c009056:	f000 b853 	b.w	c009100 <_write_r>

0c00905a <__sseek>:
 c00905a:	b510      	push	{r4, lr}
 c00905c:	460c      	mov	r4, r1
 c00905e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c009062:	f000 f829 	bl	c0090b8 <_lseek_r>
 c009066:	1c43      	adds	r3, r0, #1
 c009068:	89a3      	ldrh	r3, [r4, #12]
 c00906a:	bf15      	itete	ne
 c00906c:	6560      	strne	r0, [r4, #84]	@ 0x54
 c00906e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 c009072:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 c009076:	81a3      	strheq	r3, [r4, #12]
 c009078:	bf18      	it	ne
 c00907a:	81a3      	strhne	r3, [r4, #12]
 c00907c:	bd10      	pop	{r4, pc}

0c00907e <__sclose>:
 c00907e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c009082:	f000 b809 	b.w	c009098 <_close_r>

0c009086 <memset>:
 c009086:	4402      	add	r2, r0
 c009088:	4603      	mov	r3, r0
 c00908a:	4293      	cmp	r3, r2
 c00908c:	d100      	bne.n	c009090 <memset+0xa>
 c00908e:	4770      	bx	lr
 c009090:	f803 1b01 	strb.w	r1, [r3], #1
 c009094:	e7f9      	b.n	c00908a <memset+0x4>
	...

0c009098 <_close_r>:
 c009098:	b538      	push	{r3, r4, r5, lr}
 c00909a:	2300      	movs	r3, #0
 c00909c:	4d05      	ldr	r5, [pc, #20]	@ (c0090b4 <_close_r+0x1c>)
 c00909e:	4604      	mov	r4, r0
 c0090a0:	4608      	mov	r0, r1
 c0090a2:	602b      	str	r3, [r5, #0]
 c0090a4:	f7f9 ff0d 	bl	c002ec2 <_close>
 c0090a8:	1c43      	adds	r3, r0, #1
 c0090aa:	d102      	bne.n	c0090b2 <_close_r+0x1a>
 c0090ac:	682b      	ldr	r3, [r5, #0]
 c0090ae:	b103      	cbz	r3, c0090b2 <_close_r+0x1a>
 c0090b0:	6023      	str	r3, [r4, #0]
 c0090b2:	bd38      	pop	{r3, r4, r5, pc}
 c0090b4:	30000c48 	.word	0x30000c48

0c0090b8 <_lseek_r>:
 c0090b8:	b538      	push	{r3, r4, r5, lr}
 c0090ba:	4604      	mov	r4, r0
 c0090bc:	4d06      	ldr	r5, [pc, #24]	@ (c0090d8 <_lseek_r+0x20>)
 c0090be:	4608      	mov	r0, r1
 c0090c0:	4611      	mov	r1, r2
 c0090c2:	2200      	movs	r2, #0
 c0090c4:	602a      	str	r2, [r5, #0]
 c0090c6:	461a      	mov	r2, r3
 c0090c8:	f7f9 ff22 	bl	c002f10 <_lseek>
 c0090cc:	1c43      	adds	r3, r0, #1
 c0090ce:	d102      	bne.n	c0090d6 <_lseek_r+0x1e>
 c0090d0:	682b      	ldr	r3, [r5, #0]
 c0090d2:	b103      	cbz	r3, c0090d6 <_lseek_r+0x1e>
 c0090d4:	6023      	str	r3, [r4, #0]
 c0090d6:	bd38      	pop	{r3, r4, r5, pc}
 c0090d8:	30000c48 	.word	0x30000c48

0c0090dc <_read_r>:
 c0090dc:	b538      	push	{r3, r4, r5, lr}
 c0090de:	4604      	mov	r4, r0
 c0090e0:	4d06      	ldr	r5, [pc, #24]	@ (c0090fc <_read_r+0x20>)
 c0090e2:	4608      	mov	r0, r1
 c0090e4:	4611      	mov	r1, r2
 c0090e6:	2200      	movs	r2, #0
 c0090e8:	602a      	str	r2, [r5, #0]
 c0090ea:	461a      	mov	r2, r3
 c0090ec:	f7f9 feb0 	bl	c002e50 <_read>
 c0090f0:	1c43      	adds	r3, r0, #1
 c0090f2:	d102      	bne.n	c0090fa <_read_r+0x1e>
 c0090f4:	682b      	ldr	r3, [r5, #0]
 c0090f6:	b103      	cbz	r3, c0090fa <_read_r+0x1e>
 c0090f8:	6023      	str	r3, [r4, #0]
 c0090fa:	bd38      	pop	{r3, r4, r5, pc}
 c0090fc:	30000c48 	.word	0x30000c48

0c009100 <_write_r>:
 c009100:	b538      	push	{r3, r4, r5, lr}
 c009102:	4604      	mov	r4, r0
 c009104:	4d06      	ldr	r5, [pc, #24]	@ (c009120 <_write_r+0x20>)
 c009106:	4608      	mov	r0, r1
 c009108:	4611      	mov	r1, r2
 c00910a:	2200      	movs	r2, #0
 c00910c:	602a      	str	r2, [r5, #0]
 c00910e:	461a      	mov	r2, r3
 c009110:	f7f9 febb 	bl	c002e8a <_write>
 c009114:	1c43      	adds	r3, r0, #1
 c009116:	d102      	bne.n	c00911e <_write_r+0x1e>
 c009118:	682b      	ldr	r3, [r5, #0]
 c00911a:	b103      	cbz	r3, c00911e <_write_r+0x1e>
 c00911c:	6023      	str	r3, [r4, #0]
 c00911e:	bd38      	pop	{r3, r4, r5, pc}
 c009120:	30000c48 	.word	0x30000c48

0c009124 <__errno>:
 c009124:	4b01      	ldr	r3, [pc, #4]	@ (c00912c <__errno+0x8>)
 c009126:	6818      	ldr	r0, [r3, #0]
 c009128:	4770      	bx	lr
 c00912a:	bf00      	nop
 c00912c:	3000062c 	.word	0x3000062c

0c009130 <__libc_init_array>:
 c009130:	b570      	push	{r4, r5, r6, lr}
 c009132:	4d0d      	ldr	r5, [pc, #52]	@ (c009168 <__libc_init_array+0x38>)
 c009134:	2600      	movs	r6, #0
 c009136:	4c0d      	ldr	r4, [pc, #52]	@ (c00916c <__libc_init_array+0x3c>)
 c009138:	1b64      	subs	r4, r4, r5
 c00913a:	10a4      	asrs	r4, r4, #2
 c00913c:	42a6      	cmp	r6, r4
 c00913e:	d109      	bne.n	c009154 <__libc_init_array+0x24>
 c009140:	4d0b      	ldr	r5, [pc, #44]	@ (c009170 <__libc_init_array+0x40>)
 c009142:	2600      	movs	r6, #0
 c009144:	4c0b      	ldr	r4, [pc, #44]	@ (c009174 <__libc_init_array+0x44>)
 c009146:	f000 fe57 	bl	c009df8 <_init>
 c00914a:	1b64      	subs	r4, r4, r5
 c00914c:	10a4      	asrs	r4, r4, #2
 c00914e:	42a6      	cmp	r6, r4
 c009150:	d105      	bne.n	c00915e <__libc_init_array+0x2e>
 c009152:	bd70      	pop	{r4, r5, r6, pc}
 c009154:	f855 3b04 	ldr.w	r3, [r5], #4
 c009158:	3601      	adds	r6, #1
 c00915a:	4798      	blx	r3
 c00915c:	e7ee      	b.n	c00913c <__libc_init_array+0xc>
 c00915e:	f855 3b04 	ldr.w	r3, [r5], #4
 c009162:	3601      	adds	r6, #1
 c009164:	4798      	blx	r3
 c009166:	e7f2      	b.n	c00914e <__libc_init_array+0x1e>
 c009168:	0c00a060 	.word	0x0c00a060
 c00916c:	0c00a060 	.word	0x0c00a060
 c009170:	0c00a060 	.word	0x0c00a060
 c009174:	0c00a064 	.word	0x0c00a064

0c009178 <__retarget_lock_init_recursive>:
 c009178:	4770      	bx	lr

0c00917a <__retarget_lock_acquire_recursive>:
 c00917a:	4770      	bx	lr

0c00917c <__retarget_lock_release_recursive>:
 c00917c:	4770      	bx	lr

0c00917e <memcpy>:
 c00917e:	440a      	add	r2, r1
 c009180:	1e43      	subs	r3, r0, #1
 c009182:	4291      	cmp	r1, r2
 c009184:	d100      	bne.n	c009188 <memcpy+0xa>
 c009186:	4770      	bx	lr
 c009188:	b510      	push	{r4, lr}
 c00918a:	f811 4b01 	ldrb.w	r4, [r1], #1
 c00918e:	4291      	cmp	r1, r2
 c009190:	f803 4f01 	strb.w	r4, [r3, #1]!
 c009194:	d1f9      	bne.n	c00918a <memcpy+0xc>
 c009196:	bd10      	pop	{r4, pc}

0c009198 <__assert_func>:
 c009198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 c00919a:	4614      	mov	r4, r2
 c00919c:	461a      	mov	r2, r3
 c00919e:	4b09      	ldr	r3, [pc, #36]	@ (c0091c4 <__assert_func+0x2c>)
 c0091a0:	4605      	mov	r5, r0
 c0091a2:	681b      	ldr	r3, [r3, #0]
 c0091a4:	68d8      	ldr	r0, [r3, #12]
 c0091a6:	b954      	cbnz	r4, c0091be <__assert_func+0x26>
 c0091a8:	4b07      	ldr	r3, [pc, #28]	@ (c0091c8 <__assert_func+0x30>)
 c0091aa:	461c      	mov	r4, r3
 c0091ac:	9100      	str	r1, [sp, #0]
 c0091ae:	4907      	ldr	r1, [pc, #28]	@ (c0091cc <__assert_func+0x34>)
 c0091b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 c0091b4:	462b      	mov	r3, r5
 c0091b6:	f000 fc8d 	bl	c009ad4 <fiprintf>
 c0091ba:	f000 fd4f 	bl	c009c5c <abort>
 c0091be:	4b04      	ldr	r3, [pc, #16]	@ (c0091d0 <__assert_func+0x38>)
 c0091c0:	e7f4      	b.n	c0091ac <__assert_func+0x14>
 c0091c2:	bf00      	nop
 c0091c4:	3000062c 	.word	0x3000062c
 c0091c8:	0c00a022 	.word	0x0c00a022
 c0091cc:	0c009ff4 	.word	0x0c009ff4
 c0091d0:	0c009fe7 	.word	0x0c009fe7

0c0091d4 <_free_r>:
 c0091d4:	b538      	push	{r3, r4, r5, lr}
 c0091d6:	4605      	mov	r5, r0
 c0091d8:	2900      	cmp	r1, #0
 c0091da:	d041      	beq.n	c009260 <_free_r+0x8c>
 c0091dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c0091e0:	1f0c      	subs	r4, r1, #4
 c0091e2:	2b00      	cmp	r3, #0
 c0091e4:	bfb8      	it	lt
 c0091e6:	18e4      	addlt	r4, r4, r3
 c0091e8:	f000 f8e8 	bl	c0093bc <__malloc_lock>
 c0091ec:	4a1d      	ldr	r2, [pc, #116]	@ (c009264 <_free_r+0x90>)
 c0091ee:	6813      	ldr	r3, [r2, #0]
 c0091f0:	b933      	cbnz	r3, c009200 <_free_r+0x2c>
 c0091f2:	6063      	str	r3, [r4, #4]
 c0091f4:	6014      	str	r4, [r2, #0]
 c0091f6:	4628      	mov	r0, r5
 c0091f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c0091fc:	f000 b8e4 	b.w	c0093c8 <__malloc_unlock>
 c009200:	42a3      	cmp	r3, r4
 c009202:	d908      	bls.n	c009216 <_free_r+0x42>
 c009204:	6820      	ldr	r0, [r4, #0]
 c009206:	1821      	adds	r1, r4, r0
 c009208:	428b      	cmp	r3, r1
 c00920a:	bf01      	itttt	eq
 c00920c:	6819      	ldreq	r1, [r3, #0]
 c00920e:	685b      	ldreq	r3, [r3, #4]
 c009210:	1809      	addeq	r1, r1, r0
 c009212:	6021      	streq	r1, [r4, #0]
 c009214:	e7ed      	b.n	c0091f2 <_free_r+0x1e>
 c009216:	461a      	mov	r2, r3
 c009218:	685b      	ldr	r3, [r3, #4]
 c00921a:	b10b      	cbz	r3, c009220 <_free_r+0x4c>
 c00921c:	42a3      	cmp	r3, r4
 c00921e:	d9fa      	bls.n	c009216 <_free_r+0x42>
 c009220:	6811      	ldr	r1, [r2, #0]
 c009222:	1850      	adds	r0, r2, r1
 c009224:	42a0      	cmp	r0, r4
 c009226:	d10b      	bne.n	c009240 <_free_r+0x6c>
 c009228:	6820      	ldr	r0, [r4, #0]
 c00922a:	4401      	add	r1, r0
 c00922c:	1850      	adds	r0, r2, r1
 c00922e:	6011      	str	r1, [r2, #0]
 c009230:	4283      	cmp	r3, r0
 c009232:	d1e0      	bne.n	c0091f6 <_free_r+0x22>
 c009234:	6818      	ldr	r0, [r3, #0]
 c009236:	685b      	ldr	r3, [r3, #4]
 c009238:	4408      	add	r0, r1
 c00923a:	6053      	str	r3, [r2, #4]
 c00923c:	6010      	str	r0, [r2, #0]
 c00923e:	e7da      	b.n	c0091f6 <_free_r+0x22>
 c009240:	d902      	bls.n	c009248 <_free_r+0x74>
 c009242:	230c      	movs	r3, #12
 c009244:	602b      	str	r3, [r5, #0]
 c009246:	e7d6      	b.n	c0091f6 <_free_r+0x22>
 c009248:	6820      	ldr	r0, [r4, #0]
 c00924a:	1821      	adds	r1, r4, r0
 c00924c:	428b      	cmp	r3, r1
 c00924e:	bf02      	ittt	eq
 c009250:	6819      	ldreq	r1, [r3, #0]
 c009252:	685b      	ldreq	r3, [r3, #4]
 c009254:	1809      	addeq	r1, r1, r0
 c009256:	6063      	str	r3, [r4, #4]
 c009258:	bf08      	it	eq
 c00925a:	6021      	streq	r1, [r4, #0]
 c00925c:	6054      	str	r4, [r2, #4]
 c00925e:	e7ca      	b.n	c0091f6 <_free_r+0x22>
 c009260:	bd38      	pop	{r3, r4, r5, pc}
 c009262:	bf00      	nop
 c009264:	30000c54 	.word	0x30000c54

0c009268 <malloc>:
 c009268:	4b02      	ldr	r3, [pc, #8]	@ (c009274 <malloc+0xc>)
 c00926a:	4601      	mov	r1, r0
 c00926c:	6818      	ldr	r0, [r3, #0]
 c00926e:	f000 b825 	b.w	c0092bc <_malloc_r>
 c009272:	bf00      	nop
 c009274:	3000062c 	.word	0x3000062c

0c009278 <sbrk_aligned>:
 c009278:	b570      	push	{r4, r5, r6, lr}
 c00927a:	4e0f      	ldr	r6, [pc, #60]	@ (c0092b8 <sbrk_aligned+0x40>)
 c00927c:	460c      	mov	r4, r1
 c00927e:	4605      	mov	r5, r0
 c009280:	6831      	ldr	r1, [r6, #0]
 c009282:	b911      	cbnz	r1, c00928a <sbrk_aligned+0x12>
 c009284:	f000 fccc 	bl	c009c20 <_sbrk_r>
 c009288:	6030      	str	r0, [r6, #0]
 c00928a:	4621      	mov	r1, r4
 c00928c:	4628      	mov	r0, r5
 c00928e:	f000 fcc7 	bl	c009c20 <_sbrk_r>
 c009292:	1c43      	adds	r3, r0, #1
 c009294:	d103      	bne.n	c00929e <sbrk_aligned+0x26>
 c009296:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 c00929a:	4620      	mov	r0, r4
 c00929c:	bd70      	pop	{r4, r5, r6, pc}
 c00929e:	1cc4      	adds	r4, r0, #3
 c0092a0:	f024 0403 	bic.w	r4, r4, #3
 c0092a4:	42a0      	cmp	r0, r4
 c0092a6:	d0f8      	beq.n	c00929a <sbrk_aligned+0x22>
 c0092a8:	1a21      	subs	r1, r4, r0
 c0092aa:	4628      	mov	r0, r5
 c0092ac:	f000 fcb8 	bl	c009c20 <_sbrk_r>
 c0092b0:	3001      	adds	r0, #1
 c0092b2:	d1f2      	bne.n	c00929a <sbrk_aligned+0x22>
 c0092b4:	e7ef      	b.n	c009296 <sbrk_aligned+0x1e>
 c0092b6:	bf00      	nop
 c0092b8:	30000c50 	.word	0x30000c50

0c0092bc <_malloc_r>:
 c0092bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0092c0:	1ccd      	adds	r5, r1, #3
 c0092c2:	4606      	mov	r6, r0
 c0092c4:	f025 0503 	bic.w	r5, r5, #3
 c0092c8:	3508      	adds	r5, #8
 c0092ca:	2d0c      	cmp	r5, #12
 c0092cc:	bf38      	it	cc
 c0092ce:	250c      	movcc	r5, #12
 c0092d0:	2d00      	cmp	r5, #0
 c0092d2:	db01      	blt.n	c0092d8 <_malloc_r+0x1c>
 c0092d4:	42a9      	cmp	r1, r5
 c0092d6:	d904      	bls.n	c0092e2 <_malloc_r+0x26>
 c0092d8:	230c      	movs	r3, #12
 c0092da:	6033      	str	r3, [r6, #0]
 c0092dc:	2000      	movs	r0, #0
 c0092de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c0092e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ c0093b8 <_malloc_r+0xfc>
 c0092e6:	f000 f869 	bl	c0093bc <__malloc_lock>
 c0092ea:	f8d8 3000 	ldr.w	r3, [r8]
 c0092ee:	461c      	mov	r4, r3
 c0092f0:	bb44      	cbnz	r4, c009344 <_malloc_r+0x88>
 c0092f2:	4629      	mov	r1, r5
 c0092f4:	4630      	mov	r0, r6
 c0092f6:	f7ff ffbf 	bl	c009278 <sbrk_aligned>
 c0092fa:	1c43      	adds	r3, r0, #1
 c0092fc:	4604      	mov	r4, r0
 c0092fe:	d158      	bne.n	c0093b2 <_malloc_r+0xf6>
 c009300:	f8d8 4000 	ldr.w	r4, [r8]
 c009304:	4627      	mov	r7, r4
 c009306:	2f00      	cmp	r7, #0
 c009308:	d143      	bne.n	c009392 <_malloc_r+0xd6>
 c00930a:	2c00      	cmp	r4, #0
 c00930c:	d04b      	beq.n	c0093a6 <_malloc_r+0xea>
 c00930e:	6823      	ldr	r3, [r4, #0]
 c009310:	4639      	mov	r1, r7
 c009312:	4630      	mov	r0, r6
 c009314:	eb04 0903 	add.w	r9, r4, r3
 c009318:	f000 fc82 	bl	c009c20 <_sbrk_r>
 c00931c:	4581      	cmp	r9, r0
 c00931e:	d142      	bne.n	c0093a6 <_malloc_r+0xea>
 c009320:	6821      	ldr	r1, [r4, #0]
 c009322:	4630      	mov	r0, r6
 c009324:	1a6d      	subs	r5, r5, r1
 c009326:	4629      	mov	r1, r5
 c009328:	f7ff ffa6 	bl	c009278 <sbrk_aligned>
 c00932c:	3001      	adds	r0, #1
 c00932e:	d03a      	beq.n	c0093a6 <_malloc_r+0xea>
 c009330:	6823      	ldr	r3, [r4, #0]
 c009332:	442b      	add	r3, r5
 c009334:	6023      	str	r3, [r4, #0]
 c009336:	f8d8 3000 	ldr.w	r3, [r8]
 c00933a:	685a      	ldr	r2, [r3, #4]
 c00933c:	bb62      	cbnz	r2, c009398 <_malloc_r+0xdc>
 c00933e:	f8c8 7000 	str.w	r7, [r8]
 c009342:	e00f      	b.n	c009364 <_malloc_r+0xa8>
 c009344:	6822      	ldr	r2, [r4, #0]
 c009346:	1b52      	subs	r2, r2, r5
 c009348:	d420      	bmi.n	c00938c <_malloc_r+0xd0>
 c00934a:	2a0b      	cmp	r2, #11
 c00934c:	d917      	bls.n	c00937e <_malloc_r+0xc2>
 c00934e:	1961      	adds	r1, r4, r5
 c009350:	42a3      	cmp	r3, r4
 c009352:	6025      	str	r5, [r4, #0]
 c009354:	bf18      	it	ne
 c009356:	6059      	strne	r1, [r3, #4]
 c009358:	6863      	ldr	r3, [r4, #4]
 c00935a:	bf08      	it	eq
 c00935c:	f8c8 1000 	streq.w	r1, [r8]
 c009360:	5162      	str	r2, [r4, r5]
 c009362:	604b      	str	r3, [r1, #4]
 c009364:	4630      	mov	r0, r6
 c009366:	f000 f82f 	bl	c0093c8 <__malloc_unlock>
 c00936a:	f104 000b 	add.w	r0, r4, #11
 c00936e:	1d23      	adds	r3, r4, #4
 c009370:	f020 0007 	bic.w	r0, r0, #7
 c009374:	1ac2      	subs	r2, r0, r3
 c009376:	bf1c      	itt	ne
 c009378:	1a1b      	subne	r3, r3, r0
 c00937a:	50a3      	strne	r3, [r4, r2]
 c00937c:	e7af      	b.n	c0092de <_malloc_r+0x22>
 c00937e:	6862      	ldr	r2, [r4, #4]
 c009380:	42a3      	cmp	r3, r4
 c009382:	bf0c      	ite	eq
 c009384:	f8c8 2000 	streq.w	r2, [r8]
 c009388:	605a      	strne	r2, [r3, #4]
 c00938a:	e7eb      	b.n	c009364 <_malloc_r+0xa8>
 c00938c:	4623      	mov	r3, r4
 c00938e:	6864      	ldr	r4, [r4, #4]
 c009390:	e7ae      	b.n	c0092f0 <_malloc_r+0x34>
 c009392:	463c      	mov	r4, r7
 c009394:	687f      	ldr	r7, [r7, #4]
 c009396:	e7b6      	b.n	c009306 <_malloc_r+0x4a>
 c009398:	461a      	mov	r2, r3
 c00939a:	685b      	ldr	r3, [r3, #4]
 c00939c:	42a3      	cmp	r3, r4
 c00939e:	d1fb      	bne.n	c009398 <_malloc_r+0xdc>
 c0093a0:	2300      	movs	r3, #0
 c0093a2:	6053      	str	r3, [r2, #4]
 c0093a4:	e7de      	b.n	c009364 <_malloc_r+0xa8>
 c0093a6:	230c      	movs	r3, #12
 c0093a8:	4630      	mov	r0, r6
 c0093aa:	6033      	str	r3, [r6, #0]
 c0093ac:	f000 f80c 	bl	c0093c8 <__malloc_unlock>
 c0093b0:	e794      	b.n	c0092dc <_malloc_r+0x20>
 c0093b2:	6005      	str	r5, [r0, #0]
 c0093b4:	e7d6      	b.n	c009364 <_malloc_r+0xa8>
 c0093b6:	bf00      	nop
 c0093b8:	30000c54 	.word	0x30000c54

0c0093bc <__malloc_lock>:
 c0093bc:	4801      	ldr	r0, [pc, #4]	@ (c0093c4 <__malloc_lock+0x8>)
 c0093be:	f7ff bedc 	b.w	c00917a <__retarget_lock_acquire_recursive>
 c0093c2:	bf00      	nop
 c0093c4:	30000c4c 	.word	0x30000c4c

0c0093c8 <__malloc_unlock>:
 c0093c8:	4801      	ldr	r0, [pc, #4]	@ (c0093d0 <__malloc_unlock+0x8>)
 c0093ca:	f7ff bed7 	b.w	c00917c <__retarget_lock_release_recursive>
 c0093ce:	bf00      	nop
 c0093d0:	30000c4c 	.word	0x30000c4c

0c0093d4 <__sfputc_r>:
 c0093d4:	6893      	ldr	r3, [r2, #8]
 c0093d6:	3b01      	subs	r3, #1
 c0093d8:	2b00      	cmp	r3, #0
 c0093da:	6093      	str	r3, [r2, #8]
 c0093dc:	b410      	push	{r4}
 c0093de:	da08      	bge.n	c0093f2 <__sfputc_r+0x1e>
 c0093e0:	6994      	ldr	r4, [r2, #24]
 c0093e2:	42a3      	cmp	r3, r4
 c0093e4:	db01      	blt.n	c0093ea <__sfputc_r+0x16>
 c0093e6:	290a      	cmp	r1, #10
 c0093e8:	d103      	bne.n	c0093f2 <__sfputc_r+0x1e>
 c0093ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 c0093ee:	f000 bb83 	b.w	c009af8 <__swbuf_r>
 c0093f2:	6813      	ldr	r3, [r2, #0]
 c0093f4:	1c58      	adds	r0, r3, #1
 c0093f6:	6010      	str	r0, [r2, #0]
 c0093f8:	4608      	mov	r0, r1
 c0093fa:	7019      	strb	r1, [r3, #0]
 c0093fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 c009400:	4770      	bx	lr

0c009402 <__sfputs_r>:
 c009402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009404:	4606      	mov	r6, r0
 c009406:	460f      	mov	r7, r1
 c009408:	4614      	mov	r4, r2
 c00940a:	18d5      	adds	r5, r2, r3
 c00940c:	42ac      	cmp	r4, r5
 c00940e:	d101      	bne.n	c009414 <__sfputs_r+0x12>
 c009410:	2000      	movs	r0, #0
 c009412:	e007      	b.n	c009424 <__sfputs_r+0x22>
 c009414:	463a      	mov	r2, r7
 c009416:	f814 1b01 	ldrb.w	r1, [r4], #1
 c00941a:	4630      	mov	r0, r6
 c00941c:	f7ff ffda 	bl	c0093d4 <__sfputc_r>
 c009420:	1c43      	adds	r3, r0, #1
 c009422:	d1f3      	bne.n	c00940c <__sfputs_r+0xa>
 c009424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c009428 <_vfiprintf_r>:
 c009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00942c:	460d      	mov	r5, r1
 c00942e:	b09d      	sub	sp, #116	@ 0x74
 c009430:	4614      	mov	r4, r2
 c009432:	4698      	mov	r8, r3
 c009434:	4606      	mov	r6, r0
 c009436:	b118      	cbz	r0, c009440 <_vfiprintf_r+0x18>
 c009438:	6a03      	ldr	r3, [r0, #32]
 c00943a:	b90b      	cbnz	r3, c009440 <_vfiprintf_r+0x18>
 c00943c:	f7ff fdaa 	bl	c008f94 <__sinit>
 c009440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 c009442:	07d9      	lsls	r1, r3, #31
 c009444:	d405      	bmi.n	c009452 <_vfiprintf_r+0x2a>
 c009446:	89ab      	ldrh	r3, [r5, #12]
 c009448:	059a      	lsls	r2, r3, #22
 c00944a:	d402      	bmi.n	c009452 <_vfiprintf_r+0x2a>
 c00944c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 c00944e:	f7ff fe94 	bl	c00917a <__retarget_lock_acquire_recursive>
 c009452:	89ab      	ldrh	r3, [r5, #12]
 c009454:	071b      	lsls	r3, r3, #28
 c009456:	d501      	bpl.n	c00945c <_vfiprintf_r+0x34>
 c009458:	692b      	ldr	r3, [r5, #16]
 c00945a:	b99b      	cbnz	r3, c009484 <_vfiprintf_r+0x5c>
 c00945c:	4629      	mov	r1, r5
 c00945e:	4630      	mov	r0, r6
 c009460:	f000 fb88 	bl	c009b74 <__swsetup_r>
 c009464:	b170      	cbz	r0, c009484 <_vfiprintf_r+0x5c>
 c009466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 c009468:	07dc      	lsls	r4, r3, #31
 c00946a:	d504      	bpl.n	c009476 <_vfiprintf_r+0x4e>
 c00946c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c009470:	b01d      	add	sp, #116	@ 0x74
 c009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c009476:	89ab      	ldrh	r3, [r5, #12]
 c009478:	0598      	lsls	r0, r3, #22
 c00947a:	d4f7      	bmi.n	c00946c <_vfiprintf_r+0x44>
 c00947c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 c00947e:	f7ff fe7d 	bl	c00917c <__retarget_lock_release_recursive>
 c009482:	e7f3      	b.n	c00946c <_vfiprintf_r+0x44>
 c009484:	2300      	movs	r3, #0
 c009486:	f8cd 800c 	str.w	r8, [sp, #12]
 c00948a:	f04f 0901 	mov.w	r9, #1
 c00948e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ c009644 <_vfiprintf_r+0x21c>
 c009492:	9309      	str	r3, [sp, #36]	@ 0x24
 c009494:	2320      	movs	r3, #32
 c009496:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 c00949a:	2330      	movs	r3, #48	@ 0x30
 c00949c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 c0094a0:	4623      	mov	r3, r4
 c0094a2:	469a      	mov	sl, r3
 c0094a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 c0094a8:	b10a      	cbz	r2, c0094ae <_vfiprintf_r+0x86>
 c0094aa:	2a25      	cmp	r2, #37	@ 0x25
 c0094ac:	d1f9      	bne.n	c0094a2 <_vfiprintf_r+0x7a>
 c0094ae:	ebba 0b04 	subs.w	fp, sl, r4
 c0094b2:	d00b      	beq.n	c0094cc <_vfiprintf_r+0xa4>
 c0094b4:	465b      	mov	r3, fp
 c0094b6:	4622      	mov	r2, r4
 c0094b8:	4629      	mov	r1, r5
 c0094ba:	4630      	mov	r0, r6
 c0094bc:	f7ff ffa1 	bl	c009402 <__sfputs_r>
 c0094c0:	3001      	adds	r0, #1
 c0094c2:	f000 80a7 	beq.w	c009614 <_vfiprintf_r+0x1ec>
 c0094c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 c0094c8:	445a      	add	r2, fp
 c0094ca:	9209      	str	r2, [sp, #36]	@ 0x24
 c0094cc:	f89a 3000 	ldrb.w	r3, [sl]
 c0094d0:	2b00      	cmp	r3, #0
 c0094d2:	f000 809f 	beq.w	c009614 <_vfiprintf_r+0x1ec>
 c0094d6:	2300      	movs	r3, #0
 c0094d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0094dc:	f10a 0a01 	add.w	sl, sl, #1
 c0094e0:	9304      	str	r3, [sp, #16]
 c0094e2:	9307      	str	r3, [sp, #28]
 c0094e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 c0094e8:	931a      	str	r3, [sp, #104]	@ 0x68
 c0094ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c0094ee:	4654      	mov	r4, sl
 c0094f0:	2205      	movs	r2, #5
 c0094f2:	4854      	ldr	r0, [pc, #336]	@ (c009644 <_vfiprintf_r+0x21c>)
 c0094f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0094f8:	f000 fba2 	bl	c009c40 <memchr>
 c0094fc:	9a04      	ldr	r2, [sp, #16]
 c0094fe:	b9d8      	cbnz	r0, c009538 <_vfiprintf_r+0x110>
 c009500:	06d1      	lsls	r1, r2, #27
 c009502:	bf44      	itt	mi
 c009504:	2320      	movmi	r3, #32
 c009506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 c00950a:	0713      	lsls	r3, r2, #28
 c00950c:	bf44      	itt	mi
 c00950e:	232b      	movmi	r3, #43	@ 0x2b
 c009510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 c009514:	f89a 3000 	ldrb.w	r3, [sl]
 c009518:	2b2a      	cmp	r3, #42	@ 0x2a
 c00951a:	d015      	beq.n	c009548 <_vfiprintf_r+0x120>
 c00951c:	9a07      	ldr	r2, [sp, #28]
 c00951e:	4654      	mov	r4, sl
 c009520:	2000      	movs	r0, #0
 c009522:	f04f 0c0a 	mov.w	ip, #10
 c009526:	4621      	mov	r1, r4
 c009528:	f811 3b01 	ldrb.w	r3, [r1], #1
 c00952c:	3b30      	subs	r3, #48	@ 0x30
 c00952e:	2b09      	cmp	r3, #9
 c009530:	d94b      	bls.n	c0095ca <_vfiprintf_r+0x1a2>
 c009532:	b1b0      	cbz	r0, c009562 <_vfiprintf_r+0x13a>
 c009534:	9207      	str	r2, [sp, #28]
 c009536:	e014      	b.n	c009562 <_vfiprintf_r+0x13a>
 c009538:	eba0 0308 	sub.w	r3, r0, r8
 c00953c:	46a2      	mov	sl, r4
 c00953e:	fa09 f303 	lsl.w	r3, r9, r3
 c009542:	4313      	orrs	r3, r2
 c009544:	9304      	str	r3, [sp, #16]
 c009546:	e7d2      	b.n	c0094ee <_vfiprintf_r+0xc6>
 c009548:	9b03      	ldr	r3, [sp, #12]
 c00954a:	1d19      	adds	r1, r3, #4
 c00954c:	681b      	ldr	r3, [r3, #0]
 c00954e:	2b00      	cmp	r3, #0
 c009550:	9103      	str	r1, [sp, #12]
 c009552:	bfbb      	ittet	lt
 c009554:	425b      	neglt	r3, r3
 c009556:	f042 0202 	orrlt.w	r2, r2, #2
 c00955a:	9307      	strge	r3, [sp, #28]
 c00955c:	9307      	strlt	r3, [sp, #28]
 c00955e:	bfb8      	it	lt
 c009560:	9204      	strlt	r2, [sp, #16]
 c009562:	7823      	ldrb	r3, [r4, #0]
 c009564:	2b2e      	cmp	r3, #46	@ 0x2e
 c009566:	d10a      	bne.n	c00957e <_vfiprintf_r+0x156>
 c009568:	7863      	ldrb	r3, [r4, #1]
 c00956a:	2b2a      	cmp	r3, #42	@ 0x2a
 c00956c:	d132      	bne.n	c0095d4 <_vfiprintf_r+0x1ac>
 c00956e:	9b03      	ldr	r3, [sp, #12]
 c009570:	3402      	adds	r4, #2
 c009572:	1d1a      	adds	r2, r3, #4
 c009574:	681b      	ldr	r3, [r3, #0]
 c009576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 c00957a:	9203      	str	r2, [sp, #12]
 c00957c:	9305      	str	r3, [sp, #20]
 c00957e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ c009654 <_vfiprintf_r+0x22c>
 c009582:	2203      	movs	r2, #3
 c009584:	7821      	ldrb	r1, [r4, #0]
 c009586:	4650      	mov	r0, sl
 c009588:	f000 fb5a 	bl	c009c40 <memchr>
 c00958c:	b138      	cbz	r0, c00959e <_vfiprintf_r+0x176>
 c00958e:	eba0 000a 	sub.w	r0, r0, sl
 c009592:	2240      	movs	r2, #64	@ 0x40
 c009594:	9b04      	ldr	r3, [sp, #16]
 c009596:	3401      	adds	r4, #1
 c009598:	4082      	lsls	r2, r0
 c00959a:	4313      	orrs	r3, r2
 c00959c:	9304      	str	r3, [sp, #16]
 c00959e:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0095a2:	2206      	movs	r2, #6
 c0095a4:	4828      	ldr	r0, [pc, #160]	@ (c009648 <_vfiprintf_r+0x220>)
 c0095a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 c0095aa:	f000 fb49 	bl	c009c40 <memchr>
 c0095ae:	2800      	cmp	r0, #0
 c0095b0:	d03f      	beq.n	c009632 <_vfiprintf_r+0x20a>
 c0095b2:	4b26      	ldr	r3, [pc, #152]	@ (c00964c <_vfiprintf_r+0x224>)
 c0095b4:	bb1b      	cbnz	r3, c0095fe <_vfiprintf_r+0x1d6>
 c0095b6:	9b03      	ldr	r3, [sp, #12]
 c0095b8:	3307      	adds	r3, #7
 c0095ba:	f023 0307 	bic.w	r3, r3, #7
 c0095be:	3308      	adds	r3, #8
 c0095c0:	9303      	str	r3, [sp, #12]
 c0095c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 c0095c4:	443b      	add	r3, r7
 c0095c6:	9309      	str	r3, [sp, #36]	@ 0x24
 c0095c8:	e76a      	b.n	c0094a0 <_vfiprintf_r+0x78>
 c0095ca:	fb0c 3202 	mla	r2, ip, r2, r3
 c0095ce:	460c      	mov	r4, r1
 c0095d0:	2001      	movs	r0, #1
 c0095d2:	e7a8      	b.n	c009526 <_vfiprintf_r+0xfe>
 c0095d4:	2300      	movs	r3, #0
 c0095d6:	3401      	adds	r4, #1
 c0095d8:	f04f 0c0a 	mov.w	ip, #10
 c0095dc:	4619      	mov	r1, r3
 c0095de:	9305      	str	r3, [sp, #20]
 c0095e0:	4620      	mov	r0, r4
 c0095e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 c0095e6:	3a30      	subs	r2, #48	@ 0x30
 c0095e8:	2a09      	cmp	r2, #9
 c0095ea:	d903      	bls.n	c0095f4 <_vfiprintf_r+0x1cc>
 c0095ec:	2b00      	cmp	r3, #0
 c0095ee:	d0c6      	beq.n	c00957e <_vfiprintf_r+0x156>
 c0095f0:	9105      	str	r1, [sp, #20]
 c0095f2:	e7c4      	b.n	c00957e <_vfiprintf_r+0x156>
 c0095f4:	fb0c 2101 	mla	r1, ip, r1, r2
 c0095f8:	4604      	mov	r4, r0
 c0095fa:	2301      	movs	r3, #1
 c0095fc:	e7f0      	b.n	c0095e0 <_vfiprintf_r+0x1b8>
 c0095fe:	ab03      	add	r3, sp, #12
 c009600:	462a      	mov	r2, r5
 c009602:	a904      	add	r1, sp, #16
 c009604:	4630      	mov	r0, r6
 c009606:	9300      	str	r3, [sp, #0]
 c009608:	4b11      	ldr	r3, [pc, #68]	@ (c009650 <_vfiprintf_r+0x228>)
 c00960a:	f3af 8000 	nop.w
 c00960e:	4607      	mov	r7, r0
 c009610:	1c78      	adds	r0, r7, #1
 c009612:	d1d6      	bne.n	c0095c2 <_vfiprintf_r+0x19a>
 c009614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 c009616:	07d9      	lsls	r1, r3, #31
 c009618:	d405      	bmi.n	c009626 <_vfiprintf_r+0x1fe>
 c00961a:	89ab      	ldrh	r3, [r5, #12]
 c00961c:	059a      	lsls	r2, r3, #22
 c00961e:	d402      	bmi.n	c009626 <_vfiprintf_r+0x1fe>
 c009620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 c009622:	f7ff fdab 	bl	c00917c <__retarget_lock_release_recursive>
 c009626:	89ab      	ldrh	r3, [r5, #12]
 c009628:	065b      	lsls	r3, r3, #25
 c00962a:	f53f af1f 	bmi.w	c00946c <_vfiprintf_r+0x44>
 c00962e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 c009630:	e71e      	b.n	c009470 <_vfiprintf_r+0x48>
 c009632:	ab03      	add	r3, sp, #12
 c009634:	462a      	mov	r2, r5
 c009636:	a904      	add	r1, sp, #16
 c009638:	4630      	mov	r0, r6
 c00963a:	9300      	str	r3, [sp, #0]
 c00963c:	4b04      	ldr	r3, [pc, #16]	@ (c009650 <_vfiprintf_r+0x228>)
 c00963e:	f000 f87d 	bl	c00973c <_printf_i>
 c009642:	e7e4      	b.n	c00960e <_vfiprintf_r+0x1e6>
 c009644:	0c00a023 	.word	0x0c00a023
 c009648:	0c00a02d 	.word	0x0c00a02d
 c00964c:	00000000 	.word	0x00000000
 c009650:	0c009403 	.word	0x0c009403
 c009654:	0c00a029 	.word	0x0c00a029

0c009658 <_printf_common>:
 c009658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c00965c:	4616      	mov	r6, r2
 c00965e:	4698      	mov	r8, r3
 c009660:	688a      	ldr	r2, [r1, #8]
 c009662:	4607      	mov	r7, r0
 c009664:	690b      	ldr	r3, [r1, #16]
 c009666:	460c      	mov	r4, r1
 c009668:	f8dd 9020 	ldr.w	r9, [sp, #32]
 c00966c:	4293      	cmp	r3, r2
 c00966e:	bfb8      	it	lt
 c009670:	4613      	movlt	r3, r2
 c009672:	6033      	str	r3, [r6, #0]
 c009674:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 c009678:	b10a      	cbz	r2, c00967e <_printf_common+0x26>
 c00967a:	3301      	adds	r3, #1
 c00967c:	6033      	str	r3, [r6, #0]
 c00967e:	6823      	ldr	r3, [r4, #0]
 c009680:	0699      	lsls	r1, r3, #26
 c009682:	bf42      	ittt	mi
 c009684:	6833      	ldrmi	r3, [r6, #0]
 c009686:	3302      	addmi	r3, #2
 c009688:	6033      	strmi	r3, [r6, #0]
 c00968a:	6825      	ldr	r5, [r4, #0]
 c00968c:	f015 0506 	ands.w	r5, r5, #6
 c009690:	d106      	bne.n	c0096a0 <_printf_common+0x48>
 c009692:	f104 0a19 	add.w	sl, r4, #25
 c009696:	68e3      	ldr	r3, [r4, #12]
 c009698:	6832      	ldr	r2, [r6, #0]
 c00969a:	1a9b      	subs	r3, r3, r2
 c00969c:	42ab      	cmp	r3, r5
 c00969e:	dc2b      	bgt.n	c0096f8 <_printf_common+0xa0>
 c0096a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 c0096a4:	6822      	ldr	r2, [r4, #0]
 c0096a6:	3b00      	subs	r3, #0
 c0096a8:	bf18      	it	ne
 c0096aa:	2301      	movne	r3, #1
 c0096ac:	0692      	lsls	r2, r2, #26
 c0096ae:	d430      	bmi.n	c009712 <_printf_common+0xba>
 c0096b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 c0096b4:	4641      	mov	r1, r8
 c0096b6:	4638      	mov	r0, r7
 c0096b8:	47c8      	blx	r9
 c0096ba:	3001      	adds	r0, #1
 c0096bc:	d023      	beq.n	c009706 <_printf_common+0xae>
 c0096be:	6823      	ldr	r3, [r4, #0]
 c0096c0:	341a      	adds	r4, #26
 c0096c2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c0096c6:	f003 0306 	and.w	r3, r3, #6
 c0096ca:	2b04      	cmp	r3, #4
 c0096cc:	bf0a      	itet	eq
 c0096ce:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 c0096d2:	2500      	movne	r5, #0
 c0096d4:	6833      	ldreq	r3, [r6, #0]
 c0096d6:	f04f 0600 	mov.w	r6, #0
 c0096da:	bf08      	it	eq
 c0096dc:	1aed      	subeq	r5, r5, r3
 c0096de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c0096e2:	bf08      	it	eq
 c0096e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c0096e8:	4293      	cmp	r3, r2
 c0096ea:	bfc4      	itt	gt
 c0096ec:	1a9b      	subgt	r3, r3, r2
 c0096ee:	18ed      	addgt	r5, r5, r3
 c0096f0:	42b5      	cmp	r5, r6
 c0096f2:	d11a      	bne.n	c00972a <_printf_common+0xd2>
 c0096f4:	2000      	movs	r0, #0
 c0096f6:	e008      	b.n	c00970a <_printf_common+0xb2>
 c0096f8:	2301      	movs	r3, #1
 c0096fa:	4652      	mov	r2, sl
 c0096fc:	4641      	mov	r1, r8
 c0096fe:	4638      	mov	r0, r7
 c009700:	47c8      	blx	r9
 c009702:	3001      	adds	r0, #1
 c009704:	d103      	bne.n	c00970e <_printf_common+0xb6>
 c009706:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c00970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c00970e:	3501      	adds	r5, #1
 c009710:	e7c1      	b.n	c009696 <_printf_common+0x3e>
 c009712:	18e1      	adds	r1, r4, r3
 c009714:	1c5a      	adds	r2, r3, #1
 c009716:	2030      	movs	r0, #48	@ 0x30
 c009718:	3302      	adds	r3, #2
 c00971a:	4422      	add	r2, r4
 c00971c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 c009720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 c009724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 c009728:	e7c2      	b.n	c0096b0 <_printf_common+0x58>
 c00972a:	2301      	movs	r3, #1
 c00972c:	4622      	mov	r2, r4
 c00972e:	4641      	mov	r1, r8
 c009730:	4638      	mov	r0, r7
 c009732:	47c8      	blx	r9
 c009734:	3001      	adds	r0, #1
 c009736:	d0e6      	beq.n	c009706 <_printf_common+0xae>
 c009738:	3601      	adds	r6, #1
 c00973a:	e7d9      	b.n	c0096f0 <_printf_common+0x98>

0c00973c <_printf_i>:
 c00973c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c009740:	7e0f      	ldrb	r7, [r1, #24]
 c009742:	4691      	mov	r9, r2
 c009744:	4680      	mov	r8, r0
 c009746:	460c      	mov	r4, r1
 c009748:	2f78      	cmp	r7, #120	@ 0x78
 c00974a:	469a      	mov	sl, r3
 c00974c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 c00974e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 c009752:	d807      	bhi.n	c009764 <_printf_i+0x28>
 c009754:	2f62      	cmp	r7, #98	@ 0x62
 c009756:	d80a      	bhi.n	c00976e <_printf_i+0x32>
 c009758:	2f00      	cmp	r7, #0
 c00975a:	f000 80d2 	beq.w	c009902 <_printf_i+0x1c6>
 c00975e:	2f58      	cmp	r7, #88	@ 0x58
 c009760:	f000 80b9 	beq.w	c0098d6 <_printf_i+0x19a>
 c009764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 c009768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 c00976c:	e03a      	b.n	c0097e4 <_printf_i+0xa8>
 c00976e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 c009772:	2b15      	cmp	r3, #21
 c009774:	d8f6      	bhi.n	c009764 <_printf_i+0x28>
 c009776:	a101      	add	r1, pc, #4	@ (adr r1, c00977c <_printf_i+0x40>)
 c009778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c00977c:	0c0097d5 	.word	0x0c0097d5
 c009780:	0c0097e9 	.word	0x0c0097e9
 c009784:	0c009765 	.word	0x0c009765
 c009788:	0c009765 	.word	0x0c009765
 c00978c:	0c009765 	.word	0x0c009765
 c009790:	0c009765 	.word	0x0c009765
 c009794:	0c0097e9 	.word	0x0c0097e9
 c009798:	0c009765 	.word	0x0c009765
 c00979c:	0c009765 	.word	0x0c009765
 c0097a0:	0c009765 	.word	0x0c009765
 c0097a4:	0c009765 	.word	0x0c009765
 c0097a8:	0c0098e9 	.word	0x0c0098e9
 c0097ac:	0c009813 	.word	0x0c009813
 c0097b0:	0c0098a3 	.word	0x0c0098a3
 c0097b4:	0c009765 	.word	0x0c009765
 c0097b8:	0c009765 	.word	0x0c009765
 c0097bc:	0c00990b 	.word	0x0c00990b
 c0097c0:	0c009765 	.word	0x0c009765
 c0097c4:	0c009813 	.word	0x0c009813
 c0097c8:	0c009765 	.word	0x0c009765
 c0097cc:	0c009765 	.word	0x0c009765
 c0097d0:	0c0098ab 	.word	0x0c0098ab
 c0097d4:	6833      	ldr	r3, [r6, #0]
 c0097d6:	1d1a      	adds	r2, r3, #4
 c0097d8:	681b      	ldr	r3, [r3, #0]
 c0097da:	6032      	str	r2, [r6, #0]
 c0097dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 c0097e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 c0097e4:	2301      	movs	r3, #1
 c0097e6:	e09d      	b.n	c009924 <_printf_i+0x1e8>
 c0097e8:	6833      	ldr	r3, [r6, #0]
 c0097ea:	6820      	ldr	r0, [r4, #0]
 c0097ec:	1d19      	adds	r1, r3, #4
 c0097ee:	6031      	str	r1, [r6, #0]
 c0097f0:	0606      	lsls	r6, r0, #24
 c0097f2:	d501      	bpl.n	c0097f8 <_printf_i+0xbc>
 c0097f4:	681d      	ldr	r5, [r3, #0]
 c0097f6:	e003      	b.n	c009800 <_printf_i+0xc4>
 c0097f8:	0645      	lsls	r5, r0, #25
 c0097fa:	d5fb      	bpl.n	c0097f4 <_printf_i+0xb8>
 c0097fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 c009800:	2d00      	cmp	r5, #0
 c009802:	da03      	bge.n	c00980c <_printf_i+0xd0>
 c009804:	232d      	movs	r3, #45	@ 0x2d
 c009806:	426d      	negs	r5, r5
 c009808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 c00980c:	4859      	ldr	r0, [pc, #356]	@ (c009974 <_printf_i+0x238>)
 c00980e:	230a      	movs	r3, #10
 c009810:	e011      	b.n	c009836 <_printf_i+0xfa>
 c009812:	6821      	ldr	r1, [r4, #0]
 c009814:	6833      	ldr	r3, [r6, #0]
 c009816:	0608      	lsls	r0, r1, #24
 c009818:	f853 5b04 	ldr.w	r5, [r3], #4
 c00981c:	d402      	bmi.n	c009824 <_printf_i+0xe8>
 c00981e:	0649      	lsls	r1, r1, #25
 c009820:	bf48      	it	mi
 c009822:	b2ad      	uxthmi	r5, r5
 c009824:	2f6f      	cmp	r7, #111	@ 0x6f
 c009826:	6033      	str	r3, [r6, #0]
 c009828:	4852      	ldr	r0, [pc, #328]	@ (c009974 <_printf_i+0x238>)
 c00982a:	bf14      	ite	ne
 c00982c:	230a      	movne	r3, #10
 c00982e:	2308      	moveq	r3, #8
 c009830:	2100      	movs	r1, #0
 c009832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 c009836:	6866      	ldr	r6, [r4, #4]
 c009838:	2e00      	cmp	r6, #0
 c00983a:	60a6      	str	r6, [r4, #8]
 c00983c:	bfa2      	ittt	ge
 c00983e:	6821      	ldrge	r1, [r4, #0]
 c009840:	f021 0104 	bicge.w	r1, r1, #4
 c009844:	6021      	strge	r1, [r4, #0]
 c009846:	b90d      	cbnz	r5, c00984c <_printf_i+0x110>
 c009848:	2e00      	cmp	r6, #0
 c00984a:	d04b      	beq.n	c0098e4 <_printf_i+0x1a8>
 c00984c:	4616      	mov	r6, r2
 c00984e:	fbb5 f1f3 	udiv	r1, r5, r3
 c009852:	fb03 5711 	mls	r7, r3, r1, r5
 c009856:	5dc7      	ldrb	r7, [r0, r7]
 c009858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 c00985c:	462f      	mov	r7, r5
 c00985e:	460d      	mov	r5, r1
 c009860:	42bb      	cmp	r3, r7
 c009862:	d9f4      	bls.n	c00984e <_printf_i+0x112>
 c009864:	2b08      	cmp	r3, #8
 c009866:	d10b      	bne.n	c009880 <_printf_i+0x144>
 c009868:	6823      	ldr	r3, [r4, #0]
 c00986a:	07df      	lsls	r7, r3, #31
 c00986c:	d508      	bpl.n	c009880 <_printf_i+0x144>
 c00986e:	6923      	ldr	r3, [r4, #16]
 c009870:	6861      	ldr	r1, [r4, #4]
 c009872:	4299      	cmp	r1, r3
 c009874:	bfde      	ittt	le
 c009876:	2330      	movle	r3, #48	@ 0x30
 c009878:	f806 3c01 	strble.w	r3, [r6, #-1]
 c00987c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 c009880:	1b92      	subs	r2, r2, r6
 c009882:	6122      	str	r2, [r4, #16]
 c009884:	464b      	mov	r3, r9
 c009886:	aa03      	add	r2, sp, #12
 c009888:	4621      	mov	r1, r4
 c00988a:	4640      	mov	r0, r8
 c00988c:	f8cd a000 	str.w	sl, [sp]
 c009890:	f7ff fee2 	bl	c009658 <_printf_common>
 c009894:	3001      	adds	r0, #1
 c009896:	d14a      	bne.n	c00992e <_printf_i+0x1f2>
 c009898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c00989c:	b004      	add	sp, #16
 c00989e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0098a2:	6823      	ldr	r3, [r4, #0]
 c0098a4:	f043 0320 	orr.w	r3, r3, #32
 c0098a8:	6023      	str	r3, [r4, #0]
 c0098aa:	2778      	movs	r7, #120	@ 0x78
 c0098ac:	4832      	ldr	r0, [pc, #200]	@ (c009978 <_printf_i+0x23c>)
 c0098ae:	6823      	ldr	r3, [r4, #0]
 c0098b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 c0098b4:	061f      	lsls	r7, r3, #24
 c0098b6:	6831      	ldr	r1, [r6, #0]
 c0098b8:	f851 5b04 	ldr.w	r5, [r1], #4
 c0098bc:	d402      	bmi.n	c0098c4 <_printf_i+0x188>
 c0098be:	065f      	lsls	r7, r3, #25
 c0098c0:	bf48      	it	mi
 c0098c2:	b2ad      	uxthmi	r5, r5
 c0098c4:	6031      	str	r1, [r6, #0]
 c0098c6:	07d9      	lsls	r1, r3, #31
 c0098c8:	bf44      	itt	mi
 c0098ca:	f043 0320 	orrmi.w	r3, r3, #32
 c0098ce:	6023      	strmi	r3, [r4, #0]
 c0098d0:	b11d      	cbz	r5, c0098da <_printf_i+0x19e>
 c0098d2:	2310      	movs	r3, #16
 c0098d4:	e7ac      	b.n	c009830 <_printf_i+0xf4>
 c0098d6:	4827      	ldr	r0, [pc, #156]	@ (c009974 <_printf_i+0x238>)
 c0098d8:	e7e9      	b.n	c0098ae <_printf_i+0x172>
 c0098da:	6823      	ldr	r3, [r4, #0]
 c0098dc:	f023 0320 	bic.w	r3, r3, #32
 c0098e0:	6023      	str	r3, [r4, #0]
 c0098e2:	e7f6      	b.n	c0098d2 <_printf_i+0x196>
 c0098e4:	4616      	mov	r6, r2
 c0098e6:	e7bd      	b.n	c009864 <_printf_i+0x128>
 c0098e8:	6833      	ldr	r3, [r6, #0]
 c0098ea:	6825      	ldr	r5, [r4, #0]
 c0098ec:	1d18      	adds	r0, r3, #4
 c0098ee:	6961      	ldr	r1, [r4, #20]
 c0098f0:	6030      	str	r0, [r6, #0]
 c0098f2:	062e      	lsls	r6, r5, #24
 c0098f4:	681b      	ldr	r3, [r3, #0]
 c0098f6:	d501      	bpl.n	c0098fc <_printf_i+0x1c0>
 c0098f8:	6019      	str	r1, [r3, #0]
 c0098fa:	e002      	b.n	c009902 <_printf_i+0x1c6>
 c0098fc:	0668      	lsls	r0, r5, #25
 c0098fe:	d5fb      	bpl.n	c0098f8 <_printf_i+0x1bc>
 c009900:	8019      	strh	r1, [r3, #0]
 c009902:	2300      	movs	r3, #0
 c009904:	4616      	mov	r6, r2
 c009906:	6123      	str	r3, [r4, #16]
 c009908:	e7bc      	b.n	c009884 <_printf_i+0x148>
 c00990a:	6833      	ldr	r3, [r6, #0]
 c00990c:	2100      	movs	r1, #0
 c00990e:	1d1a      	adds	r2, r3, #4
 c009910:	6032      	str	r2, [r6, #0]
 c009912:	681e      	ldr	r6, [r3, #0]
 c009914:	6862      	ldr	r2, [r4, #4]
 c009916:	4630      	mov	r0, r6
 c009918:	f000 f992 	bl	c009c40 <memchr>
 c00991c:	b108      	cbz	r0, c009922 <_printf_i+0x1e6>
 c00991e:	1b80      	subs	r0, r0, r6
 c009920:	6060      	str	r0, [r4, #4]
 c009922:	6863      	ldr	r3, [r4, #4]
 c009924:	6123      	str	r3, [r4, #16]
 c009926:	2300      	movs	r3, #0
 c009928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 c00992c:	e7aa      	b.n	c009884 <_printf_i+0x148>
 c00992e:	6923      	ldr	r3, [r4, #16]
 c009930:	4632      	mov	r2, r6
 c009932:	4649      	mov	r1, r9
 c009934:	4640      	mov	r0, r8
 c009936:	47d0      	blx	sl
 c009938:	3001      	adds	r0, #1
 c00993a:	d0ad      	beq.n	c009898 <_printf_i+0x15c>
 c00993c:	6823      	ldr	r3, [r4, #0]
 c00993e:	079b      	lsls	r3, r3, #30
 c009940:	d413      	bmi.n	c00996a <_printf_i+0x22e>
 c009942:	68e0      	ldr	r0, [r4, #12]
 c009944:	9b03      	ldr	r3, [sp, #12]
 c009946:	4298      	cmp	r0, r3
 c009948:	bfb8      	it	lt
 c00994a:	4618      	movlt	r0, r3
 c00994c:	e7a6      	b.n	c00989c <_printf_i+0x160>
 c00994e:	2301      	movs	r3, #1
 c009950:	4632      	mov	r2, r6
 c009952:	4649      	mov	r1, r9
 c009954:	4640      	mov	r0, r8
 c009956:	47d0      	blx	sl
 c009958:	3001      	adds	r0, #1
 c00995a:	d09d      	beq.n	c009898 <_printf_i+0x15c>
 c00995c:	3501      	adds	r5, #1
 c00995e:	68e3      	ldr	r3, [r4, #12]
 c009960:	9903      	ldr	r1, [sp, #12]
 c009962:	1a5b      	subs	r3, r3, r1
 c009964:	42ab      	cmp	r3, r5
 c009966:	dcf2      	bgt.n	c00994e <_printf_i+0x212>
 c009968:	e7eb      	b.n	c009942 <_printf_i+0x206>
 c00996a:	2500      	movs	r5, #0
 c00996c:	f104 0619 	add.w	r6, r4, #25
 c009970:	e7f5      	b.n	c00995e <_printf_i+0x222>
 c009972:	bf00      	nop
 c009974:	0c00a034 	.word	0x0c00a034
 c009978:	0c00a045 	.word	0x0c00a045

0c00997c <__sflush_r>:
 c00997c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 c009980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c009984:	0716      	lsls	r6, r2, #28
 c009986:	4605      	mov	r5, r0
 c009988:	460c      	mov	r4, r1
 c00998a:	d454      	bmi.n	c009a36 <__sflush_r+0xba>
 c00998c:	684b      	ldr	r3, [r1, #4]
 c00998e:	2b00      	cmp	r3, #0
 c009990:	dc02      	bgt.n	c009998 <__sflush_r+0x1c>
 c009992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 c009994:	2b00      	cmp	r3, #0
 c009996:	dd48      	ble.n	c009a2a <__sflush_r+0xae>
 c009998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 c00999a:	2e00      	cmp	r6, #0
 c00999c:	d045      	beq.n	c009a2a <__sflush_r+0xae>
 c00999e:	2300      	movs	r3, #0
 c0099a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 c0099a4:	682f      	ldr	r7, [r5, #0]
 c0099a6:	6a21      	ldr	r1, [r4, #32]
 c0099a8:	602b      	str	r3, [r5, #0]
 c0099aa:	d030      	beq.n	c009a0e <__sflush_r+0x92>
 c0099ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 c0099ae:	89a3      	ldrh	r3, [r4, #12]
 c0099b0:	0759      	lsls	r1, r3, #29
 c0099b2:	d505      	bpl.n	c0099c0 <__sflush_r+0x44>
 c0099b4:	6863      	ldr	r3, [r4, #4]
 c0099b6:	1ad2      	subs	r2, r2, r3
 c0099b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 c0099ba:	b10b      	cbz	r3, c0099c0 <__sflush_r+0x44>
 c0099bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 c0099be:	1ad2      	subs	r2, r2, r3
 c0099c0:	2300      	movs	r3, #0
 c0099c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 c0099c4:	6a21      	ldr	r1, [r4, #32]
 c0099c6:	4628      	mov	r0, r5
 c0099c8:	47b0      	blx	r6
 c0099ca:	1c43      	adds	r3, r0, #1
 c0099cc:	89a3      	ldrh	r3, [r4, #12]
 c0099ce:	d106      	bne.n	c0099de <__sflush_r+0x62>
 c0099d0:	6829      	ldr	r1, [r5, #0]
 c0099d2:	291d      	cmp	r1, #29
 c0099d4:	d82b      	bhi.n	c009a2e <__sflush_r+0xb2>
 c0099d6:	4a2a      	ldr	r2, [pc, #168]	@ (c009a80 <__sflush_r+0x104>)
 c0099d8:	410a      	asrs	r2, r1
 c0099da:	07d6      	lsls	r6, r2, #31
 c0099dc:	d427      	bmi.n	c009a2e <__sflush_r+0xb2>
 c0099de:	2200      	movs	r2, #0
 c0099e0:	04d9      	lsls	r1, r3, #19
 c0099e2:	6062      	str	r2, [r4, #4]
 c0099e4:	6922      	ldr	r2, [r4, #16]
 c0099e6:	6022      	str	r2, [r4, #0]
 c0099e8:	d504      	bpl.n	c0099f4 <__sflush_r+0x78>
 c0099ea:	1c42      	adds	r2, r0, #1
 c0099ec:	d101      	bne.n	c0099f2 <__sflush_r+0x76>
 c0099ee:	682b      	ldr	r3, [r5, #0]
 c0099f0:	b903      	cbnz	r3, c0099f4 <__sflush_r+0x78>
 c0099f2:	6560      	str	r0, [r4, #84]	@ 0x54
 c0099f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 c0099f6:	602f      	str	r7, [r5, #0]
 c0099f8:	b1b9      	cbz	r1, c009a2a <__sflush_r+0xae>
 c0099fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 c0099fe:	4299      	cmp	r1, r3
 c009a00:	d002      	beq.n	c009a08 <__sflush_r+0x8c>
 c009a02:	4628      	mov	r0, r5
 c009a04:	f7ff fbe6 	bl	c0091d4 <_free_r>
 c009a08:	2300      	movs	r3, #0
 c009a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 c009a0c:	e00d      	b.n	c009a2a <__sflush_r+0xae>
 c009a0e:	2301      	movs	r3, #1
 c009a10:	4628      	mov	r0, r5
 c009a12:	47b0      	blx	r6
 c009a14:	4602      	mov	r2, r0
 c009a16:	1c50      	adds	r0, r2, #1
 c009a18:	d1c9      	bne.n	c0099ae <__sflush_r+0x32>
 c009a1a:	682b      	ldr	r3, [r5, #0]
 c009a1c:	2b00      	cmp	r3, #0
 c009a1e:	d0c6      	beq.n	c0099ae <__sflush_r+0x32>
 c009a20:	2b1d      	cmp	r3, #29
 c009a22:	d001      	beq.n	c009a28 <__sflush_r+0xac>
 c009a24:	2b16      	cmp	r3, #22
 c009a26:	d11d      	bne.n	c009a64 <__sflush_r+0xe8>
 c009a28:	602f      	str	r7, [r5, #0]
 c009a2a:	2000      	movs	r0, #0
 c009a2c:	e021      	b.n	c009a72 <__sflush_r+0xf6>
 c009a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 c009a32:	b21b      	sxth	r3, r3
 c009a34:	e01a      	b.n	c009a6c <__sflush_r+0xf0>
 c009a36:	690f      	ldr	r7, [r1, #16]
 c009a38:	2f00      	cmp	r7, #0
 c009a3a:	d0f6      	beq.n	c009a2a <__sflush_r+0xae>
 c009a3c:	0793      	lsls	r3, r2, #30
 c009a3e:	680e      	ldr	r6, [r1, #0]
 c009a40:	600f      	str	r7, [r1, #0]
 c009a42:	bf0c      	ite	eq
 c009a44:	694b      	ldreq	r3, [r1, #20]
 c009a46:	2300      	movne	r3, #0
 c009a48:	eba6 0807 	sub.w	r8, r6, r7
 c009a4c:	608b      	str	r3, [r1, #8]
 c009a4e:	f1b8 0f00 	cmp.w	r8, #0
 c009a52:	ddea      	ble.n	c009a2a <__sflush_r+0xae>
 c009a54:	4643      	mov	r3, r8
 c009a56:	463a      	mov	r2, r7
 c009a58:	6a21      	ldr	r1, [r4, #32]
 c009a5a:	4628      	mov	r0, r5
 c009a5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 c009a5e:	47b0      	blx	r6
 c009a60:	2800      	cmp	r0, #0
 c009a62:	dc08      	bgt.n	c009a76 <__sflush_r+0xfa>
 c009a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c009a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 c009a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c009a70:	81a3      	strh	r3, [r4, #12]
 c009a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c009a76:	4407      	add	r7, r0
 c009a78:	eba8 0800 	sub.w	r8, r8, r0
 c009a7c:	e7e7      	b.n	c009a4e <__sflush_r+0xd2>
 c009a7e:	bf00      	nop
 c009a80:	dfbffffe 	.word	0xdfbffffe

0c009a84 <_fflush_r>:
 c009a84:	b538      	push	{r3, r4, r5, lr}
 c009a86:	690b      	ldr	r3, [r1, #16]
 c009a88:	4605      	mov	r5, r0
 c009a8a:	460c      	mov	r4, r1
 c009a8c:	b913      	cbnz	r3, c009a94 <_fflush_r+0x10>
 c009a8e:	2500      	movs	r5, #0
 c009a90:	4628      	mov	r0, r5
 c009a92:	bd38      	pop	{r3, r4, r5, pc}
 c009a94:	b118      	cbz	r0, c009a9e <_fflush_r+0x1a>
 c009a96:	6a03      	ldr	r3, [r0, #32]
 c009a98:	b90b      	cbnz	r3, c009a9e <_fflush_r+0x1a>
 c009a9a:	f7ff fa7b 	bl	c008f94 <__sinit>
 c009a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c009aa2:	2b00      	cmp	r3, #0
 c009aa4:	d0f3      	beq.n	c009a8e <_fflush_r+0xa>
 c009aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 c009aa8:	07d0      	lsls	r0, r2, #31
 c009aaa:	d404      	bmi.n	c009ab6 <_fflush_r+0x32>
 c009aac:	0599      	lsls	r1, r3, #22
 c009aae:	d402      	bmi.n	c009ab6 <_fflush_r+0x32>
 c009ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 c009ab2:	f7ff fb62 	bl	c00917a <__retarget_lock_acquire_recursive>
 c009ab6:	4628      	mov	r0, r5
 c009ab8:	4621      	mov	r1, r4
 c009aba:	f7ff ff5f 	bl	c00997c <__sflush_r>
 c009abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 c009ac0:	4605      	mov	r5, r0
 c009ac2:	07da      	lsls	r2, r3, #31
 c009ac4:	d4e4      	bmi.n	c009a90 <_fflush_r+0xc>
 c009ac6:	89a3      	ldrh	r3, [r4, #12]
 c009ac8:	059b      	lsls	r3, r3, #22
 c009aca:	d4e1      	bmi.n	c009a90 <_fflush_r+0xc>
 c009acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 c009ace:	f7ff fb55 	bl	c00917c <__retarget_lock_release_recursive>
 c009ad2:	e7dd      	b.n	c009a90 <_fflush_r+0xc>

0c009ad4 <fiprintf>:
 c009ad4:	b40e      	push	{r1, r2, r3}
 c009ad6:	b503      	push	{r0, r1, lr}
 c009ad8:	ab03      	add	r3, sp, #12
 c009ada:	4601      	mov	r1, r0
 c009adc:	4805      	ldr	r0, [pc, #20]	@ (c009af4 <fiprintf+0x20>)
 c009ade:	f853 2b04 	ldr.w	r2, [r3], #4
 c009ae2:	6800      	ldr	r0, [r0, #0]
 c009ae4:	9301      	str	r3, [sp, #4]
 c009ae6:	f7ff fc9f 	bl	c009428 <_vfiprintf_r>
 c009aea:	b002      	add	sp, #8
 c009aec:	f85d eb04 	ldr.w	lr, [sp], #4
 c009af0:	b003      	add	sp, #12
 c009af2:	4770      	bx	lr
 c009af4:	3000062c 	.word	0x3000062c

0c009af8 <__swbuf_r>:
 c009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009afa:	460e      	mov	r6, r1
 c009afc:	4614      	mov	r4, r2
 c009afe:	4605      	mov	r5, r0
 c009b00:	b118      	cbz	r0, c009b0a <__swbuf_r+0x12>
 c009b02:	6a03      	ldr	r3, [r0, #32]
 c009b04:	b90b      	cbnz	r3, c009b0a <__swbuf_r+0x12>
 c009b06:	f7ff fa45 	bl	c008f94 <__sinit>
 c009b0a:	69a3      	ldr	r3, [r4, #24]
 c009b0c:	60a3      	str	r3, [r4, #8]
 c009b0e:	89a3      	ldrh	r3, [r4, #12]
 c009b10:	071a      	lsls	r2, r3, #28
 c009b12:	d501      	bpl.n	c009b18 <__swbuf_r+0x20>
 c009b14:	6923      	ldr	r3, [r4, #16]
 c009b16:	b943      	cbnz	r3, c009b2a <__swbuf_r+0x32>
 c009b18:	4621      	mov	r1, r4
 c009b1a:	4628      	mov	r0, r5
 c009b1c:	f000 f82a 	bl	c009b74 <__swsetup_r>
 c009b20:	b118      	cbz	r0, c009b2a <__swbuf_r+0x32>
 c009b22:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 c009b26:	4638      	mov	r0, r7
 c009b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c009b2a:	6823      	ldr	r3, [r4, #0]
 c009b2c:	b2f6      	uxtb	r6, r6
 c009b2e:	6922      	ldr	r2, [r4, #16]
 c009b30:	4637      	mov	r7, r6
 c009b32:	1a98      	subs	r0, r3, r2
 c009b34:	6963      	ldr	r3, [r4, #20]
 c009b36:	4283      	cmp	r3, r0
 c009b38:	dc05      	bgt.n	c009b46 <__swbuf_r+0x4e>
 c009b3a:	4621      	mov	r1, r4
 c009b3c:	4628      	mov	r0, r5
 c009b3e:	f7ff ffa1 	bl	c009a84 <_fflush_r>
 c009b42:	2800      	cmp	r0, #0
 c009b44:	d1ed      	bne.n	c009b22 <__swbuf_r+0x2a>
 c009b46:	68a3      	ldr	r3, [r4, #8]
 c009b48:	3b01      	subs	r3, #1
 c009b4a:	60a3      	str	r3, [r4, #8]
 c009b4c:	6823      	ldr	r3, [r4, #0]
 c009b4e:	1c5a      	adds	r2, r3, #1
 c009b50:	6022      	str	r2, [r4, #0]
 c009b52:	701e      	strb	r6, [r3, #0]
 c009b54:	1c43      	adds	r3, r0, #1
 c009b56:	6962      	ldr	r2, [r4, #20]
 c009b58:	429a      	cmp	r2, r3
 c009b5a:	d004      	beq.n	c009b66 <__swbuf_r+0x6e>
 c009b5c:	89a3      	ldrh	r3, [r4, #12]
 c009b5e:	07db      	lsls	r3, r3, #31
 c009b60:	d5e1      	bpl.n	c009b26 <__swbuf_r+0x2e>
 c009b62:	2e0a      	cmp	r6, #10
 c009b64:	d1df      	bne.n	c009b26 <__swbuf_r+0x2e>
 c009b66:	4621      	mov	r1, r4
 c009b68:	4628      	mov	r0, r5
 c009b6a:	f7ff ff8b 	bl	c009a84 <_fflush_r>
 c009b6e:	2800      	cmp	r0, #0
 c009b70:	d0d9      	beq.n	c009b26 <__swbuf_r+0x2e>
 c009b72:	e7d6      	b.n	c009b22 <__swbuf_r+0x2a>

0c009b74 <__swsetup_r>:
 c009b74:	b538      	push	{r3, r4, r5, lr}
 c009b76:	4b29      	ldr	r3, [pc, #164]	@ (c009c1c <__swsetup_r+0xa8>)
 c009b78:	4605      	mov	r5, r0
 c009b7a:	460c      	mov	r4, r1
 c009b7c:	6818      	ldr	r0, [r3, #0]
 c009b7e:	b118      	cbz	r0, c009b88 <__swsetup_r+0x14>
 c009b80:	6a03      	ldr	r3, [r0, #32]
 c009b82:	b90b      	cbnz	r3, c009b88 <__swsetup_r+0x14>
 c009b84:	f7ff fa06 	bl	c008f94 <__sinit>
 c009b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c009b8c:	0719      	lsls	r1, r3, #28
 c009b8e:	d422      	bmi.n	c009bd6 <__swsetup_r+0x62>
 c009b90:	06da      	lsls	r2, r3, #27
 c009b92:	d407      	bmi.n	c009ba4 <__swsetup_r+0x30>
 c009b94:	2209      	movs	r2, #9
 c009b96:	602a      	str	r2, [r5, #0]
 c009b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 c009b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c009ba0:	81a3      	strh	r3, [r4, #12]
 c009ba2:	e033      	b.n	c009c0c <__swsetup_r+0x98>
 c009ba4:	0758      	lsls	r0, r3, #29
 c009ba6:	d512      	bpl.n	c009bce <__swsetup_r+0x5a>
 c009ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 c009baa:	b141      	cbz	r1, c009bbe <__swsetup_r+0x4a>
 c009bac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 c009bb0:	4299      	cmp	r1, r3
 c009bb2:	d002      	beq.n	c009bba <__swsetup_r+0x46>
 c009bb4:	4628      	mov	r0, r5
 c009bb6:	f7ff fb0d 	bl	c0091d4 <_free_r>
 c009bba:	2300      	movs	r3, #0
 c009bbc:	6363      	str	r3, [r4, #52]	@ 0x34
 c009bbe:	89a3      	ldrh	r3, [r4, #12]
 c009bc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 c009bc4:	81a3      	strh	r3, [r4, #12]
 c009bc6:	2300      	movs	r3, #0
 c009bc8:	6063      	str	r3, [r4, #4]
 c009bca:	6923      	ldr	r3, [r4, #16]
 c009bcc:	6023      	str	r3, [r4, #0]
 c009bce:	89a3      	ldrh	r3, [r4, #12]
 c009bd0:	f043 0308 	orr.w	r3, r3, #8
 c009bd4:	81a3      	strh	r3, [r4, #12]
 c009bd6:	6923      	ldr	r3, [r4, #16]
 c009bd8:	b94b      	cbnz	r3, c009bee <__swsetup_r+0x7a>
 c009bda:	89a3      	ldrh	r3, [r4, #12]
 c009bdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 c009be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c009be4:	d003      	beq.n	c009bee <__swsetup_r+0x7a>
 c009be6:	4621      	mov	r1, r4
 c009be8:	4628      	mov	r0, r5
 c009bea:	f000 f863 	bl	c009cb4 <__smakebuf_r>
 c009bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c009bf2:	f013 0201 	ands.w	r2, r3, #1
 c009bf6:	d00a      	beq.n	c009c0e <__swsetup_r+0x9a>
 c009bf8:	2200      	movs	r2, #0
 c009bfa:	60a2      	str	r2, [r4, #8]
 c009bfc:	6962      	ldr	r2, [r4, #20]
 c009bfe:	4252      	negs	r2, r2
 c009c00:	61a2      	str	r2, [r4, #24]
 c009c02:	6922      	ldr	r2, [r4, #16]
 c009c04:	b942      	cbnz	r2, c009c18 <__swsetup_r+0xa4>
 c009c06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 c009c0a:	d1c5      	bne.n	c009b98 <__swsetup_r+0x24>
 c009c0c:	bd38      	pop	{r3, r4, r5, pc}
 c009c0e:	0799      	lsls	r1, r3, #30
 c009c10:	bf58      	it	pl
 c009c12:	6962      	ldrpl	r2, [r4, #20]
 c009c14:	60a2      	str	r2, [r4, #8]
 c009c16:	e7f4      	b.n	c009c02 <__swsetup_r+0x8e>
 c009c18:	2000      	movs	r0, #0
 c009c1a:	e7f7      	b.n	c009c0c <__swsetup_r+0x98>
 c009c1c:	3000062c 	.word	0x3000062c

0c009c20 <_sbrk_r>:
 c009c20:	b538      	push	{r3, r4, r5, lr}
 c009c22:	2300      	movs	r3, #0
 c009c24:	4d05      	ldr	r5, [pc, #20]	@ (c009c3c <_sbrk_r+0x1c>)
 c009c26:	4604      	mov	r4, r0
 c009c28:	4608      	mov	r0, r1
 c009c2a:	602b      	str	r3, [r5, #0]
 c009c2c:	f7f9 f97e 	bl	c002f2c <_sbrk>
 c009c30:	1c43      	adds	r3, r0, #1
 c009c32:	d102      	bne.n	c009c3a <_sbrk_r+0x1a>
 c009c34:	682b      	ldr	r3, [r5, #0]
 c009c36:	b103      	cbz	r3, c009c3a <_sbrk_r+0x1a>
 c009c38:	6023      	str	r3, [r4, #0]
 c009c3a:	bd38      	pop	{r3, r4, r5, pc}
 c009c3c:	30000c48 	.word	0x30000c48

0c009c40 <memchr>:
 c009c40:	b2c9      	uxtb	r1, r1
 c009c42:	4603      	mov	r3, r0
 c009c44:	4402      	add	r2, r0
 c009c46:	b510      	push	{r4, lr}
 c009c48:	4293      	cmp	r3, r2
 c009c4a:	4618      	mov	r0, r3
 c009c4c:	d101      	bne.n	c009c52 <memchr+0x12>
 c009c4e:	2000      	movs	r0, #0
 c009c50:	e003      	b.n	c009c5a <memchr+0x1a>
 c009c52:	7804      	ldrb	r4, [r0, #0]
 c009c54:	3301      	adds	r3, #1
 c009c56:	428c      	cmp	r4, r1
 c009c58:	d1f6      	bne.n	c009c48 <memchr+0x8>
 c009c5a:	bd10      	pop	{r4, pc}

0c009c5c <abort>:
 c009c5c:	2006      	movs	r0, #6
 c009c5e:	b508      	push	{r3, lr}
 c009c60:	f000 f88c 	bl	c009d7c <raise>
 c009c64:	2001      	movs	r0, #1
 c009c66:	f7f9 f8e8 	bl	c002e3a <_exit>

0c009c6a <__swhatbuf_r>:
 c009c6a:	b570      	push	{r4, r5, r6, lr}
 c009c6c:	460c      	mov	r4, r1
 c009c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c009c72:	b096      	sub	sp, #88	@ 0x58
 c009c74:	4615      	mov	r5, r2
 c009c76:	2900      	cmp	r1, #0
 c009c78:	461e      	mov	r6, r3
 c009c7a:	da0c      	bge.n	c009c96 <__swhatbuf_r+0x2c>
 c009c7c:	89a3      	ldrh	r3, [r4, #12]
 c009c7e:	2100      	movs	r1, #0
 c009c80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 c009c84:	bf14      	ite	ne
 c009c86:	2340      	movne	r3, #64	@ 0x40
 c009c88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 c009c8c:	2000      	movs	r0, #0
 c009c8e:	6031      	str	r1, [r6, #0]
 c009c90:	602b      	str	r3, [r5, #0]
 c009c92:	b016      	add	sp, #88	@ 0x58
 c009c94:	bd70      	pop	{r4, r5, r6, pc}
 c009c96:	466a      	mov	r2, sp
 c009c98:	f000 f878 	bl	c009d8c <_fstat_r>
 c009c9c:	2800      	cmp	r0, #0
 c009c9e:	dbed      	blt.n	c009c7c <__swhatbuf_r+0x12>
 c009ca0:	9901      	ldr	r1, [sp, #4]
 c009ca2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 c009ca6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 c009caa:	4259      	negs	r1, r3
 c009cac:	4159      	adcs	r1, r3
 c009cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 c009cb2:	e7eb      	b.n	c009c8c <__swhatbuf_r+0x22>

0c009cb4 <__smakebuf_r>:
 c009cb4:	898b      	ldrh	r3, [r1, #12]
 c009cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c009cb8:	079d      	lsls	r5, r3, #30
 c009cba:	4606      	mov	r6, r0
 c009cbc:	460c      	mov	r4, r1
 c009cbe:	d507      	bpl.n	c009cd0 <__smakebuf_r+0x1c>
 c009cc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 c009cc4:	6023      	str	r3, [r4, #0]
 c009cc6:	6123      	str	r3, [r4, #16]
 c009cc8:	2301      	movs	r3, #1
 c009cca:	6163      	str	r3, [r4, #20]
 c009ccc:	b003      	add	sp, #12
 c009cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c009cd0:	ab01      	add	r3, sp, #4
 c009cd2:	466a      	mov	r2, sp
 c009cd4:	f7ff ffc9 	bl	c009c6a <__swhatbuf_r>
 c009cd8:	9f00      	ldr	r7, [sp, #0]
 c009cda:	4605      	mov	r5, r0
 c009cdc:	4630      	mov	r0, r6
 c009cde:	4639      	mov	r1, r7
 c009ce0:	f7ff faec 	bl	c0092bc <_malloc_r>
 c009ce4:	b948      	cbnz	r0, c009cfa <__smakebuf_r+0x46>
 c009ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c009cea:	059a      	lsls	r2, r3, #22
 c009cec:	d4ee      	bmi.n	c009ccc <__smakebuf_r+0x18>
 c009cee:	f023 0303 	bic.w	r3, r3, #3
 c009cf2:	f043 0302 	orr.w	r3, r3, #2
 c009cf6:	81a3      	strh	r3, [r4, #12]
 c009cf8:	e7e2      	b.n	c009cc0 <__smakebuf_r+0xc>
 c009cfa:	89a3      	ldrh	r3, [r4, #12]
 c009cfc:	6020      	str	r0, [r4, #0]
 c009cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c009d02:	81a3      	strh	r3, [r4, #12]
 c009d04:	9b01      	ldr	r3, [sp, #4]
 c009d06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 c009d0a:	b15b      	cbz	r3, c009d24 <__smakebuf_r+0x70>
 c009d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c009d10:	4630      	mov	r0, r6
 c009d12:	f000 f84d 	bl	c009db0 <_isatty_r>
 c009d16:	b128      	cbz	r0, c009d24 <__smakebuf_r+0x70>
 c009d18:	89a3      	ldrh	r3, [r4, #12]
 c009d1a:	f023 0303 	bic.w	r3, r3, #3
 c009d1e:	f043 0301 	orr.w	r3, r3, #1
 c009d22:	81a3      	strh	r3, [r4, #12]
 c009d24:	89a3      	ldrh	r3, [r4, #12]
 c009d26:	431d      	orrs	r5, r3
 c009d28:	81a5      	strh	r5, [r4, #12]
 c009d2a:	e7cf      	b.n	c009ccc <__smakebuf_r+0x18>

0c009d2c <_raise_r>:
 c009d2c:	291f      	cmp	r1, #31
 c009d2e:	b538      	push	{r3, r4, r5, lr}
 c009d30:	4605      	mov	r5, r0
 c009d32:	460c      	mov	r4, r1
 c009d34:	d904      	bls.n	c009d40 <_raise_r+0x14>
 c009d36:	2316      	movs	r3, #22
 c009d38:	6003      	str	r3, [r0, #0]
 c009d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c009d3e:	bd38      	pop	{r3, r4, r5, pc}
 c009d40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 c009d42:	b112      	cbz	r2, c009d4a <_raise_r+0x1e>
 c009d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 c009d48:	b94b      	cbnz	r3, c009d5e <_raise_r+0x32>
 c009d4a:	4628      	mov	r0, r5
 c009d4c:	f000 f852 	bl	c009df4 <_getpid_r>
 c009d50:	4622      	mov	r2, r4
 c009d52:	4601      	mov	r1, r0
 c009d54:	4628      	mov	r0, r5
 c009d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c009d5a:	f000 b839 	b.w	c009dd0 <_kill_r>
 c009d5e:	2b01      	cmp	r3, #1
 c009d60:	d00a      	beq.n	c009d78 <_raise_r+0x4c>
 c009d62:	1c59      	adds	r1, r3, #1
 c009d64:	d103      	bne.n	c009d6e <_raise_r+0x42>
 c009d66:	2316      	movs	r3, #22
 c009d68:	6003      	str	r3, [r0, #0]
 c009d6a:	2001      	movs	r0, #1
 c009d6c:	e7e7      	b.n	c009d3e <_raise_r+0x12>
 c009d6e:	2100      	movs	r1, #0
 c009d70:	4620      	mov	r0, r4
 c009d72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 c009d76:	4798      	blx	r3
 c009d78:	2000      	movs	r0, #0
 c009d7a:	e7e0      	b.n	c009d3e <_raise_r+0x12>

0c009d7c <raise>:
 c009d7c:	4b02      	ldr	r3, [pc, #8]	@ (c009d88 <raise+0xc>)
 c009d7e:	4601      	mov	r1, r0
 c009d80:	6818      	ldr	r0, [r3, #0]
 c009d82:	f7ff bfd3 	b.w	c009d2c <_raise_r>
 c009d86:	bf00      	nop
 c009d88:	3000062c 	.word	0x3000062c

0c009d8c <_fstat_r>:
 c009d8c:	b538      	push	{r3, r4, r5, lr}
 c009d8e:	2300      	movs	r3, #0
 c009d90:	4d06      	ldr	r5, [pc, #24]	@ (c009dac <_fstat_r+0x20>)
 c009d92:	4604      	mov	r4, r0
 c009d94:	4608      	mov	r0, r1
 c009d96:	4611      	mov	r1, r2
 c009d98:	602b      	str	r3, [r5, #0]
 c009d9a:	f7f9 f89e 	bl	c002eda <_fstat>
 c009d9e:	1c43      	adds	r3, r0, #1
 c009da0:	d102      	bne.n	c009da8 <_fstat_r+0x1c>
 c009da2:	682b      	ldr	r3, [r5, #0]
 c009da4:	b103      	cbz	r3, c009da8 <_fstat_r+0x1c>
 c009da6:	6023      	str	r3, [r4, #0]
 c009da8:	bd38      	pop	{r3, r4, r5, pc}
 c009daa:	bf00      	nop
 c009dac:	30000c48 	.word	0x30000c48

0c009db0 <_isatty_r>:
 c009db0:	b538      	push	{r3, r4, r5, lr}
 c009db2:	2300      	movs	r3, #0
 c009db4:	4d05      	ldr	r5, [pc, #20]	@ (c009dcc <_isatty_r+0x1c>)
 c009db6:	4604      	mov	r4, r0
 c009db8:	4608      	mov	r0, r1
 c009dba:	602b      	str	r3, [r5, #0]
 c009dbc:	f7f9 f89d 	bl	c002efa <_isatty>
 c009dc0:	1c43      	adds	r3, r0, #1
 c009dc2:	d102      	bne.n	c009dca <_isatty_r+0x1a>
 c009dc4:	682b      	ldr	r3, [r5, #0]
 c009dc6:	b103      	cbz	r3, c009dca <_isatty_r+0x1a>
 c009dc8:	6023      	str	r3, [r4, #0]
 c009dca:	bd38      	pop	{r3, r4, r5, pc}
 c009dcc:	30000c48 	.word	0x30000c48

0c009dd0 <_kill_r>:
 c009dd0:	b538      	push	{r3, r4, r5, lr}
 c009dd2:	2300      	movs	r3, #0
 c009dd4:	4d06      	ldr	r5, [pc, #24]	@ (c009df0 <_kill_r+0x20>)
 c009dd6:	4604      	mov	r4, r0
 c009dd8:	4608      	mov	r0, r1
 c009dda:	4611      	mov	r1, r2
 c009ddc:	602b      	str	r3, [r5, #0]
 c009dde:	f7f9 f81c 	bl	c002e1a <_kill>
 c009de2:	1c43      	adds	r3, r0, #1
 c009de4:	d102      	bne.n	c009dec <_kill_r+0x1c>
 c009de6:	682b      	ldr	r3, [r5, #0]
 c009de8:	b103      	cbz	r3, c009dec <_kill_r+0x1c>
 c009dea:	6023      	str	r3, [r4, #0]
 c009dec:	bd38      	pop	{r3, r4, r5, pc}
 c009dee:	bf00      	nop
 c009df0:	30000c48 	.word	0x30000c48

0c009df4 <_getpid_r>:
 c009df4:	f7f9 b809 	b.w	c002e0a <_getpid>

0c009df8 <_init>:
 c009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009dfa:	bf00      	nop
 c009dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c009dfe:	bc08      	pop	{r3}
 c009e00:	469e      	mov	lr, r3
 c009e02:	4770      	bx	lr

0c009e04 <_fini>:
 c009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009e06:	bf00      	nop
 c009e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c009e0a:	bc08      	pop	{r3}
 c009e0c:	469e      	mov	lr, r3
 c009e0e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c5 b90c 	b.w	c003220 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_log_cond_br>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c4 baaf 	b.w	c00256e <__acle_se_SECURE_log_cond_br>

0c03e010 <SECURE_RunCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c4 b960 	b.w	c0022d8 <__acle_se_SECURE_RunCallback>

0c03e018 <SECURE_log_call>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c4 ba5e 	b.w	c0024dc <__acle_se_SECURE_log_call>

0c03e020 <SECURE_record_output_data>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c4 bb2c 	b.w	c002680 <__acle_se_SECURE_record_output_data>

0c03e028 <SECURE_Initialize_CFA_engine>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c4 b992 	b.w	c002354 <__acle_se_SECURE_Initialize_CFA_engine>

0c03e030 <SECURE_Initialize_Attestation>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c4 b9ca 	b.w	c0023cc <__acle_se_SECURE_Initialize_Attestation>

0c03e038 <SECURE_log_ret>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c4 ba02 	b.w	c002444 <__acle_se_SECURE_log_ret>

0c03e040 <SECURE_RegisterCallback>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c4 b8e6 	b.w	c002214 <__acle_se_SECURE_RegisterCallback>

0c03e048 <SECURE_run_attestation_wait_mode>:
 c03e048:	e97f e97f 	sg
 c03e04c:	f7c4 badc 	b.w	c002608 <__acle_se_SECURE_run_attestation_wait_mode>
	...
